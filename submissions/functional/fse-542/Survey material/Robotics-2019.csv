Timestamp,Which types of robots are used in your projects?,Which is the application field of your projects?,Which type of service or product do you provide in your projects?,Which activities are performed in your projects? [Project management],Which activities are performed in your projects? [Requirements engineering],Which activities are performed in your projects? [Architectural and detailed design],"Which activities are performed in your projects? [Implementation (i.e., writing code)]",Which activities are performed in your projects? [Automatic code generation],Which activities are performed in your projects? [Testing and simulation],Which activities are performed in your projects? [Real-world experimentation],Which activities are performed in your projects? [Software maintenance/evolution],Which activities are performed in your projects? [Other (please specify)],"If applicable, please specify your answer for ""Other"":","Which tools do you use for ""Project management"" in your projects? ","Which tools do you use for ""Requirements engineering"" in your projects?","Which tools do you use for ""Architectural and detailed design"" in your projects?","Which tools do you use for ""Implementation"" in your projects?","Which tools/languages do you use for ""Automatic code generation"" in your projects?","Which tools do you use for ""Testing and simulation"" in your projects?","Which tools do you use for ""Real-world experimentation"" in your projects?","Which tools do you use for ""Software maintenance/evolution"" in your projects?",Which software development paradigms are applied in your projects? [Object-oriented programming],Which software development paradigms are applied in your projects? [Functional programming],Which software development paradigms are applied in your projects? [Component-based software engineering],Which software development paradigms are applied in your projects? [Model-based software development],Which software development paradigms are applied in your projects? [Software product line engineering],Which software development paradigms are applied in your projects? [Other (please specify)],"If applicable, please specify your answer for ""Other"":",Which of these software engineering processes do you apply in your projects? [Waterfall],"Which of these software engineering processes do you apply in your projects? [Hybrid (e.g., V-Model, Spiral)]","Which of these software engineering processes do you apply in your projects? [Agile (e.g., SCRUM, Extreme Programming)]",Which of these software engineering processes do you apply in your projects? [Other (please specify below)],"If applicable, please specify your answer for ""Other"":",Which of these software languages do you use in your projects? [Java],Which of these software languages do you use in your projects? [C ],Which of these software languages do you use in your projects? [C++],Which of these software languages do you use in your projects? [Python],Which of these software languages do you use in your projects? [UML],Which of these software languages do you use in your projects? [MATLAB / Simulink],Which of these software languages do you use in your projects? [Self-developed DSLs],Which of these software languages do you use in your projects? [Third-party DSLs],Which of these software languages do you use in your projects? [Other (please specify below)],"If applicable, please specify your answer for ""Other"":",Which of these robotic frameworks do you use in your projects?,"When you use third-party software (e.g., libraries), what are their licensing models?",Under which license do you release your own software?,Which software artifacts are reused across projects in your organization? [Source code],Which software artifacts are reused across projects in your organization? [Configuration files],Which software artifacts are reused across projects in your organization? [Software models],Which software artifacts are reused across projects in your organization? [Libraries (source or binaries)],Which software artifacts are reused across projects in your organization? [Software components],Which software artifacts are reused across projects in your organization? [Documentation],Which software artifacts are reused across projects in your organization? [Test cases],Which software artifacts are reused across projects in your organization? [Other (please specify below)],"If applicable, please specify your answer for ""Other"":","Have you ever developed a software component from scratch rather than reusing an existing (either self-developed or third-party) one? If yes, why?",Which reuse style is the most commonly used in your projects?,Which mechanisms to facilitate interoperability among components are applied in your projects? Leave empty if none.,"If applicable, please specify your answer for ""We follow a standard "" / ""Other"":",Which kind of quality assurance techniques do you perform in your projects? [Unit testing],Which kind of quality assurance techniques do you perform in your projects? [Integration testing],Which kind of quality assurance techniques do you perform in your projects? [Performance testing],Which kind of quality assurance techniques do you perform in your projects? [Code reviews],Which kind of quality assurance techniques do you perform in your projects? [Formal methods (please specify below)],Which kind of quality assurance techniques do you perform in your projects? [Other (please specify below)],"If applicable, please specify your answer for ""Formal methods"" / ""Other"":",From where do you get test data in your projects?,How do you find the root causes of failures in your projects?,Who specifies missions for robots in your projects?,"Which mission specification method do you use in your projects? [Hard-coded (in the used programming language, XML file, etc)]","Which mission specification method do you use in your projects? [Use of logical language (e.g., LTL, CTL)]",Which mission specification method do you use in your projects? [Use of a third-party DSL],Which mission specification method do you use in your projects? [Use of an own DSL],Which mission specification method do you use in your projects? [Other (please specify)],"If applicable, please specify your answer for ""Other"":","For the following items, to which extent do you agree that they describe a challenge in your projects? A challenge is a task that makes the development difficult. [Specifying missions for robots]","For the following items, to which extent do you agree that they describe a challenge in your projects? A challenge is a task that makes the development difficult. [Software reuse]","For the following items, to which extent do you agree that they describe a challenge in your projects? A challenge is a task that makes the development difficult. [Lack of documentation]","For the following items, to which extent do you agree that they describe a challenge in your projects? A challenge is a task that makes the development difficult. [Lack of standards]","For the following items, to which extent do you agree that they describe a challenge in your projects? A challenge is a task that makes the development difficult. [Interoperability among heterogeneous components]","For the following items, to which extent do you agree that they describe a challenge in your projects? A challenge is a task that makes the development difficult. [Validating the robotic system]","For the following items, to which extent do you agree that they describe a challenge in your projects? A challenge is a task that makes the development difficult. [Safety certification]","For the following items, to which extent do you agree that they describe a challenge in your projects? A challenge is a task that makes the development difficult. [Robustness]","For the following items, to which extent do you agree that they describe a challenge in your projects? A challenge is a task that makes the development difficult. [Dynamic adaptation of robotic behavior]","For the following items, to which extent do you agree that they describe a challenge in your projects? A challenge is a task that makes the development difficult. [Transition from simulation to real world applications]","For the following items, to which extent do you agree that they describe a challenge in your projects? A challenge is a task that makes the development difficult. [Applying artificial intelligence techniques]","For the following items, to which extent do you agree that they describe a challenge in your projects? A challenge is a task that makes the development difficult. [Other (please specify below)]","If applicable, please specify your answer for ""Other"":","For the encountered challenges, which solutions do you apply to address them? Please, specify solutions together with the challenges they address.",Is there something you would like to add regarding the biggest challenges in robotics software engineering?,How do you think robotics software engineering differs from software engineering in other domains?,"Do you think the practices applied in robotics software engineering should change? If yes, in what way?",What is your occupation?,For how long have you been working in robotics? Please specify the time in years.,To which gender identity do you most identify?,What is the size of your company?
10/06/2019 11:45:54,Industrial arms,Factory automation,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",4 (always),4 (always),4 (always),4 (always),0 (never),3 (very often),4 (always),4 (always),0 (never),,"JIRA, Excel","JIRA, Word, Excel","PowerPoint, Word","Vim, Visual Studio",,"RoboFramework, pytest","in-house tool, roboframework","Vim, Visual Studio",3 (very often),2 (sometimes),3 (very often),0 (never),2 (sometimes),0 (never),,3 (very often),0 (never),3 (very often),0 (never),,2 (sometimes),2 (sometimes),0 (never),3 (very often),0 (never),0 (never),0 (never),0 (never),0 (never),,No off the shelf framework,"Proprietary, Open source",Proprietary,4 (always),3 (very often),0 (never),4 (always),4 (always),4 (always),4 (always),0 (never),,"Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions",Both equally,"We rely on the experience and skills of our team, Other (please specify below)",We follow a not precise architecture and interface spec of the system combined with experience and skills,4 (always),4 (always),1 (almost never),2 (sometimes),0 (never),0 (never),,"Manual specification based on experience, Simulation, Runtime monitoring","Analysis of generated data and logs, try to recreate, then writing tests on higher level, follow traces and try to isolate the failure, if possible, sometimes it is in the interactions or faulty assumptions between components or sub-components and the failure is actually something that needs to be clarified on the correct level.",Product owners,4 (always),0 (never),0 (never),0 (never),0 (never),,1 (disagree),3 (agree),3 (agree),0 (strongly disagree),3 (agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),1 (disagree),2 (neutral),0 (strongly disagree),Don't know,,Automated tests,,"The lack of software engineering practices, a lot of engineers without software engineering training that treat software development like how it was treated at their educations, with no thought.

No traceability, no testing outside running things and see what happens (simulation sometimes, but often on physical robots), no proper planning and prioritization, sometimes not even proper version control of artifacts or even the source code.","At other organizations I have perceived the lack of automated and reproducible tests to be a problem, something we try to address here. Also an overconfidence that modeling languages and formalism can replace software engineering practices, and that with (graphical) modeling languages and formalism, software engineers can be replaced with automation engineers or similar, and that software engineers are not needed. But in the end, it is software.",Industrial practitioner: Programmer,15,,+50
10/06/2019 14:00:05,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Drones, Industrial arms","Factory automation, Agriculture, Transportation, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",2 (sometimes),4 (always),4 (always),4 (always),1 (almost never),3 (very often),4 (always),3 (very often),4 (always),System integration,None,None,None,Linux-based code development tools,None,None,None,None,1 (almost never),3 (very often),3 (very often),4 (always),1 (almost never),4 (always),software patterns,3 (very often),3 (very often),1 (almost never),Don't know,,Don't know,4 (always),4 (always),3 (very often),0 (never),1 (almost never),2 (sometimes),1 (almost never),Don't know,,"ROS, OROCOS, SmartSoft",Open source,Open source,4 (always),2 (sometimes),3 (very often),3 (very often),2 (sometimes),3 (very often),2 (sometimes),Don't know,,"Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), required functionality not available yet",Copy-paste-modify,We rely on the experience and skills of our team,,2 (sometimes),2 (sometimes),2 (sometimes),2 (sometimes),1 (almost never),Don't know,,"Manual specification based on experience, Runtime monitoring",Analysis by senior developers,Developer,4 (always),0 (never),0 (never),1 (almost never),Don't know,,4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),2 (neutral),2 (neutral),4 (strongly agree),"Self-""X"" capabilities ","Think hard, fail often, keep hoping despite continuous failure","Standardization, of both platform and models",A more clear need for higher-order reasoning/modelling/integration,Towards delivering more robust/predictable components,Academic/Scientist,30+,,31-50
10/06/2019 20:08:03,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Factory automation, Cleaning, Transportation, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",3 (very often),2 (sometimes),3 (very often),3 (very often),1 (almost never),3 (very often),3 (very often),2 (sometimes),Don't know,,"Trello, gitlab","Office, gitlab","PowerPoint, UML","QT creator, Atom, Sublime",,Gazebo,"rosbag, rviz, rqt_plot",git,4 (always),1 (almost never),2 (sometimes),1 (almost never),0 (never),Don't know,,0 (never),1 (almost never),3 (very often),Don't know,,2 (sometimes),2 (sometimes),3 (very often),3 (very often),3 (very often),1 (almost never),1 (almost never),2 (sometimes),Don't know,,"ROS, ROS 2.0",Open source,"Proprietary, Open source",3 (very often),3 (very often),1 (almost never),3 (very often),3 (very often),2 (sometimes),2 (sometimes),Don't know,,"Lack of documentation, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Both equally,We rely on the experience and skills of our team,,3 (very often),4 (always),3 (very often),4 (always),Don't know,Don't know,,"Simulation, Runtime monitoring",Testing (sim/real world) and Debugging,Technically skilled end-user,2 (sometimes),1 (almost never),1 (almost never),2 (sometimes),Don't know,,1 (disagree),1 (disagree),3 (agree),3 (agree),2 (neutral),2 (neutral),1 (disagree),4 (strongly agree),3 (agree),3 (agree),2 (neutral),Don't know,,"Testing, testing, testing ",Reliabilty of the Software under Differential conditions,interaction with real world with complex actuators,less hacking and more structured development of reliable sw,Academic/Scientist,9,,+50
10/06/2019 22:07:24,"Mobile robots (i.e., ground robots with navigation capabilities)","Factory automation, Cleaning, Transportation, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Real-Time Operating System",3 (very often),3 (very often),4 (always),4 (always),1 (almost never),3 (very often),3 (very often),4 (always),Don't know,,Redmine,,UML,,,Gazebo,"Roslaunch, vdemo",,3 (very often),3 (very often),4 (always),0 (never),Don't know,Don't know,,0 (never),3 (very often),1 (almost never),Don't know,,0 (never),4 (always),4 (always),3 (very often),2 (sometimes),0 (never),0 (never),0 (never),Don't know,,"ROS, RSB",Open source,Open source,1 (almost never),2 (sometimes),2 (sometimes),3 (very often),1 (almost never),1 (almost never),1 (almost never),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,3 (very often),3 (very often),2 (sometimes),1 (almost never),Don't know,Don't know,,"Simulation, Runtime monitoring",Analytical review of collected data and additional testing. ,Developer,2 (sometimes),Don't know,Don't know,Don't know,Don't know,,2 (neutral),3 (agree),3 (agree),4 (strongly agree),4 (strongly agree),3 (agree),1 (disagree),3 (agree),1 (disagree),2 (neutral),0 (strongly disagree),Don't know,,Lack of standardization: develop interfaces internal standard ,Hardware design quality is often insufficient for state-of-the-art software. Novel approaches in hardware design are difficult to fully exploit due to lack of software support. ,Tightly coupled to hardware and physical capabilities of the systems. ,"Yes, more real-time software and modular, distributed, scalable approaches are required. ",Academic/Scientist,Eight years,,+50
11/06/2019 09:13:38,"Mobile robots (i.e., ground robots with navigation capabilities)",Healthcare,"Complete robotic system (e.g., BOSCH's lawnmower)",3 (very often),2 (sometimes),2 (sometimes),4 (always),2 (sometimes),3 (very often),4 (always),2 (sometimes),Don't know,,Issues + Boards of GitLab,"Word, Markdown",Visual Paradigm,"Eclipse, Android Studio",Protobuf,"gtest, valgrind, Jenkins, V-REP",In-hous test procedures with user reports and automated logging (CSV files),Eclipse,4 (always),1 (almost never),3 (very often),1 (almost never),0 (never),Don't know,,0 (never),0 (never),3 (very often),Don't know,,4 (always),2 (sometimes),4 (always),3 (very often),3 (very often),0 (never),0 (never),0 (never),Don't know,,none,Open source,"Proprietary, Open source",2 (sometimes),2 (sometimes),1 (almost never),2 (sometimes),0 (never),1 (almost never),0 (never),Don't know,,To many dependencies (libraries),"Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,4 (always),4 (always),2 (sometimes),2 (sometimes),0 (never),Don't know,,Runtime monitoring,Generation of hypotheses by analysis of log data in combination with user reports. Then further dedicated (field) tests are conducted to falsify/verify hypotheses. ,"Developer, Non-technical end-user",0 (never),0 (never),0 (never),0 (never),0 (never),,0 (strongly disagree),2 (neutral),2 (neutral),1 (disagree),1 (disagree),2 (neutral),3 (agree),3 (agree),1 (disagree),1 (disagree),0 (strongly disagree),Don't know,,FMEA,,"Yes. Hardware components are difficult to integrate into an automated testing process. Thus, software engineering practices for testing will only cover a subset of the functionality to be tested. This leads to a substantial increased man effort to test in real world experiments.  ",Better tool support for automated and systematic testing,Industrial practitioner: Leading Technical Role,10,,1-10
11/06/2019 10:02:04,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)",General research on service robots,"Complete robotic system (e.g., BOSCH's lawnmower)",2 (sometimes),Don't know,Don't know,4 (always),4 (always),4 (always),4 (always),4 (always),Don't know,,Trello,,,QT creator,in house,gazebo,rosbag roslaunch,qt creator,4 (always),1 (almost never),4 (always),1 (almost never),Don't know,Don't know,,Don't know,Don't know,3 (very often),Don't know,,Don't know,Don't know,4 (always),2 (sometimes),Don't know,Don't know,Don't know,Don't know,Don't know,,"ROS, OROCOS","Proprietary, Open source","Proprietary, Open source",4 (always),4 (always),Don't know,4 (always),4 (always),4 (always),4 (always),Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We follow a precise architecture of the system",,4 (always),4 (always),3 (very often),3 (very often),Don't know,Don't know,,"Simulation, Runtime monitoring","debugging, or unit testing
","Developer, Non-technical end-user",3 (very often),Don't know,Don't know,Don't know,Don't know,,Don't know,3 (agree),3 (agree),3 (agree),3 (agree),Don't know,3 (agree),3 (agree),2 (neutral),3 (agree),Don't know,Don't know,,.,,"Specifically service robotics need to adapt to very heterogeneous situations, which increases dramatically the difficulty of the problem.",,Industrial practitioner: Programmer,8+,,
12/06/2019 09:54:10,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Drones, Underwater robots, Industrial arms","Factory automation, Agriculture, Transportation, Medical, Defense, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),3 (very often),3 (very often),3 (very often),2 (sometimes),3 (very often),3 (very often),2 (sometimes),Don't know,,"Redmine, Trello, In-house tools",DokuWiki (in house tool),"draw.io, dokuwiki, enterprise architect","Eclipse, Code, Vim, QT-creator","Matlab, in-house tool/language","Gazebo, Unreal, Unity (in-house tools)","rosbag, roslaunch, makefiles","Eclipse, Code, Vim, QT-creator, Jenkins, Gitlab",3 (very often),3 (very often),3 (very often),2 (sometimes),2 (sometimes),Don't know,,3 (very often),3 (very often),3 (very often),Don't know,,1 (almost never),3 (very often),3 (very often),3 (very often),1 (almost never),2 (sometimes),0 (never),0 (never),Don't know,,"ROS, ROS 2.0, OpenJAUS","Proprietary, Open source","Proprietary, Open source",3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),Don't know,,"Internal policies, Favouring self-developed solutions",Both equally,"We rely on the experience and skills of our team, We follow a precise architecture of the system, We have a clear definition of interfaces of each component, We follow a standard (please specify below)",IOP,2 (sometimes),2 (sometimes),2 (sometimes),2 (sometimes),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Lack of communication among developers at early project stage due to other obligations.,"Non-technical end-user, Technically skilled end-user, Integrator",2 (sometimes),1 (almost never),1 (almost never),1 (almost never),3 (very often),Mission are specified in an open form (docs).,2 (neutral),2 (neutral),3 (agree),2 (neutral),3 (agree),3 (agree),4 (strongly agree),4 (strongly agree),3 (agree),3 (agree),3 (agree),Don't know,,See the problem open-minded with variety of developers.,,Yes. Real testing is limited by practical implications.,,Academic/Scientist,10,Male,+50
12/06/2019 10:16:26,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Drones, Underwater robots","Transportation, Medical, Defense, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",4 (always),4 (always),4 (always),4 (always),1 (almost never),3 (very often),4 (always),2 (sometimes),Don't know,,"Redmine, Trello, Gitlab, DokuWiki","Word, DokuWiki","UML, Draw.IO","Visual Studio Code, Qt Creator, Eclipse",,"Unity, Gazebo",ROS,"Visual Studio Code, Qt Creator, Eclipse",4 (always),2 (sometimes),3 (very often),3 (very often),3 (very often),Don't know,,Don't know,Don't know,4 (always),Don't know,,2 (sometimes),3 (very often),3 (very often),3 (very often),3 (very often),2 (sometimes),1 (almost never),1 (almost never),Don't know,,"ROS, ROS 2.0","Proprietary, Open source","Proprietary, Open source",4 (always),3 (very often),2 (sometimes),3 (very often),3 (very often),2 (sometimes),1 (almost never),Don't know,,"Lack of trust, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Both equally,"We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,2 (sometimes),3 (very often),3 (very often),1 (almost never),Don't know,Don't know,,"Manual specification based on experience, Simulation",Projects post-mortem analysis.,"Non-technical end-user, Technically skilled end-user",4 (always),1 (almost never),2 (sometimes),Don't know,Don't know,,2 (neutral),3 (agree),4 (strongly agree),4 (strongly agree),3 (agree),3 (agree),4 (strongly agree),4 (strongly agree),1 (disagree),3 (agree),3 (agree),Don't know,,Team experience mainly for lack of standards and documentation. ,Gathering/acquiring data sets for training and testing.,"Robotics software engineering always require a lot of academic research.  Additionally in any robotic system safety considerations must have a top priority. Of course we can say that about every domain, but this one affect people in a physical way more than others. ",,Industrial practitioner: Programmer,5,Male,+50
12/06/2019 12:09:05,"Mobile robots (i.e., ground robots with navigation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)",Transportation,"Complete robotic system (e.g., BOSCH's lawnmower)",1 (almost never),1 (almost never),0 (never),4 (always),0 (never),4 (always),3 (very often),4 (always),Don't know,,Jira,"Jira, Confluence",,Visual Studio Code,,ROS and Stage,Full ROS suite,Visual Studio Code,4 (always),0 (never),4 (always),1 (almost never),3 (very often),Don't know,,3 (very often),Don't know,4 (always),Don't know,,0 (never),1 (almost never),4 (always),4 (always),0 (never),0 (never),0 (never),0 (never),2 (sometimes),"Bash, SQL",ROS,Open source,Proprietary,4 (always),3 (very often),1 (almost never),4 (always),3 (very often),3 (very often),3 (very often),Don't know,,"Lack of trust, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Both equally,We rely on the experience and skills of our team,,2 (sometimes),3 (very often),4 (always),4 (always),Don't know,Don't know,,"Simulation, Runtime monitoring",Debugging based on experience,"Non-technical end-user, Technically skilled end-user, Integrator",0 (never),0 (never),0 (never),4 (always),Don't know,,0 (strongly disagree),3 (agree),2 (neutral),3 (agree),2 (neutral),3 (agree),4 (strongly agree),4 (strongly agree),3 (agree),3 (agree),2 (neutral),Don't know,,Software reuse & Lack of Standards -> Starting to apply code standards. Validating the robotic system & Robustness -> More through testing by an independent team. Safety certification -> Dedicated employees. Dynamic adaptation of robotic behaviour -> Extra sensors and new sensor fusion algorithms. Transition from simulation to real world applications -> Improvement of the simulator to make it look more real-world-like.,,"The main difference is that it is very hands on. Any small change in code can be seen easily in the behaviour of the robot. On top of that, the work is done really close to the hardware that constitutes the robots. Therefore, an understanding of how the changes in the code affect the hardware is needed. Also, most of the time drivers need to be integrated or created to be able to use new hardware on the robots. Therefore the robotics engineers benefit a lot from their competences in electronics and mechanics.",,Industrial practitioner: Programmer,4,Male,+50
12/06/2019 12:12:09,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities)","Factory automation, Agriculture, Cleaning, Transportation, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),3 (very often),2 (sometimes),4 (always),1 (almost never),3 (very often),3 (very often),3 (very often),Don't know,,"Excell, Kanban in-house tool","Excell, draw.io ",UML,Google Atom,,Gazebo,rosbag,Google Atom + Git,4 (always),0 (never),4 (always),0 (never),0 (never),Don't know,,3 (very often),Don't know,2 (sometimes),Don't know,,Don't know,2 (sometimes),4 (always),4 (always),2 (sometimes),Don't know,Don't know,Don't know,Don't know,,ROS,Open source,"Proprietary, Open source",4 (always),3 (very often),Don't know,3 (very often),3 (very often),3 (very often),Don't know,Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,0 (never),0 (never),0 (never),2 (sometimes),Don't know,Don't know,,"Simulation, Runtime monitoring",logging and debugging tools,"Developer, Non-technical end-user",3 (very often),0 (never),0 (never),0 (never),Don't know,,2 (neutral),3 (agree),3 (agree),2 (neutral),3 (agree),3 (agree),3 (agree),3 (agree),4 (strongly agree),3 (agree),Don't know,Don't know,,Software reuse: Making the systems as modular as possible;  Lack of documentation: try to document more. Otherwise spending time to understand how it works; Interoperability among heterogeneous components: try to standarize interfaces between them and knowing what every component does; Safety certification: by using certified devices/sensors. Robustness:  using standarized inspection points and testing the whole system as much as possible;,,"Robotics software engineering has to deal with SW, HW and the environment. It makes the software much more difficult to debug, deploy and improve.","Probably they will have to be specialized in some ways. Maybe it should be different categories inside robotics software, since software engineering can be applied in different levels with different challenges. It's not the same dealing with hardware than with localization/navigation algorithms than developing a graphical user interface for the application. They are different but in the end it will be necessary for the whole application.",Industrial practitioner: Leading Technical Role,13,Male,31-50
12/06/2019 15:38:44,"Mobile robots (i.e., ground robots with navigation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms, Parallel manipulators",Factory automation,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",3 (very often),3 (very often),3 (very often),4 (always),1 (almost never),3 (very often),4 (always),3 (very often),Don't know,,Trello,+,"Slides, fusion 360 , urdf","Atom, git",-,Gazebo,Ros*,-,4 (always),0 (never),4 (always),0 (never),Don't know,Don't know,,Don't know,Don't know,Don't know,Don't know,,0 (never),1 (almost never),4 (always),2 (sometimes),0 (never),0 (never),0 (never),0 (never),2 (sometimes),SciLab,ROS,Open source,Depending on the project/customer agreements,2 (sometimes),2 (sometimes),2 (sometimes),2 (sometimes),3 (very often),0 (never),0 (never),Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,1 (almost never),4 (always),1 (almost never),3 (very often),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Testing and debugging,"Non-technical end-user, Technically skilled end-user",0 (never),Don't know,Don't know,Don't know,0 (never),Gui,4 (strongly agree),2 (neutral),3 (agree),3 (agree),3 (agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),3 (agree),2 (neutral),2 (neutral),Don't know,,Develop own components,-,Testing and safety,?,Industrial practitioner: Leading Technical Role,14,Male,1-10
12/06/2019 19:27:01,"Mobile robots (i.e., ground robots with navigation capabilities)",Transportation,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation)",4 (always),4 (always),4 (always),4 (always),0 (never),2 (sometimes),4 (always),2 (sometimes),Don't know,,"Jira, Excel","Word, Excel","Visio, UML, PowerPoint presentations","CodeSys, Siemens TIA portal, Visual Studio",,in-house and within IDE ,CodeSys and Siemens TIA IDEs,CodeSys and Siemens TIA IDEs,1 (almost never),4 (always),0 (never),2 (sometimes),4 (always),Don't know,,3 (very often),4 (always),0 (never),Don't know,,0 (never),0 (never),0 (never),2 (sometimes),3 (very often),3 (very often),0 (never),0 (never),4 (always),"Languages for PLC's like; structured text (C like), Function blocks  ","ROS, Used ROS for Graduation Assignment, we don't use frameworks for my work. ",Proprietary,Proprietary,1 (almost never),1 (almost never),Don't know,2 (sometimes),2 (sometimes),3 (very often),3 (very often),Don't know,,"Lack of documentation, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Copy-paste-modify,We rely on the experience and skills of our team,,4 (always),2 (sometimes),3 (very often),1 (almost never),Don't know,Don't know,,"Manual specification based on experience, Runtime monitoring",Manually debugging and make use the data from logfiles if possible.,"Technically skilled end-user, Integrator",0 (never),0 (never),4 (always),0 (never),0 (never),,1 (disagree),4 (strongly agree),3 (agree),4 (strongly agree),2 (neutral),2 (neutral),1 (disagree),0 (strongly disagree),0 (strongly disagree),4 (strongly agree),0 (strongly disagree),Don't know,,"The missions are in consultation with the technical skilled customer so is not a big challenge on the technical part.
Software reuse, lack of documentation, and lack of standards are mainly caused by the same problem, the few developers we have don't form one good team. Every time every developer wants to rethink the wheel on it's own way. There is little guidance from a lead, or management. 
Interoperability is usally outsourced to the overlaying systems (transport control).
Transition from simulation to real world involves just a lot of testing, so its a challenge that just takes a lot of time.  
I marked AI as no problem as it is currently not used at all. We do want to experience the possibilties in the future. ","We develop big bulky industrial agv's that transport shipping containers (yes that big,  upto 18 meters long and 120 metric tons). 
For the industrial and safety reasons we use PLCs for the controllers. One of our challenges is the transition to only PLCs to an combination of embedded and PLC. Because the new possibilities AI and more advanced sensors give us we need embedded computers. 

Currently the vehicles navigate with transponders from point A to point B and are not really dynamic. They are cerftified to drive within normal traffic, but they cannot replan their path or aviod obstacles. 
The goal is to make the industrial agv's more dynamic. Lets say more 'autonomous' instead of 'automatic'. ","As a robotics software engineer we work a lot with hardware, and that makes for a lot more difficulties you have to deal with. Electrical, Mechanical, Communication protocols. But on the other hand, we make things move, we bring pieces of metal to life. A lot more exciting then a web developer ;p
I also think it involves more math to build drive controllers and navigation planners. ","To main thing I wish that would change is the conservative opinion our industrial industry has. they want to rely on (old) proven technology, which makes it hard to innovate. Mainly in things like AI and embedded. Completly different way of programming than a PLC. It's a slow process, but we will come there.",Industrial practitioner: Programmer,2,Male,+50
12/06/2019 19:33:53,"Mobile robots (i.e., ground robots with navigation capabilities)",Cleaning,"Complete robotic system (e.g., BOSCH's lawnmower)",2 (sometimes),1 (almost never),3 (very often),4 (always),1 (almost never),4 (always),2 (sometimes),3 (very often),Don't know,,"Gitlab, Mantis",Google Docs,Google Docs,"Eclipse, Vim",,Gazebo,"Rosbag, in house recording tools","Eclipse, Vim",3 (very often),1 (almost never),Don't know,Don't know,Don't know,Don't know,,0 (never),0 (never),4 (always),0 (never),,0 (never),2 (sometimes),4 (always),2 (sometimes),0 (never),0 (never),0 (never),0 (never),3 (very often),Bash,ROS,"Proprietary, Open source",Proprietary,4 (always),2 (sometimes),Don't know,2 (sometimes),3 (very often),3 (very often),Don't know,Don't know,,"Lack of trust, Licensing issues, Internal policies, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,2 (sometimes),2 (sometimes),0 (never),3 (very often),0 (never),0 (never),,"Simulation, Runtime monitoring",Manual debugging,Developer,3 (very often),0 (never),0 (never),0 (never),Don't know,,3 (agree),3 (agree),4 (strongly agree),3 (agree),2 (neutral),3 (agree),2 (neutral),3 (agree),4 (strongly agree),3 (agree),Don't know,Don't know,,Many of the biggest challenges are dealing with poorly documented or old legacy code. We have been working to standardize and improve this lately,,"Robotics has to work in physical systems unlike most other software. This provides a variety of challenges, and means things like safety and reliability become much more important.","I don't think that there really are any practices that are generally applied across robotics, so it is hard to say what should change.",Industrial practitioner: Programmer,3,Male,31-50
12/06/2019 19:40:43,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Medical, General research on service robots","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",0 (never),0 (never),2 (sometimes),4 (always),0 (never),3 (very often),3 (very often),3 (very often),Don't know,,,,,"Sublime, VS Code, VI, emacs",,"Gazebo, Box2D, Unity, Bullet","roslaunch, rosbag",git/github,3 (very often),2 (sometimes),0 (never),0 (never),0 (never),Don't know,,0 (never),0 (never),0 (never),Don't know,,1 (almost never),1 (almost never),2 (sometimes),3 (very often),0 (never),1 (almost never),0 (never),0 (never),Don't know,,"ROS, ROS 2.0","Proprietary, Open source",Open source,3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),1 (almost never),Don't know,,"Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,1 (almost never),0 (never),4 (always),0 (never),0 (never),Don't know,,"Simulation, Runtime monitoring",Often runtime monitoring,"Developer, Researcher",3 (very often),0 (never),0 (never),0 (never),Don't know,,0 (strongly disagree),3 (agree),2 (neutral),2 (neutral),2 (neutral),3 (agree),3 (agree),4 (strongly agree),4 (strongly agree),3 (agree),Don't know,Don't know,,The majority of the problems arise because we are researchers and do not have large teams to work on projects / focus on good software practices.,,"A large challenge comes from the large number of problems you need to solve as an engineering team (drivers, firmware, planning, perception, AI, etc...) and the diversity of experience in those different areas.","Yes, but I think they are likely still at an infancy so hopefully some aspects will evolve naturally. Standardization and safety certificates would improve confidence in entire systems.",Academic/Scientist,7,Male,1-10
12/06/2019 20:05:54,"Humanoid robots (i.e., a robot with its body shape built to resemble the human body)",General research on service robots,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation)",1 (almost never),2 (sometimes),3 (very often),4 (always),1 (almost never),3 (very often),2 (sometimes),4 (always),Don't know,,text file,text file,Markdown/Wiki,vim,rso message generator,in-house,linux,vim,3 (very often),3 (very often),2 (sometimes),3 (very often),3 (very often),Don't know,,0 (never),0 (never),4 (always),Don't know,,0 (never),1 (almost never),4 (always),2 (sometimes),0 (never),1 (almost never),0 (never),1 (almost never),0 (never),,"ROS, In-House",Open source,"Proprietary, Open source",3 (very often),1 (almost never),0 (never),3 (very often),1 (almost never),0 (never),0 (never),Don't know,,"Lack of documentation, Lack of trust, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), For Knowledge accumulation.","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,2 (sometimes),1 (almost never),1 (almost never),1 (almost never),0 (never),Don't know,,"Manual specification based on experience, Simulation","Gdb, Valgrind","Developer, Technically skilled end-user",4 (always),Don't know,Don't know,Don't know,Don't know,,4 (strongly agree),3 (agree),2 (neutral),2 (neutral),0 (strongly disagree),0 (strongly disagree),1 (disagree),2 (neutral),4 (strongly agree),2 (neutral),2 (neutral),Don't know,,Educating developers,,Faster iterations in software,Reusability of Code and Usages of Frameworks has to be increased,Industrial practitioner: Programmer,5,Male,1-10
12/06/2019 21:13:37,"Mobile robots (i.e., ground robots with navigation capabilities)",Transportation,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),4 (always),4 (always),4 (always),Don't know,4 (always),4 (always),4 (always),Don't know,,Jira,Polarion,Enterprise Architect,"CLion, Visual Studio Code, Eclipse, PyCharm, etc.",,"Gazebo, in house tool",ROS,,4 (always),Don't know,4 (always),2 (sometimes),Don't know,Don't know,,0 (never),0 (never),4 (always),Don't know,,Don't know,Don't know,4 (always),3 (very often),Don't know,Don't know,Don't know,Don't know,Don't know,,ROS,"Proprietary, Open source",Proprietary,3 (very often),1 (almost never),Don't know,4 (always),4 (always),3 (very often),3 (very often),Don't know,,"Licensing issues, Internal policies, Favouring self-developed solutions","Systematic reuse (e.g., frameworks, components, libraries, ...)","We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,4 (always),4 (always),3 (very often),4 (always),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Debugging,Non-technical end-user,Don't know,Don't know,Don't know,Don't know,Don't know,,1 (disagree),3 (agree),2 (neutral),2 (neutral),2 (neutral),4 (strongly agree),4 (strongly agree),4 (strongly agree),1 (disagree),3 (agree),3 (agree),Don't know,,Safety certification and validation are definitely open topics that we don't have a good approach for yet. ,,"Robots have to work in the real world amongst people, people are super unpredictable and dealing with that is the biggest challenge. ",,Industrial practitioner: Leading Technical Role,4,Male,+50
12/06/2019 21:18:55,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities)",Mining,"Complete robotic system (e.g., BOSCH's lawnmower)",2 (sometimes),1 (almost never),2 (sometimes),4 (always),0 (never),4 (always),4 (always),0 (never),Don't know,,I do not know,I do not know,"PowerPoint, Draw.io","QT-Creator, Sublime","Python, C++",Gazebo,"roslaunch, rosbag",Nothing,3 (very often),0 (never),Don't know,3 (very often),0 (never),Don't know,,0 (never),3 (very often),1 (almost never),4 (always),Almost always there is no clear SE process,Don't know,Don't know,4 (always),4 (always),Don't know,Don't know,Don't know,2 (sometimes),Don't know,,ROS,Open source,Don't know,3 (very often),3 (very often),2 (sometimes),3 (very often),4 (always),0 (never),0 (never),Don't know,,,Copy-paste-modify,"We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,0 (never),0 (never),Don't know,1 (almost never),0 (never),Don't know,,"Simulation, Runtime monitoring","Classical debugging: Testing and search, via logs and ""prints"" the cause of th eproblem",Don't know,Don't know,Don't know,Don't know,2 (sometimes),Don't know,,3 (agree),3 (agree),4 (strongly agree),2 (neutral),2 (neutral),3 (agree),3 (agree),2 (neutral),4 (strongly agree),4 (strongly agree),2 (neutral),Don't know,,"I do not know, I am new in the team","From what I am seeing, the biggest challenge is introducing some software engineering techniques to a group of hard-coded developers","In my team, the are no RSE that comes with a background of SE, they come from Electrical Engineering or Mechanical Engineering. They do not know SE techniques and most of the team doe not believe the importance of SE","Yes, at least we need some kind of SE and to make teams understand the importance of SE techniques",Academic/Scientist,5,Male,1-10
12/06/2019 21:21:58,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Industrial arms","Factory automation, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation)",4 (always),3 (very often),2 (sometimes),3 (very often),0 (never),4 (always),3 (very often),2 (sometimes),Don't know,,Excel,"Word, Excel",xfig,"GCC, ROS, OROCOS, RTAI, Linux",None,"Gazebo, Rviz","ROS, roslaunch, OROCOS",in-house git server,4 (always),3 (very often),3 (very often),1 (almost never),1 (almost never),Don't know,,3 (very often),0 (never),3 (very often),Don't know,,2 (sometimes),3 (very often),4 (always),2 (sometimes),0 (never),3 (very often),0 (never),0 (never),Don't know,,"ROS, ROS 2.0, OROCOS","Proprietary, Open source",Open source,4 (always),2 (sometimes),3 (very often),4 (always),3 (very often),2 (sometimes),1 (almost never),Don't know,,"Lack of documentation, Lack of trust, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We follow a precise architecture of the system",,0 (never),4 (always),3 (very often),2 (sometimes),0 (never),Don't know,,"Manual specification based on experience, Simulation",debugging using synthetic data,"Developer, Technically skilled end-user",2 (sometimes),0 (never),2 (sometimes),0 (never),Don't know,,0 (strongly disagree),1 (disagree),3 (agree),3 (agree),3 (agree),3 (agree),1 (disagree),3 (agree),3 (agree),3 (agree),2 (neutral),Don't know,,-,The biggest challenges are related to dealing with uncertain and to make models and simulation to match the real world robots.,Robots should deal with real world,"Yes, speciallh in low leve control. There should be a control systems theory approach and not a software engineering approach.",Academic/Scientist,31,Male,+50
12/06/2019 22:02:45,"Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","General research on service robots, Education","Low-level functionalities (e.g., navigation, self-localisation), Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),4 (always),4 (always),4 (always),3 (very often),3 (very often),3 (very often),3 (very often),Don't know,,Excel,Word and Excel,"Paint 3D, Adobe 3D",Visual Studio,Acceleo,Our own mini prototypes,Educational Groups from various ages,Visual Studio,1 (almost never),2 (sometimes),2 (sometimes),1 (almost never),2 (sometimes),Don't know,,2 (sometimes),2 (sometimes),2 (sometimes),Don't know,,2 (sometimes),3 (very often),4 (always),3 (very often),2 (sometimes),2 (sometimes),2 (sometimes),2 (sometimes),Don't know,,"ROS, ROS 2.0, SmartSoft","Proprietary, Open source, We're also writing our own codes",Open source,3 (very often),2 (sometimes),2 (sometimes),3 (very often),2 (sometimes),2 (sometimes),3 (very often),Don't know,,Licensing issues,Both equally,We rely on the experience and skills of our team,,4 (always),3 (very often),4 (always),4 (always),3 (very often),Don't know,,Manual specification based on experience,-,"Developer, Non-technical end-user, Technically skilled end-user, Integrator",2 (sometimes),2 (sometimes),2 (sometimes),2 (sometimes),Don't know,,3 (agree),3 (agree),3 (agree),2 (neutral),2 (neutral),3 (agree),3 (agree),2 (neutral),3 (agree),3 (agree),3 (agree),Don't know,,Making experiments for every unit before starting robot fully functional. ,,Robotic Engineering requires design information and needs imagination. They creates şişme kind of art pieces.,,Academic/Scientist,3 years ,Female,1-10
12/06/2019 22:42:05,"Mobile robots (i.e., ground robots with navigation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms",Factory automation,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",3 (very often),2 (sometimes),3 (very often),4 (always),1 (almost never),3 (very often),3 (very often),3 (very often),Don't know,,"jira, gitlab","jira,word","whiteboard, drawIO, Enterprise Architect","VSCode, Atom, CLion, Vim, etc...",in-house,"pytest, catch, gtest, in-house","rosbag, jupyter, in-house",same as implementation,3 (very often),2 (sometimes),4 (always),1 (almost never),Don't know,3 (very often),distributed,0 (never),1 (almost never),3 (very often),Don't know,,1 (almost never),2 (sometimes),3 (very often),3 (very often),0 (never),0 (never),1 (almost never),2 (sometimes),3 (very often),"JavaScript, Go","ROS, links-and-nodes, in-house","Proprietary, Open source","Proprietary, Open source",3 (very often),2 (sometimes),Don't know,4 (always),3 (very often),2 (sometimes),2 (sometimes),Don't know,,"Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,3 (very often),3 (very often),2 (sometimes),3 (very often),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring","logging, tracing, debugging, experience",done by partners,Don't know,Don't know,Don't know,Don't know,Don't know,,Don't know,3 (agree),2 (neutral),2 (neutral),3 (agree),3 (agree),Don't know,3 (agree),Don't know,Don't know,2 (neutral),Don't know,,"reuse and interoperabililty: iteration on architecture and interfaces, validation and robustness: testing and tracing",Very heterogeneous and distributed systems that need to interface with real-time capable proprietary industrial things using different paradigms... ,more heterogeneous and less predictable/testable due to interactions with the real world,,Industrial practitioner: Leading Technical Role,8,Male,11-30
12/06/2019 23:29:48,"Mobile robots (i.e., ground robots with navigation capabilities)","Agriculture, Cleaning, Defense, Mining, Security, Haulage","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",4 (always),3 (very often),4 (always),4 (always),3 (very often),3 (very often),4 (always),4 (always),Don't know,,"SAP ByDesign, JIRA, Asana","Excel, DOORS, TestLink","PlantUML, Markdown, Confluence, Visio","Visual Studio, CLion, Visual Studio Code",Matlab,"JUnit, Gazebo, in-house tools, gtest","rosbag, in-house tool, live vehicle testing","Visual Studio, CLion, Visual Studio Code",3 (very often),2 (sometimes),3 (very often),1 (almost never),2 (sometimes),Don't know,,1 (almost never),3 (very often),3 (very often),Don't know,,0 (never),2 (sometimes),4 (always),2 (sometimes),3 (very often),3 (very often),0 (never),0 (never),4 (always),"C#, used for Command & Control application","ROS, ROS 2.0","Proprietary, Open source",Proprietary,3 (very often),3 (very often),3 (very often),4 (always),4 (always),3 (very often),2 (sometimes),Don't know,,"Lack of documentation, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,4 (always),3 (very often),2 (sometimes),3 (very often),1 (almost never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",By capturing and analyzing logged data from simulation or real life scenarios.,"Non-technical end-user, Technically skilled end-user",4 (always),Don't know,Don't know,Don't know,Don't know,,2 (neutral),3 (agree),2 (neutral),4 (strongly agree),3 (agree),4 (strongly agree),4 (strongly agree),3 (agree),2 (neutral),3 (agree),2 (neutral),Don't know,,"Software reuse - we have teams dedicated to building and maintaining common components to encourage reuse for different applications.
Lack of standards - we look to ASPICE and other industry best practices (ISO 9000) to help guide our activities and software development.
Validation - this is hard, especially when the target robot/vehicle is too large to test on. We have to rely on simulation and ask the end user to do testing for us. Live robot testing on site is also a very common practice.
Safety Certification - we are training staff on standards (ISO 13849, IEC 61508/62061, etc) and working with vendors to do our best to address Functional Safety, by building Safety Functions. We work with customers to add Administrative measures to mitigate risk.",,"The systems we develop are incredibly complex and involve multiple disciplines and technologies, while doing work in the real world. This means there are dozens of integration points and world interactions that have to be designed, engineered and tested.",I think there should be more Standards organizations helping to create best practices standards that engineers can adhere to. I also think the tooling around all parts of the engineering process need to get better and support the multi-disciplinary nature of robotics better.,Industrial practitioner: Leading Technical Role,10,Male,+50
13/06/2019 01:20:39,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities)",Defense,"Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),2 (sometimes),3 (very often),3 (very often),0 (never),3 (very often),2 (sometimes),1 (almost never),Don't know,,"Jira, Confluence, OneNote","Jira, Confluence, Word","Confluence, a white board","Qt, Atom, VS Code, gedit, ROS",N/A,Gazebo,"ROS, lab space","Qt, VS Code, gedit, ROS, atom",3 (very often),1 (almost never),Don't know,Don't know,0 (never),Don't know,,3 (very often),3 (very often),3 (very often),Don't know,,0 (never),1 (almost never),3 (very often),3 (very often),0 (never),0 (never),0 (never),0 (never),2 (sometimes),LabVIEW,ROS,"Proprietary, Open source",Public Domain,2 (sometimes),3 (very often),1 (almost never),2 (sometimes),Don't know,2 (sometimes),1 (almost never),Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Internal policies",Both equally,"We rely on the experience and skills of our team, We follow a precise architecture of the system",,1 (almost never),2 (sometimes),1 (almost never),3 (very often),2 (sometimes),Don't know,Exploring various,"Simulation, real world experiments",Code review,"Developer, Non-technical end-user",4 (always),0 (never),0 (never),0 (never),Don't know,,2 (neutral),2 (neutral),1 (disagree),2 (neutral),3 (agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),3 (agree),2 (neutral),Don't know,,R&D,Developing for unique/challenging real world applications,More physics involved in design,"Not sure, since it is very application and organization dependent. Some things work better for different groups.",Government scientist,5,Male,+50
13/06/2019 08:10:26,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Factory automation, Medical, General research on service robots","Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",3 (very often),2 (sometimes),2 (sometimes),4 (always),4 (always),4 (always),4 (always),4 (always),Don't know,,"Taiga, Trello",Word,"PowerPoint, LucidChart","Pycharm, Eclipse, Visual Studio Code",catkin,"Gazebo, RVIZ","rosbag, roslaunch","Pycharm, Eclipse, Visual Studio Code",4 (always),2 (sometimes),3 (very often),3 (very often),Don't know,Don't know,,1 (almost never),1 (almost never),4 (always),Don't know,,0 (never),0 (never),3 (very often),4 (always),2 (sometimes),1 (almost never),0 (never),0 (never),Don't know,,ROS,Open source,Don't know,3 (very often),2 (sometimes),2 (sometimes),3 (very often),2 (sometimes),1 (almost never),1 (almost never),Don't know,,"Lack of documentation, Lack of trust, Internal policies, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Both equally,"We rely on the experience and skills of our team, We follow a precise architecture of the system",,2 (sometimes),2 (sometimes),2 (sometimes),1 (almost never),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring","Extensive testing in real life or simulation, code review",Don't know,3 (very often),1 (almost never),0 (never),0 (never),Don't know,,3 (agree),3 (agree),2 (neutral),2 (neutral),2 (neutral),4 (strongly agree),4 (strongly agree),4 (strongly agree),3 (agree),3 (agree),1 (disagree),Don't know,,Mostly involving experts who have experience regarding that specific challenge,,Far more difficult and expensive to test and debug.,,Academic/Scientist,3,Male,11-30
13/06/2019 09:02:45,Industrial arms,Factory automation,"Complete robotic system (e.g., BOSCH's lawnmower)",Don't know,Don't know,2 (sometimes),3 (very often),4 (always),4 (always),4 (always),2 (sometimes),Don't know,,,,,,,,,,4 (always),Don't know,Don't know,Don't know,Don't know,Don't know,,Don't know,Don't know,Don't know,Don't know,,0 (never),0 (never),2 (sometimes),4 (always),Don't know,4 (always),Don't know,Don't know,Don't know,,OROCOS,Don't know,Proprietary,2 (sometimes),Don't know,Don't know,3 (very often),3 (very often),3 (very often),Don't know,Don't know,,,"Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,4 (always),4 (always),4 (always),Don't know,Don't know,Don't know,,"Simulation, Runtime monitoring",Don't know,Non-technical end-user,Don't know,Don't know,Don't know,Don't know,Don't know,,2 (neutral),3 (agree),4 (strongly agree),4 (strongly agree),Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,,#,,#,,Academic/Scientist,5,Male,+50
13/06/2019 09:03:37,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Industrial arms","Factory automation, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",2 (sometimes),2 (sometimes),3 (very often),3 (very often),1 (almost never),2 (sometimes),3 (very often),3 (very often),Don't know,,"OneNote, Excel, MS Project",Excel,"OneNote, PowerPoint","Eclipse, Visual Studio, Code",xacro,"gtest, gazebo","rosbag, roslaunch","Eclipse, Visual Studio, gitlab",3 (very often),0 (never),0 (never),0 (never),0 (never),Don't know,,3 (very often),2 (sometimes),3 (very often),Don't know,,3 (very often),1 (almost never),3 (very often),2 (sometimes),0 (never),3 (very often),0 (never),0 (never),Don't know,,"ROS, ROS 2.0, OROCOS","Proprietary, Open source",Proprietary,3 (very often),3 (very often),2 (sometimes),3 (very often),3 (very often),3 (very often),2 (sometimes),Don't know,,"Licensing issues, Internal policies, Favouring self-developed solutions","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,2 (sometimes),3 (very often),3 (very often),1 (almost never),0 (never),Don't know,,"Simulation, Runtime monitoring","Engineers experience, debugging, inspection of log files along with code.","Developer, Non-technical end-user, Technically skilled end-user, Integrator",0 (never),0 (never),0 (never),0 (never),4 (always),Natural language documents,2 (neutral),3 (agree),3 (agree),3 (agree),3 (agree),1 (disagree),2 (neutral),3 (agree),2 (neutral),1 (disagree),1 (disagree),Don't know,,"Software reuse: Gitlab repo with documentation, Robustness: extensive testing.","Ambiguity between hardware / controller failure and software issues often hard to diagnose. Intermittent failures of hardware / electronics often lead to ""not my fault""-claims ""works for me"". Lack of motivation to extensively test hardware by hardware/control engineers leads to extensive periods of testing during times planned for software development and integration since only then problems show up. In multi-party projects partners assume integration takes zero time and deliver hardware very late in project, hardware problems then show up and delay the project / make it a fail, lack of decoupling of hardware and software development is often a problem. Ideally, software would be proven in simulation before hardware is delivered.",Robotics software engineer needs to include controller and hardware in his considerations when things fail. The target system is often not yet available during software development.,"Decoupling of modular components is a good approach albeit not yet always followed, extensive simulation or testing on real data such as bag files helps. Monoliths shall die.",Industrial practitioner: Leading Technical Role,16,Male,+50
13/06/2019 10:29:26,"Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)",Logistics,"Complete robotic system (e.g., BOSCH's lawnmower)",3 (very often),4 (always),2 (sometimes),4 (always),1 (almost never),3 (very often),3 (very often),2 (sometimes),Don't know,,Jira,"Confluence, Excel, Powerpoint","Powerpoint, Confluence, draw.io","neoVim, PyCharm, CLion, VSCode","(tensorflow), (keras)","Gazebo, Stage",Testarea + in-house tool,,3 (very often),2 (sometimes),3 (very often),2 (sometimes),Don't know,Don't know,,0 (never),0 (never),4 (always),Don't know,,0 (never),2 (sometimes),2 (sometimes),3 (very often),Don't know,Don't know,0 (never),0 (never),Don't know,,ROS,"Proprietary, Open source","Proprietary, Open source",2 (sometimes),2 (sometimes),Don't know,2 (sometimes),Don't know,Don't know,3 (very often),Don't know,,"Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,2 (sometimes),4 (always),3 (very often),2 (sometimes),0 (never),Don't know,,"Manual specification based on experience, real world experiments","investigating log data, experimentation",Developer,3 (very often),Don't know,Don't know,Don't know,3 (very often),behaviour trees,2 (neutral),4 (strongly agree),4 (strongly agree),2 (neutral),3 (agree),4 (strongly agree),3 (agree),3 (agree),1 (disagree),1 (disagree),3 (agree),Don't know,,"We try to constantly improve our work and ourselves (e.g. write more and better tests, reuse more of our software, delete unused software components,...). There is no clear solution: If we would have one, it wouldn't be a challenge.",,Additional sources of errors from hardware and incomplete definiton of the environment,,"Industrial practitioner: Data Scientist, Developer",3,Male,+50
13/06/2019 10:31:10,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Factory automation, Transportation, Logistics E-commerce","Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),2 (sometimes),2 (sometimes),4 (always),2 (sometimes),3 (very often),4 (always),4 (always),Don't know,,"Jira, Excel",Confluence Jira,"UML, Confluence","Sublime, Pycharm, neovim",in-house tool,"Gazebo,  in-house tool","rosbag, roslaunch, in-house tool,  system-d","in-house tool, jenkins",4 (always),4 (always),4 (always),4 (always),2 (sometimes),Don't know,,3 (very often),3 (very often),3 (very often),Don't know,,0 (never),1 (almost never),3 (very often),4 (always),1 (almost never),0 (never),2 (sometimes),0 (never),Don't know,,ROS,Open source,Proprietary,4 (always),4 (always),4 (always),4 (always),4 (always),4 (always),4 (always),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,3 (very often),2 (sometimes),3 (very often),4 (always),Don't know,Don't know,,"Simulation, Runtime monitoring",Debugging,"Developer, Integrator",4 (always),Don't know,Don't know,Don't know,Don't know,,1 (disagree),3 (agree),2 (neutral),2 (neutral),4 (strongly agree),3 (agree),2 (neutral),4 (strongly agree),4 (strongly agree),2 (neutral),1 (disagree),Don't know,,"Develop, try and error",,they have to deal with a physical world,,Industrial practitioner: Programmer,,Male,+50
13/06/2019 10:44:28,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities)","Factory automation, Transportation","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",3 (very often),2 (sometimes),2 (sometimes),4 (always),1 (almost never),2 (sometimes),3 (very often),3 (very often),Don't know,,Jira,Confluence,,"developer choice - mostly vscode, vim, JetBrains tools...","ROS message generation, Protobuf","pytest, GTest","ROS tools, in-house monitoring tools","git, Debian packages",3 (very often),3 (very often),3 (very often),1 (almost never),Don't know,Don't know,,2 (sometimes),Don't know,3 (very often),Don't know,,Don't know,2 (sometimes),3 (very often),3 (very often),Don't know,Don't know,Don't know,2 (sometimes),2 (sometimes),TypeScript,ROS,"Proprietary, Open source","Proprietary, Open source",3 (very often),3 (very often),2 (sometimes),3 (very often),3 (very often),2 (sometimes),1 (almost never),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), lack of custom features","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,3 (very often),4 (always),2 (sometimes),3 (very often),1 (almost never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring","logging, data analysis, debugging with recorded data","Technically skilled end-user, Integrator",2 (sometimes),Don't know,Don't know,Don't know,4 (always),ERP system customer,2 (neutral),1 (disagree),2 (neutral),2 (neutral),3 (agree),4 (strongly agree),Don't know,4 (strongly agree),4 (strongly agree),4 (strongly agree),2 (neutral),Don't know,,"a lot of testing in realistic environments, learning",,"Besides normal software challenges the machine you deploy to is interacting with the real world, and thus a lot of random stuff can happen",,Industrial practitioner: Programmer,4,Male,+50
13/06/2019 11:22:44,"Mobile robots (i.e., ground robots with navigation capabilities), Drones",Factory automation,"Complete robotic system (e.g., BOSCH's lawnmower)",2 (sometimes),2 (sometimes),2 (sometimes),3 (very often),0 (never),1 (almost never),3 (very often),3 (very often),0 (never),,Jira,Word,UML/Powerpoint/Google Diagrams,"Console-based editors for scripting/low-level code, Geany. No full IDE",None,--,rosbag/rviz,,3 (very often),2 (sometimes),4 (always),2 (sometimes),0 (never),0 (never),,1 (almost never),3 (very often),4 (always),0 (never),,Don't know,3 (very often),3 (very often),2 (sometimes),2 (sometimes),0 (never),0 (never),0 (never),Don't know,,ROS,Open source,Proprietary,3 (very often),3 (very often),3 (very often),2 (sometimes),2 (sometimes),1 (almost never),1 (almost never),0 (never),,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Both equally,Other (please specify below),"I am the only one working on robotics projects, so I rely on myself",0 (never),1 (almost never),2 (sometimes),1 (almost never),0 (never),0 (never),,Runtime monitoring,By narrowing it down - Experiment -> Failure -> Experiment with different conditions -> Identify problematic conditions -> Identify problematic parts of the system -> Test specific part to track problem -> Solve it. If all else fails a good dose of intuition and code review.,Developer/Project Manager (myself),4 (always),0 (never),0 (never),0 (never),0 (never),,2 (neutral),2 (neutral),3 (agree),3 (agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),2 (neutral),3 (agree),0 (strongly disagree),,-,,"Robotics Software Engineering is still for the most part R&D. In other domains software engineering is a classic production problem where technical solutions and know-how exist and are mature, and just have to be applied.",,Industrial practitioner: Leading Technical Role,2,Male,+50
13/06/2019 14:51:41,"Mobile robots (i.e., ground robots with navigation capabilities)",Transportation,"Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),4 (always),3 (very often),4 (always),4 (always),4 (always),3 (very often),4 (always),Don't know,,"Jira, Google Sheets, Google Docs, Google Slides",Google Sheets,"Google Docs, Google Slides, LucidChart","CLion, Pluma",Several Python-based in-house tools,In-house tools,In-house tools,"CLion, Pluma",3 (very often),2 (sometimes),3 (very often),2 (sometimes),Don't know,Don't know,,0 (never),0 (never),4 (always),Don't know,,1 (almost never),2 (sometimes),4 (always),3 (very often),0 (never),0 (never),4 (always),0 (never),Don't know,,In-house developed framework,"Proprietary, Open source",Proprietary,4 (always),4 (always),Don't know,4 (always),4 (always),4 (always),4 (always),Don't know,,"Lack of trust, Licensing issues, Internal policies, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,4 (always),4 (always),2 (sometimes),4 (always),Don't know,4 (always),"Address sanitizer, UB Sanitizer, thread sanitizer tests","Manual specification based on experience, Simulation, Runtime monitoring","Unit tests, simulation, review of logged data",Non-technical end-user,1 (almost never),0 (never),0 (never),4 (always),Don't know,,0 (strongly disagree),3 (agree),3 (agree),2 (neutral),2 (neutral),4 (strongly agree),4 (strongly agree),4 (strongly agree),Don't know,3 (agree),3 (agree),4 (strongly agree),Maintenance of large codebase,Proprietary,,"Much of SWE practice in 2019 is developed around web development, which has entirely different goals and requirements for safety, performance, and error recovery.",,Industrial practitioner: Programmer,6,Male,+50
13/06/2019 18:24:08,"Mobile robots (i.e., ground robots with navigation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Medical, hotel services","Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),Don't know,Don't know,4 (always),1 (almost never),4 (always),4 (always),4 (always),Don't know,,"Trello, github",,,"ROS, python, node, kubernetes (The IDEs are varied)",,"Gazebo, custom","ROS, custom","git, github, varied IDEs, and lots of communication between the OPS and APPS teams",4 (always),2 (sometimes),4 (always),Don't know,1 (almost never),Don't know,,Don't know,Don't know,4 (always),Don't know,,Don't know,Don't know,4 (always),4 (always),Don't know,Don't know,4 (always),4 (always),4 (always),node,ROS,Open source,Open source,3 (very often),2 (sometimes),3 (very often),2 (sometimes),2 (sometimes),2 (sometimes),Don't know,Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,2 (sometimes),2 (sometimes),4 (always),4 (always),Don't know,Don't know,,"Manual specification based on experience, Simulation",bagfile and/or log analysis of failures reported by observation or monitoring,"Developer, Non-technical end-user, Technically skilled end-user",Don't know,Don't know,Don't know,4 (always),Don't know,,0 (strongly disagree),1 (disagree),Don't know,2 (neutral),Don't know,Don't know,3 (agree),4 (strongly agree),3 (agree),2 (neutral),1 (disagree),Don't know,,"Develop components that make up for the interoperability issues, acting as adaptors, and bear the load of running and maintaining them.",,"There's still a large way to go to get solutions and practices software engineers have developed to streamline development efforts, and specially systems maintenance (I see some devops practices leaking into robotics, which is a good start). Robotics has to deal with sensor and HW failure that is much harder to observe and monitor (compared to software systems). Another difference I see is the yet to be exploited potential of AI applied to interaction and autonomy in robotics.","I think their are slowly evolving in the right direction, finding a balance in how to exploit the cloud and the robots own capacity. Quick software iterations, reactive maintenance and dev automation is finding its way into the software development cycle of robotics.",Industrial practitioner: Programmer,4 years,Male,11-30
13/06/2019 21:20:51,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities)",Logistics,"software infrastructure (OS, ROS..), but I did the other parts in other projects before as well",3 (very often),1 (almost never),2 (sometimes),4 (always),1 (almost never),2 (sometimes),4 (always),3 (very often),Don't know,,Jira (would love to switch away),"Jira, Confluence",Confluence,vi,,Gazebo,"rosbag, roslaunch, in-house tool","vi, git, Jenkins",3 (very often),1 (almost never),3 (very often),0 (never),Don't know,Don't know,,3 (very often),0 (never),3 (very often),Don't know,,0 (never),2 (sometimes),3 (very often),4 (always),0 (never),0 (never),2 (sometimes),2 (sometimes),Don't know,,ROS,"Proprietary, Open source","Proprietary, Open source",4 (always),4 (always),4 (always),4 (always),4 (always),4 (always),4 (always),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We follow a precise architecture of the system",,3 (very often),2 (sometimes),2 (sometimes),3 (very often),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Debugging (not sure what this question is about),"Developer, Non-technical end-user",1 (almost never),0 (never),0 (never),4 (always),Don't know,,3 (agree),1 (disagree),2 (neutral),1 (disagree),1 (disagree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),1 (disagree),2 (neutral),Don't know,,work on it? (not sure what you want to here here),,You need to have an understanding of the hardware and the software; a robot is not a well specified and tested system like a computer now. Kind of like in the 60th when IBM delivered their first computers and provided the operators as well.,I don't think there are well defined practices yet.,Industrial practitioner: Leading Technical Role,15,Male,+50
14/06/2019 04:18:08,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Factory automation, General research on service robots","Complete robotic system (e.g., BOSCH's lawnmower)",2 (sometimes),2 (sometimes),4 (always),4 (always),0 (never),4 (always),4 (always),4 (always),Don't know,,Whiteboard. Trello. ,Docs,Slides and code collaboration ,CLion and Vim,.,Gazebo Gtest In-House,In-house,CLion vim ,4 (always),4 (always),2 (sometimes),3 (very often),0 (never),Don't know,,2 (sometimes),2 (sometimes),2 (sometimes),Don't know,,Don't know,2 (sometimes),4 (always),4 (always),1 (almost never),1 (almost never),3 (very often),0 (never),Don't know,,In-House,Proprietary and open source,Proprietary,2 (sometimes),3 (very often),2 (sometimes),4 (always),3 (very often),2 (sometimes),1 (almost never),Don't know,,"Lack of documentation, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Compatibly in multiple environments ",Both equally,We rely on the experience and skills of our team,,2 (sometimes),2 (sometimes),4 (always),3 (very often),Don't know,Don't know,,"Simulation, Runtime monitoring",Video > data> Write the case as a test > debug,"Developer, Non-technical end-user, Technically skilled end-user",3 (very often),3 (very often),0 (never),4 (always),Don't know,,4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),3 (agree),4 (strongly agree),3 (agree),3 (agree),1 (disagree),1 (disagree),Don't know,,Refactor refactor refactor,There is an industry shift that must happen and it requires software engineers who know robotics. Not roboticists writing software ,It doesn’t really. We reinvent too much,Unified to other industry standards. ,Industrial practitioner: Leading Technical Role,3,Prefer not to say,+50
14/06/2019 06:49:33,"Mobile robots (i.e., ground robots with navigation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Drones","Defense, General research on service robots",Planning and orchestration modules,3 (very often),2 (sometimes),4 (always),4 (always),1 (almost never),4 (always),4 (always),2 (sometimes),Don't know,,"Excel, Trello, Google Docs","Word, Excel, DOORS","Papyrus, UML","Visual Studio, in house build tool","C++, Python, Matlab, Simulink, Java","Gazebo, JSBSim, in house ee testing tooling",ROS,"Visual Studio, in house build platform",4 (always),1 (almost never),3 (very often),2 (sometimes),1 (almost never),Don't know,,1 (almost never),1 (almost never),3 (very often),Don't know,,3 (very often),Don't know,3 (very often),Don't know,2 (sometimes),3 (very often),2 (sometimes),1 (almost never),Don't know,,"ROS, ROS 2.0","Proprietary, Open source","Proprietary, Open source",4 (always),4 (always),3 (very often),4 (always),4 (always),4 (always),4 (always),Don't know,,"Lack of documentation, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,3 (very often),2 (sometimes),4 (always),4 (always),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Typically heuristic analysis of the failure followed by an analysis of the underlying system architecture that increases in granularity until a root cause is found. This is done if the problem is not immediately visible as our team follows an agile approach to development.,"Technically skilled end-user, Integrator",2 (sometimes),1 (almost never),1 (almost never),1 (almost never),Don't know,,2 (neutral),3 (agree),3 (agree),4 (strongly agree),4 (strongly agree),2 (neutral),3 (agree),3 (agree),4 (strongly agree),3 (agree),2 (neutral),Don't know,,Typically addressed on a case by case basis,"Not necessarily the biggest challenge, but certainly a frustrating one: often times semi-proprietary tool chains with minimal documentation and spotty support end up in an end users work flow forcing developers to work with it. This almost invariably leads to interoperability issues with the other components of the system being implemented and can lead to clunky or at the very least only marginally manageable systems.",Physics,There should be a much bigger standardization movement than what is taking place similar to what is occurring in the world of software engineering.,Academic/Scientist,6 years,Male,11-30
14/06/2019 15:51:48,"Mobile robots (i.e., ground robots with navigation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)",Cleaning,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),4 (always),4 (always),4 (always),3 (very often),4 (always),4 (always),4 (always),Don't know,,"Jira, Excel","Confluence, Exel",,"VSCode, VIM, Eclipse",,Gazebo,"in-house, humans","VSCode, VIM, Eclipse",4 (always),1 (almost never),3 (very often),3 (very often),3 (very often),Don't know,,0 (never),0 (never),4 (always),0 (never),,0 (never),2 (sometimes),4 (always),4 (always),0 (never),0 (never),0 (never),0 (never),0 (never),,ROS,Open source,Proprietary,4 (always),4 (always),4 (always),4 (always),4 (always),4 (always),4 (always),Don't know,,"Lack of documentation, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Many freely available components for high-level robots will simply not transfer well to your own project unless they were written for a ver very similar application.",Both equally,"We rely on the experience and skills of our team, We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,4 (always),4 (always),4 (always),4 (always),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Variable based on type of fault. Simulation and live testing almost always required.,"Non-technical end-user, Technically skilled end-user",Don't know,Don't know,Don't know,Don't know,4 (always),Custom UI for on-technical interaction.,1 (disagree),1 (disagree),0 (strongly disagree),0 (strongly disagree),1 (disagree),4 (strongly agree),2 (neutral),4 (strongly agree),4 (strongly agree),2 (neutral),1 (disagree),Don't know,,"Testing. Then testing, followed by more testing. Simulation and  real world.","Always and forever will be robustness. Shipping a produce to a customer demands a level of robustness far beyond what exists in academia. We always start with literature reviews for ideas, but then end up with fully custom implementations of things even if source is provided by authors, because their focus is writing a paper, not selling a product.","Testing is slower. Requires that you actually have a piece of hardware operating in the real world, where every sensor is lying to you, your environment is actively fighting back, and you have to still maintain sufficient functionality for an outside observer to be happy with your performance. Every assumption must be constantly questioned.",I cannot speak for other practices beyond my/our own. ,Industrial practitioner: Leading Technical Role,8,Male,11-30
14/06/2019 21:48:12,"Mobile robots (i.e., ground robots with navigation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms","Factory automation, Agriculture, Cleaning, Transportation, Medical, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",4 (always),3 (very often),3 (very often),4 (always),3 (very often),4 (always),4 (always),3 (very often),Don't know,,Excel ,word,powerpoint,eclipse,matlab,gazebo,roslaunch,eclipse,4 (always),3 (very often),4 (always),4 (always),3 (very often),Don't know,,3 (very often),4 (always),3 (very often),Don't know,,1 (almost never),2 (sometimes),3 (very often),4 (always),3 (very often),2 (sometimes),1 (almost never),2 (sometimes),Don't know,,"ROS, ROS 2.0, SmartSoft","Proprietary, Open source","Proprietary, Open source",4 (always),4 (always),4 (always),4 (always),4 (always),4 (always),4 (always),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,2 (sometimes),4 (always),4 (always),4 (always),2 (sometimes),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",experience,"Developer, Non-technical end-user, Technically skilled end-user",1 (almost never),3 (very often),3 (very often),2 (sometimes),Don't know,,2 (neutral),1 (disagree),3 (agree),2 (neutral),3 (agree),3 (agree),3 (agree),3 (agree),3 (agree),3 (agree),3 (agree),Don't know,,n / a,bridging the gap from research to end user industry,complex systems of complex SW & HW,"more sw engineers, less mechanical engineers needed",,11,Male,+50
14/06/2019 22:09:08,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities)",Industrial inspection,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),2 (sometimes),3 (very often),4 (always),2 (sometimes),3 (very often),4 (always),3 (very often),Don't know,,"Redmine, jira","Redmine, jira","Redmine, jira","Qtcreator, pycharm",In-house tools,"Gazebo, real robots, jenkins","Rosbag, roslaunch, in-house tools",Jenkins,3 (very often),3 (very often),3 (very often),2 (sometimes),2 (sometimes),Don't know,,2 (sometimes),2 (sometimes),3 (very often),Don't know,,Don't know,2 (sometimes),3 (very often),3 (very often),Don't know,Don't know,Don't know,Don't know,3 (very often),JavaScript,ROS,Open source,"Proprietary, Open source",3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),2 (sometimes),2 (sometimes),Don't know,,"Lack of documentation, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Both equally,"We rely on the experience and skills of our team, We have a clear definition of interfaces of each component, We follow a standard (please specify below)",,2 (sometimes),3 (very often),3 (very often),2 (sometimes),1 (almost never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Real world log data and simulation testing,"Non-technical end-user, Technically skilled end-user",1 (almost never),1 (almost never),1 (almost never),3 (very often),Don't know,,3 (agree),2 (neutral),2 (neutral),2 (neutral),2 (neutral),4 (strongly agree),4 (strongly agree),3 (agree),3 (agree),3 (agree),3 (agree),Don't know,,"Research solutions, find right experts",,"Higher noise, more real-world testing required, cannot rely on assumptions as much",,Industrial practitioner: Leading Technical Role,13,Male,1-10
16/06/2019 13:38:27,"Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms","Factory automation, AI Research","Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",Don't know,Don't know,1 (almost never),3 (very often),0 (never),4 (always),3 (very often),3 (very often),Don't know,,,,,Atom,,Gazebo,ros2 launch,"Git, GitHub, Atom",2 (sometimes),3 (very often),Don't know,Don't know,Don't know,Don't know,,Don't know,Don't know,Don't know,Don't know,,Don't know,Don't know,3 (very often),4 (always),Don't know,Don't know,Don't know,Don't know,Don't know,,"ROS, ROS 2.0",Open source,Open source,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,,,"Systematic reuse (e.g., frameworks, components, libraries, ...)",,,3 (very often),Don't know,2 (sometimes),4 (always),Don't know,Don't know,,Simulation,"Reading errors, navigating code, testing","Developer, Non-technical end-user, Technically skilled end-user, Integrator",Don't know,Don't know,Don't know,Don't know,Don't know,,Don't know,Don't know,2 (neutral),Don't know,Don't know,Don't know,Don't know,2 (neutral),Don't know,2 (neutral),2 (neutral),Don't know,,-,,-,,Academic/Scientist,1,Male,11-30
17/06/2019 09:02:07,"Mobile robots (i.e., ground robots with navigation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Non-industrial static manipulator","Factory automation, General research on service robots","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",4 (always),2 (sometimes),3 (very often),4 (always),1 (almost never),3 (very often),3 (very often),2 (sometimes),Don't know,,Jira,Jira,Whiteboard,VS Code,in-house tool,"Rostest, Gazebo",ROS,"VS Code, Bitbucket",4 (always),1 (almost never),1 (almost never),1 (almost never),0 (never),Don't know,,0 (never),0 (never),4 (always),Don't know,,0 (never),0 (never),4 (always),4 (always),0 (never),2 (sometimes),0 (never),0 (never),Don't know,,ROS,"Proprietary, Open source",Don't know,3 (very often),3 (very often),2 (sometimes),1 (almost never),1 (almost never),1 (almost never),1 (almost never),Don't know,,"Lack of documentation, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We have a clear definition of interfaces of each component, We follow a standard (please specify below)",ROS conventions,4 (always),3 (very often),2 (sometimes),4 (always),0 (never),Don't know,,"Simulation, Runtime monitoring, Artificially generated data",Depends on the type of failure,"Developer, Technically skilled end-user",3 (very often),3 (very often),0 (never),0 (never),Don't know,,4 (strongly agree),2 (neutral),2 (neutral),1 (disagree),2 (neutral),1 (disagree),1 (disagree),3 (agree),4 (strongly agree),3 (agree),3 (agree),Don't know,,"Addressing research questions as required, i.e., focus is mainly on feasibility rather than product development.","Our challenges are mainly related to research, thus an overall challenge is to trade-off software development with research: Finding low-overhead software engineering workflows that allow us to try new ideas quickly, but still enable good re-use of those ideas that appear promising.","Robotics includes a high degree of interplay between various types of components and, in addition, is usually coupled to hardware components.","Not significantly, but there is a potential to improve re-use of components, in particular for different types of robots. Also, approaches and frameworks that better incorporate the hardware aspect of robot software for testing purposes are desirable.",Industrial practitioner: Programmer,8,Male,+50
17/06/2019 09:42:40,"Mobile robots (i.e., ground robots with navigation capabilities)",BtoB / Services,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),4 (always),4 (always),4 (always),3 (very often),4 (always),4 (always),4 (always),Don't know,,"Excel, Trello",Excel,"Powerpoint, UML","Sublime, other specific for JS",--,,,,4 (always),2 (sometimes),2 (sometimes),2 (sometimes),2 (sometimes),Don't know,,2 (sometimes),3 (very often),4 (always),Don't know,,0 (never),4 (always),4 (always),4 (always),2 (sometimes),1 (almost never),1 (almost never),1 (almost never),4 (always),"HTML, JS",None.,"Proprietary, Open source",Proprietary,4 (always),4 (always),3 (very often),3 (very often),3 (very often),4 (always),2 (sometimes),Don't know,,"Lack of documentation, Lack of trust, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,4 (always),3 (very often),2 (sometimes),4 (always),Don't know,Don't know,,Manual specification based on experience,5 Why method,"Non-technical end-user, Technically skilled end-user",Don't know,Don't know,Don't know,Don't know,Don't know,,1 (disagree),0 (strongly disagree),2 (neutral),2 (neutral),1 (disagree),1 (disagree),2 (neutral),3 (agree),1 (disagree),1 (disagree),1 (disagree),Don't know,,We developed our system taking into account these challenges,Biggest challenge is security.... ,"It differs because the software stack is very large - so, you have a lot of developers with different backgrounds in need of collaboration, trust.",,Industrial practitioner: Leading Technical Role,8,Female,11-30
17/06/2019 11:13:59,"Mobile robots (i.e., ground robots with navigation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Factory automation, Medical, General research on service robots","Low-level functionalities (e.g., navigation, self-localisation)",Don't know,0 (never),0 (never),4 (always),0 (never),2 (sometimes),2 (sometimes),3 (very often),Don't know,,I am not in charge of this,,,"Linux terminal with Vim, ROS",,Catch2 (we don't do simulation),roslaunch,Same as implementation,4 (always),3 (very often),2 (sometimes),2 (sometimes),0 (never),0 (never),,2 (sometimes),0 (never),0 (never),0 (never),,Don't know,2 (sometimes),4 (always),2 (sometimes),3 (very often),0 (never),0 (never),0 (never),0 (never),,ROS,Open source,"Proprietary, Open source",3 (very often),3 (very often),3 (very often),2 (sometimes),2 (sometimes),3 (very often),3 (very often),0 (never),,"Lack of documentation, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We follow a precise architecture of the system,,3 (very often),1 (almost never),2 (sometimes),2 (sometimes),Don't know,Don't know,,"Manual specification based on experience, Runtime monitoring",GDB and Valgrind,"Developer, Non-technical end-user",3 (very often),Don't know,Don't know,Don't know,Don't know,,3 (agree),3 (agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),1 (disagree),3 (agree),3 (agree),3 (agree),4 (strongly agree),3 (agree),Don't know,,"The major challenge is transition from simulation or lab tests to real world. New errors or behaviours appear that nobody thought they could be possible. The solution is have different ""real world"" areas. They should be under control during all time for the testing and try the code all the times the mission requires it.",,"Robotics requires to have a general knowledge of every part of the robot. Not necessarily the failure is in the code. You should know about the hardware and the software of the robot, and how to connect and communicate between all the components. ",Not no. With the increase of Machine Learning the research in robotics is going in the good way.,Industrial practitioner: Programmer,6,Female,1-10
17/06/2019 15:33:37,"Mobile robots (i.e., ground robots with navigation capabilities)","Agriculture, Cleaning, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),4 (always),2 (sometimes),4 (always),1 (almost never),3 (very often),4 (always),2 (sometimes),Don't know,,JIRA,"Gitlab, Confluence, OneNote","Markdown, PlantUML, Mermaid","Visual Studio Code, vim",In-house tool,"xUnit, Gazebo, stdr_simulator","rosbag, roslaunch, ROS2, optical tracking software, in-house tools","git, Visual Studio Code, vim",3 (very often),0 (never),1 (almost never),2 (sometimes),0 (never),Don't know,,Don't know,2 (sometimes),3 (very often),Don't know,,Don't know,2 (sometimes),3 (very often),3 (very often),2 (sometimes),2 (sometimes),1 (almost never),0 (never),Don't know,,"ROS, ROS 2.0",Open source,"Proprietary, Open source",3 (very often),3 (very often),2 (sometimes),3 (very often),0 (never),3 (very often),2 (sometimes),Don't know,,"Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,3 (very often),3 (very often),2 (sometimes),4 (always),0 (never),Don't know,,"Manual specification based on experience, Runtime monitoring",Debugging,"Technically skilled end-user, Integrator",3 (very often),0 (never),0 (never),0 (never),Don't know,,1 (disagree),3 (agree),3 (agree),1 (disagree),1 (disagree),3 (agree),4 (strongly agree),4 (strongly agree),1 (disagree),2 (neutral),1 (disagree),Don't know,,"Safety certification and robustness are addressed using a rigorously defined development process (like V Model).
Since I mainly use Open Source libraries, when there is no documentation, I read the source. The functionality has to be worth it, though.",Achieving robustness in the face of the diversity in the domains.,"A larger than usual share of code comes from researchers, as opposed to professional software developers. This often causes quality issues.","As a field, we seem to bad at establishing widely used functional libraries that everyone contributes to. Computer Vision has OpenCV, scientific computing has SciPy, but in robotics, everybody rolls his/her own, even for quite basic stuff.",Industrial practitioner: Leading Technical Role,13,Male,+50
17/06/2019 16:02:05,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Transportation, General research on service robots","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",2 (sometimes),2 (sometimes),2 (sometimes),3 (very often),1 (almost never),3 (very often),3 (very often),1 (almost never),Don't know,,"Trello, Excel, Redmine","Word, Excel","PowerPoint, Word",QT-creator,In house script,Gazebo,"Rosbag, roslaunch, multimaster_fkie, rosservice, rosaction","QT-creator, gitlab",4 (always),1 (almost never),2 (sometimes),1 (almost never),3 (very often),Don't know,,0 (never),0 (never),3 (very often),Don't know,,0 (never),1 (almost never),4 (always),2 (sometimes),0 (never),0 (never),Don't know,Don't know,Don't know,,"ROS, SmartSoft","Proprietary, Open source",Don't know,3 (very often),3 (very often),0 (never),3 (very often),2 (sometimes),3 (very often),3 (very often),Don't know,,"Internal policies, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,4 (always),3 (very often),2 (sometimes),3 (very often),Don't know,Don't know,,"Simulation, Runtime monitoring","First by unit tests failing, and then deep inside","Developer, Business department",3 (very often),0 (never),0 (never),0 (never),Don't know,,3 (agree),2 (neutral),2 (neutral),4 (strongly agree),3 (agree),4 (strongly agree),3 (agree),2 (neutral),3 (agree),1 (disagree),3 (agree),Don't know,,"Specifying missions for robots: split down in some skills and put together with a state machine
Lack of standards: try to follow internal rules
Interoperability among heterogeneous components: try to be as more generic as possible
Validating the robotic system: we are trying to have an automatic procedure with some scripts
Dynamic adaptation of robotic behavior: try to hard code as much problems cases as possible",,"there are other domains where there are standard that makes system easier to integrate, to benchmark, etc.","yes should have standards, models to follow to avoid to put more effort to integrate components than to write the inside algorithm ",Industrial practitioner: Programmer,8,Male,31-50
17/06/2019 17:09:01,"Mobile robots (i.e., ground robots with navigation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Factory automation, Cleaning, Transportation, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",1 (almost never),2 (sometimes),3 (very often),4 (always),2 (sometimes),3 (very often),3 (very often),3 (very often),Don't know,,Trello,Google Docs,"Google Docs, Pencil, Dia","QTCreator, Sublime text, vi",in-house,"Gazebo, Gtest, Gmock","Rosbag, ROS","QTCreator, Sublime text, vi",4 (always),3 (very often),4 (always),3 (very often),1 (almost never),Don't know,,Don't know,Don't know,3 (very often),Don't know,,0 (never),0 (never),4 (always),3 (very often),3 (very often),0 (never),0 (never),0 (never),Don't know,,"ROS, OROCOS","Proprietary, Open source","Proprietary, Open source",3 (very often),3 (very often),4 (always),4 (always),4 (always),3 (very often),2 (sometimes),Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,3 (very often),3 (very often),2 (sometimes),4 (always),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Via testing and debuging,"Developer, Non-technical end-user, Technically skilled end-user, Integrator",Don't know,Don't know,Don't know,Don't know,Don't know,,3 (agree),1 (disagree),1 (disagree),1 (disagree),2 (neutral),2 (neutral),3 (agree),4 (strongly agree),3 (agree),4 (strongly agree),2 (neutral),Don't know,,"Highly depends on the each challenge, there isn't a standarized ""solution per challenge""",,"It doesn't really differ, per se, it is simply a subset with it's own particular set of requirements and considerations.","Mainly by following a lot of the general software engineering practices (modular and reusable code, favor parametrization to hard-coding, proper code style and design...)",Industrial practitioner: Programmer,4,Male,31-50
18/06/2019 01:21:21,"Humanoid robots (i.e., a robot with its body shape built to resemble the human body)","Factory automation, Agriculture, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),4 (always),4 (always),4 (always),2 (sometimes),3 (very often),3 (very often),3 (very often),Don't know,,Jira,Jira and Confluence,"google drawings, draw.io","Eclipse, pycharm, Visual studio code","python, xacros",Gazebo and mujoco,roslaunch and rosbag,"Eclipse, pycharm, visual studio code, qt",3 (very often),Don't know,Don't know,Don't know,Don't know,Don't know,,Don't know,Don't know,4 (always),Don't know,,Don't know,Don't know,2 (sometimes),3 (very often),Don't know,Don't know,Don't know,Don't know,Don't know,,ROS,"Proprietary, Open source","Proprietary, Open source",Don't know,3 (very often),Don't know,2 (sometimes),3 (very often),3 (very often),2 (sometimes),Don't know,,"Lack of documentation, Lack of trust, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions",Both equally,"We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,2 (sometimes),2 (sometimes),1 (almost never),4 (always),Don't know,Don't know,,Simulation,Automatic compilation errors and debuging,"Non-technical end-user, Technically skilled end-user, Integrator",Don't know,Don't know,Don't know,Don't know,Don't know,,2 (neutral),3 (agree),4 (strongly agree),3 (agree),3 (agree),3 (agree),2 (neutral),3 (agree),3 (agree),3 (agree),3 (agree),Don't know,,"Using ROS, make use of existing repositories, improving documentation",,Several components need to be integrated from different disciplines,Standards needs to be clearer and also reusability needs to be easier,Industrial practitioner: Leading Technical Role,15,Female,31-50
18/06/2019 17:36:13,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities)","Factory automation, Cleaning, Transportation, Medical","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",3 (very often),2 (sometimes),2 (sometimes),3 (very often),3 (very often),3 (very often),2 (sometimes),4 (always),Don't know,,"GitHub, Excel","Word, Excel","PowerPoint, MagicFraw",Eclipse,Xtend,Gazebo,roslaunch,GitHub (?) for me maintenance have to do with versions and issues management,2 (sometimes),2 (sometimes),4 (always),3 (very often),Don't know,Don't know,,Don't know,2 (sometimes),2 (sometimes),Don't know,,3 (very often),Don't know,3 (very often),3 (very often),Don't know,Don't know,3 (very often),Don't know,Don't know,,"ROS, ROS 2.0","Proprietary, Open source",Open source,3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),2 (sometimes),2 (sometimes),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We have a clear definition of interfaces of each component,,4 (always),4 (always),3 (very often),4 (always),Don't know,Don't know,,"Simulation, Runtime monitoring",Trail-error runs,"Developer, Technically skilled end-user, Integrator",Don't know,Don't know,Don't know,Don't know,Don't know,,3 (agree),2 (neutral),4 (strongly agree),4 (strongly agree),2 (neutral),4 (strongly agree),4 (strongly agree),4 (strongly agree),2 (neutral),1 (disagree),Don't know,Don't know,,"Uni test, CI systems and extend documentation",,Robotics is a very dynamic domain. With a lack of standards and process definition,,Academic/Scientist,7,Female,+50
19/06/2019 09:29:23,"Mobile robots (i.e., ground robots with navigation capabilities), Drones",General research on service robots,"Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",1 (almost never),3 (very often),3 (very often),3 (very often),0 (never),4 (always),4 (always),3 (very often),Don't know,,"Jira, Excel",Jira,"UML, Visio","Eclipse, Pycharm, Sublime ",,"JUnit, ArduPilot Software in the Loop Simulator",,"Eclipse, Pycharm, Git",4 (always),Don't know,4 (always),0 (never),2 (sometimes),Don't know,,Don't know,Don't know,4 (always),Don't know,,0 (never),Don't know,Don't know,4 (always),3 (very often),0 (never),2 (sometimes),0 (never),0 (never),,ROS 2.0,Open source,"Proprietary, Open source",Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,,"Lack of documentation, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions",Both equally,We rely on the experience and skills of our team,,2 (sometimes),3 (very often),0 (never),1 (almost never),0 (never),Don't know,,"Simulation, Runtime monitoring","Manual code inspection, analysis of collected monitoring and log data, ",Developer,3 (very often),Don't know,Don't know,Don't know,Don't know,,Don't know,Don't know,4 (strongly agree),Don't know,4 (strongly agree),Don't know,Don't know,Don't know,3 (agree),Don't know,Don't know,Don't know,,-,,Combination of Hardware + Software  / Unpredictable behaviour of certain components (hardware) that sometimes not always correspond to what can be observed in simulations,,Academic/Scientist,2,Male,
19/06/2019 11:21:46,"Mobile manipulators (i.e., mobile robots with manipulation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body)","Factory automation, General research on service robots",Planning and orchestration modules,4 (always),Don't know,4 (always),4 (always),2 (sometimes),4 (always),2 (sometimes),4 (always),Don't know,,gitlab,I don't know what it means,Bouml,"vim, emacs, and others",omniidl,"unit tests, gazebo","ros, real robot","git, github, gitlab",4 (always),1 (almost never),4 (always),3 (very often),Don't know,Don't know,,0 (never),0 (never),4 (always),Don't know,,0 (never),1 (almost never),4 (always),4 (always),2 (sometimes),1 (almost never),Don't know,Don't know,Don't know,,ROS,Open source,Open source,2 (sometimes),4 (always),Don't know,4 (always),2 (sometimes),3 (very often),1 (almost never),Don't know,,"Lack of documentation, Lack of trust, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions","Systematic reuse (e.g., frameworks, components, libraries, ...)",We have a clear definition of interfaces of each component,,4 (always),3 (very often),3 (very often),3 (very often),1 (almost never),Don't know,,Manual specification based on experience,by debugging,Developer,Don't know,Don't know,Don't know,Don't know,Don't know,,Don't know,3 (agree),3 (agree),3 (agree),Don't know,4 (strongly agree),2 (neutral),3 (agree),2 (neutral),3 (agree),Don't know,Don't know,,manpower,,"hardware, multi-disciplinarity",No,Academic/Scientist,25,Male,+50
19/06/2019 12:10:29,"Mobile robots (i.e., ground robots with navigation capabilities), Drones","Agriculture, Transportation, General research on service robots","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",Don't know,Don't know,Don't know,4 (always),Don't know,4 (always),4 (always),Don't know,Don't know,,,,,"Visual Studio, QT-creator",,Gazebo," rosbag, roslaunch",,4 (always),Don't know,Don't know,Don't know,Don't know,Don't know,,Don't know,Don't know,Don't know,Don't know,,Don't know,Don't know,4 (always),Don't know,Don't know,2 (sometimes),Don't know,Don't know,Don't know,,ROS,Open source,Proprietary,4 (always),Don't know,Don't know,4 (always),Don't know,Don't know,Don't know,Don't know,,"Lack of documentation, Internal policies, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Both equally,We rely on the experience and skills of our team,,4 (always),4 (always),4 (always),4 (always),Don't know,Don't know,,"Simulation, Runtime monitoring",tests,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,,Don't know,Don't know,4 (strongly agree),3 (agree),3 (agree),Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,,coded itself,,I don't know,,Academic/Scientist,,Male,1-10
19/06/2019 13:18:18,"Mobile robots (i.e., ground robots with navigation capabilities)",retail,"Complete robotic system (e.g., BOSCH's lawnmower)",3 (very often),2 (sometimes),1 (almost never),4 (always),2 (sometimes),3 (very often),4 (always),4 (always),Don't know,,trello,,,,,,,,3 (very often),Don't know,Don't know,Don't know,Don't know,Don't know,,Don't know,0 (never),4 (always),0 (never),,1 (almost never),3 (very often),3 (very often),3 (very often),0 (never),0 (never),0 (never),0 (never),Don't know,,ROS,Open source,"Proprietary, Open source",3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),Don't know,,Licensing issues,Copy-paste-modify,We follow a precise architecture of the system,,3 (very often),4 (always),Don't know,3 (very often),Don't know,Don't know,,"Manual specification based on experience, Simulation",build logs,Non-technical end-user,Don't know,Don't know,Don't know,Don't know,Don't know,,2 (neutral),2 (neutral),2 (neutral),Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,,dunno,,"we work in real world, not virtual one",,Industrial practitioner: Programmer,11,Prefer not to say,31-50
19/06/2019 13:31:01,"Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms","Factory automation, Cleaning, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),3 (very often),3 (very often),4 (always),2 (sometimes),4 (always),4 (always),4 (always),Don't know,,Jira,Jira,"Pen & Paper, Whiteboards, Jira","vim, emacs, sublime, visual studio, pycharm",,in-house tool,ros,"git, bitbucket, editors of choice",4 (always),3 (very often),2 (sometimes),4 (always),Don't know,Don't know,,0 (never),0 (never),4 (always),Don't know,,Don't know,4 (always),4 (always),4 (always),Don't know,3 (very often),1 (almost never),0 (never),Don't know,,ROS,Open source,"Proprietary, Open source",4 (always),4 (always),4 (always),4 (always),Don't know,3 (very often),4 (always),Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,4 (always),4 (always),2 (sometimes),4 (always),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring","Analysis of failed tests, code reviews; analysis of overall project progress and identification of bottlenecks","Developer, Non-technical end-user, Technically skilled end-user",2 (sometimes),4 (always),0 (never),0 (never),Don't know,,1 (disagree),0 (strongly disagree),2 (neutral),3 (agree),4 (strongly agree),3 (agree),3 (agree),4 (strongly agree),1 (disagree),3 (agree),0 (strongly disagree),Don't know,,"interoperability: custom bridges, validation: excessive tests, safety: more tests and hardcoded safety guarantees, transition sim2real: tests","outdated ROS packages, ROS ecosystem is horrible","if done correctly, it does not",,Industrial researcher,7,Male,+50
19/06/2019 14:31:15,"Mobile robots (i.e., ground robots with navigation capabilities)",Agriculture,"Complete robotic system (e.g., BOSCH's lawnmower)",2 (sometimes),2 (sometimes),1 (almost never),4 (always),2 (sometimes),3 (very often),4 (always),3 (very often),Don't know,,Jira,Excel and Jira,Papyrus,Eclipse,Xtend,"Gazebo, Google test","rosbag, roslaunch + python scripts to analyze the results",Eclipse,3 (very often),1 (almost never),4 (always),2 (sometimes),1 (almost never),Don't know,,1 (almost never),Don't know,3 (very often),0 (never),,Don't know,3 (very often),3 (very often),3 (very often),2 (sometimes),0 (never),2 (sometimes),0 (never),0 (never),,ROS,Open source,Proprietary,4 (always),4 (always),3 (very often),4 (always),3 (very often),2 (sometimes),2 (sometimes),0 (never),,"Lack of documentation, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Both equally,We rely on the experience and skills of our team,,2 (sometimes),4 (always),2 (sometimes),1 (almost never),0 (never),0 (never),,"Manual specification based on experience, Simulation, Runtime monitoring",By analyzing bags using purpose-developed python scripts,"Developer, Non-technical end-user",4 (always),0 (never),0 (never),0 (never),0 (never),,1 (disagree),1 (disagree),2 (neutral),3 (agree),3 (agree),3 (agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),3 (agree),Don't know,0 (strongly disagree),,"Lack of documentation solution - read the source code, experiment with the component
Lack of standards solution - trying to cherry-pick from standards used in sectors closed to the one the robot will work into
Interoperability among heterogeneous components - developing glue-components to address the interoperability issues or modifying the components if the source code is available
Safety certification solution - segregation on the software architecture level into safety- and non-safety-related functionality, and deploying the safety-related one on a self-developed safety controller
Robustness solution - reuse as much as possible trusted, long time used components and introducing only small changes/new features between releases; test thoroughly any new release
Dynamic adaptation of  robotic behavior -  strictly defined missions (hard-coded) so no dynamic adaptation needed; if things out of the pre-coded ones occur, stop and ask the operator to solve the issue manually. 
Transition from simulation to real world applications solution - limit the simulation to basic functionality and tune the parameters of the components based on real world tests; automate the real world tests, e.g., running the same mission multiple times by modifying one or several parameters and collecting the data, and then analyzing the data graphically using purpose-written python scripts",,"A traditional software engineer spends most of his/her time at a desk in front of a monitor having available for software development a multitude of frameworks, IDEs, tracing and debugging tools, libraries, and documentation. For a robotics software engineer a good amount of time is spent on the field, close to the robot. He or she has a much lower number of tools to do the development, and in addition to software he or she must understand hardware and mechanics. ",,Industrial practitioner: Programmer,6 years,Male,11-30
19/06/2019 14:34:37,"Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms","Factory automation, General Research on Manipulation","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",3 (very often),2 (sometimes),1 (almost never),4 (always),1 (almost never),4 (always),4 (always),3 (very often),Don't know,,"Jira, Microsoft Office Suite (incl. Sharepoints)",Jira,-,Visual Code,-,"Gazebo, Jenkins",ROS Tools,"Jenkins, SonarQube",3 (very often),2 (sometimes),3 (very often),1 (almost never),0 (never),Don't know,,0 (never),0 (never),4 (always),Don't know,,Don't know,1 (almost never),3 (very often),3 (very often),Don't know,1 (almost never),Don't know,Don't know,Don't know,,ROS,Open source,Open source,2 (sometimes),0 (never),0 (never),2 (sometimes),2 (sometimes),1 (almost never),0 (never),Don't know,,"Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,4 (always),3 (very often),1 (almost never),4 (always),0 (never),Don't know,,"Simulation, Runtime monitoring",Manual investigation of observed failures,Developer,3 (very often),3 (very often),Don't know,Don't know,Don't know,,2 (neutral),3 (agree),3 (agree),1 (disagree),1 (disagree),2 (neutral),1 (disagree),4 (strongly agree),4 (strongly agree),2 (neutral),4 (strongly agree),Don't know,,Robustness: Extensive testing in simulation and real world experiments. Lack of Documentation and Software Reuse: Extensive PR reviews by other team members. AI Techniques: Apply and extend state of the art research to solve relevant problems. ,,"The main difference for me is testing. In software-only projects it is easily possible to easily test behavior. In Robotics this tends to be more difficult due to the necessity of having a very good simulation (which also requires much effort to set up). Even then, you will never be able to completely model the real world in simulation.","ROS has a good approach on sharing software between different users. However, many problems and solutions in Robotics are very specific. General solutions are often hard or impossible to achieve. Reused algorithms often need severe adjustments to work reasonably in other use cases. This is facilitated by the lack of a ""general simulation framework"", where algorithms could be easily tested and improved on different use cases.",Industrial practitioner: Leading Technical Role,5,Male,+50
19/06/2019 15:28:04,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Underwater robots, Industrial arms","Factory automation, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),4 (always),3 (very often),4 (always),2 (sometimes),4 (always),4 (always),4 (always),Don't know,,"JIRA, Redmine","JIRA, Confluence",Confluence diagrams,vim,ROS genmsg for message comms,"Gazebo, gtest, in-house sim","rosbag, roslaunch, in-house tools and test team and floor","Gitlab, in-house tools",4 (always),3 (very often),3 (very often),3 (very often),2 (sometimes),Don't know,,0 (never),0 (never),4 (always),Don't know,,0 (never),2 (sometimes),4 (always),4 (always),1 (almost never),2 (sometimes),1 (almost never),4 (always),Don't know,,"ROS, OROCOS",Open source,"Proprietary, Open source",3 (very often),4 (always),3 (very often),4 (always),Don't know,4 (always),3 (very often),Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We follow a precise architecture of the system, We have a clear definition of interfaces of each component, We follow a standard (please specify below)","ROS topics, services, actions interface",4 (always),4 (always),3 (very often),4 (always),1 (almost never),Don't know,,"Simulation, Runtime monitoring","Testing, gdb",Integrator,1 (almost never),1 (almost never),4 (always),4 (always),4 (always),GUI,2 (neutral),3 (agree),3 (agree),3 (agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),3 (agree),3 (agree),Don't know,,"Simulation and testing, for robustness and validation",Lack of dynamic hyper-realistic simulations make it hard to iterate on improving system robustness in real environment,"More testing on the platforms is required, and often at the target environment","Yes, things should be tested for longer periods (days or even weeks w/o human intervention) and more challenging scenarios.",Industrial practitioner: Programmer,10,Male,+50
19/06/2019 19:19:59,"Mobile robots (i.e., ground robots with navigation capabilities)",Transportation,"Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),4 (always),4 (always),3 (very often),1 (almost never),2 (sometimes),3 (very often),3 (very often),Don't know,,"Asana, google docs, github",google docs,"Google docs, Lucid charts, UML","Atom, VSCode, Sublime",,"rviz, in-house regression testing","rosbag, roslaunch, ravenops","Atom, VSCode, Sublime",3 (very often),3 (very often),3 (very often),2 (sometimes),Don't know,Don't know,,3 (very often),2 (sometimes),1 (almost never),Don't know,,0 (never),1 (almost never),3 (very often),3 (very often),2 (sometimes),1 (almost never),0 (never),0 (never),0 (never),,ROS,Open source,Proprietary,3 (very often),3 (very often),Don't know,3 (very often),3 (very often),2 (sometimes),2 (sometimes),Don't know,,"Lack of documentation, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,2 (sometimes),3 (very often),3 (very often),4 (always),Don't know,Don't know,,"Manual specification based on experience, Runtime monitoring",Introspection in rosbag recordings or live,"Developer, Technically skilled end-user",Don't know,Don't know,Don't know,Don't know,Don't know,,1 (disagree),2 (neutral),3 (agree),3 (agree),3 (agree),2 (neutral),4 (strongly agree),3 (agree),2 (neutral),2 (neutral),1 (disagree),Don't know,,this topic is too big for a one line answer,ROS is not sufficient for a professional robotics framework. The industry needs something better.,hardware/software integration. rapidly advancing research,Need stricter standards and interfaces so new research can be plug and play,Industrial practitioner: Programmer,4,Male,31-50
20/06/2019 01:53:10,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities)",Data/information gathering,"Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),4 (always),4 (always),4 (always),1 (almost never),3 (very often),3 (very often),4 (always),Don't know,,Jira,Jira,Confluence,Sublime,None,"Stage, gazebo and in-house tools",Ros and the robot,,4 (always),Don't know,3 (very often),2 (sometimes),3 (very often),Don't know,,Don't know,Don't know,4 (always),Don't know,,0 (never),2 (sometimes),4 (always),3 (very often),0 (never),1 (almost never),0 (never),0 (never),Don't know,,ROS,"Proprietary, Open source",Proprietary,1 (almost never),2 (sometimes),3 (very often),4 (always),4 (always),4 (always),3 (very often),Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Lack of support","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,4 (always),4 (always),2 (sometimes),4 (always),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring","Investigating code, simulations, logs & bags",Non-technical end-user,4 (always),Don't know,Don't know,Don't know,4 (always),Yaml file configured specifications ,1 (disagree),1 (disagree),2 (neutral),1 (disagree),1 (disagree),3 (agree),2 (neutral),3 (agree),2 (neutral),2 (neutral),Don't know,Don't know,,Robustness has been by far the biggest challenge and doubling down on a rigorous test/Release chain is how we are getting what we need. ,,The largest differece is that robotics engineers have to deal with things in the real world (sensors etc) ,Increased focus on automated testing,Director of Robotics,~10 years,Male,+50
20/06/2019 03:29:31,Industrial arms,"Factory automation, Cleaning, General research on service robots","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",Don't know,Don't know,Don't know,4 (always),Don't know,3 (very often),3 (very often),2 (sometimes),Don't know,,"GitHub, Slack",,,Visual Studio,,,,Visual Studio,4 (always),2 (sometimes),3 (very often),3 (very often),Don't know,Don't know,,3 (very often),0 (never),0 (never),0 (never),,0 (never),0 (never),3 (very often),3 (very often),0 (never),0 (never),0 (never),0 (never),0 (never),,ROS,"Proprietary, Open source",Don't know,4 (always),4 (always),3 (very often),2 (sometimes),Don't know,Don't know,2 (sometimes),Don't know,,,Both equally,,,1 (almost never),Don't know,4 (always),4 (always),Don't know,Don't know,,"Simulation, Runtime monitoring",debugging,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,,Don't know,3 (agree),4 (strongly agree),3 (agree),3 (agree),4 (strongly agree),4 (strongly agree),3 (agree),Don't know,2 (neutral),4 (strongly agree),Don't know,,"Testing interactively, deep RL, code reuse etc.",,application on hardware is very different from working on sofware,better standardisation. better backwards-compatibility. BETTER ERROR MESSAGES in official packages.,Academic/Scientist,3,Male,
20/06/2019 03:35:29,"Mobile robots (i.e., ground robots with navigation capabilities), Drones, Industrial arms","Factory automation, Cleaning","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",4 (always),3 (very often),3 (very often),3 (very often),1 (almost never),2 (sometimes),4 (always),2 (sometimes),Don't know,,Trello,Google sheet and Google doc,"Google presentation, google doc, UML",Visual Studio Code ,,Gazebo,"roslaunch, rosbag",Github,4 (always),4 (always),3 (very often),Don't know,Don't know,Don't know,,1 (almost never),Don't know,3 (very often),Don't know,,2 (sometimes),2 (sometimes),4 (always),3 (very often),1 (almost never),0 (never),0 (never),1 (almost never),Don't know,,"ROS, OROCOS",Open source,Proprietary,3 (very often),1 (almost never),3 (very often),2 (sometimes),2 (sometimes),3 (very often),0 (never),Don't know,,"Lack of trust, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Both equally,"We rely on the experience and skills of our team, We follow a precise architecture of the system",,2 (sometimes),3 (very often),4 (always),4 (always),Don't know,Don't know,,"Manual specification based on experience, Simulation","Logging, gdb",Non-technical end-user,3 (very often),0 (never),2 (sometimes),0 (never),Don't know,,2 (neutral),3 (agree),3 (agree),2 (neutral),2 (neutral),4 (strongly agree),2 (neutral),3 (agree),3 (agree),1 (disagree),1 (disagree),Don't know,,Validating the robotic system: perform tests often and as soon as possible,,We have to cope with hardware and real world interactions.,,Industrial practitioner: Programmer,4,Female,11-30
20/06/2019 04:36:17,"Mobile robots (i.e., ground robots with navigation capabilities)",Construction,"Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),4 (always),4 (always),4 (always),2 (sometimes),4 (always),4 (always),4 (always),Don't know,,Asana,Google docs,Google sheets,"Vi, Keil, Solidworks",Not currently using,Gazebo,Rosbag,Vi,3 (very often),1 (almost never),4 (always),1 (almost never),Don't know,Don't know,,2 (sometimes),Don't know,4 (always),Don't know,,0 (never),4 (always),1 (almost never),4 (always),0 (never),2 (sometimes),0 (never),0 (never),Don't know,,ROS,Open source,Proprietary,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,2 (sometimes),2 (sometimes),2 (sometimes),1 (almost never),Don't know,Don't know,,Manual specification based on experience,Debugging,"Developer, Non-technical end-user, Technically skilled end-user",0 (never),0 (never),0 (never),0 (never),Don't know,,0 (strongly disagree),3 (agree),Don't know,Don't know,Don't know,4 (strongly agree),Don't know,4 (strongly agree),Don't know,2 (neutral),0 (strongly disagree),Don't know,,No good solution,Need better alternative to ROS,Hardware is flaky,,Industrial practitioner: Leading Technical Role,8,Female,1-10
20/06/2019 05:40:55,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Industrial arms","Factory automation, Medical","Complete robotic system (e.g., BOSCH's lawnmower)",2 (sometimes),Don't know,Don't know,4 (always),1 (almost never),2 (sometimes),3 (very often),2 (sometimes),Don't know,,"Gitlab (although it is too limited), Asana",,,"Docker, ROS, Visual Studio Code",,"Gazebo, MoveIt",ROS,,Don't know,Don't know,1 (almost never),1 (almost never),1 (almost never),Don't know,,Don't know,Don't know,2 (sometimes),Don't know,,0 (never),2 (sometimes),3 (very often),4 (always),1 (almost never),1 (almost never),1 (almost never),2 (sometimes),Don't know,,ROS,"Open source, ""It depends"", obviously","Open source, It depends.",3 (very often),2 (sometimes),0 (never),0 (never),2 (sometimes),2 (sometimes),1 (almost never),Don't know,,"Lack of documentation, Licensing issues, Internal policies, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...), Both equally",We follow a standard (please specify below),We try to stay close to ROS messages.,1 (almost never),1 (almost never),1 (almost never),3 (very often),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Engineering investigation and intuition,Developer,3 (very often),1 (almost never),0 (never),0 (never),Don't know,,4 (strongly agree),4 (strongly agree),3 (agree),4 (strongly agree),3 (agree),3 (agree),3 (agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),1 (disagree),Don't know,,Never-ending struggle and homebrew solutions.,Lack of open standards and reusable code seems to cause reinventions of the wheel.,"Tests are harder to model, the interfaces are extremely broad, it is harder to limit the scope and do modular tests. Also, most people who can work with robots are not dyed-in-the-wool software engineers.","Yes, but I don't know how.",Industrial researcher,"5 including PhD time, 1 in the industry",Male,11-30
20/06/2019 07:02:08,"Mobile robots (i.e., ground robots with navigation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Underwater robots","Factory automation, Inspection","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",3 (very often),3 (very often),2 (sometimes),4 (always),0 (never),2 (sometimes),3 (very often),3 (very often),Don't know,,Jira,"Word, Excel and Jira","Powerpoint, Word, UML Diagrams","High level: Visual Studio, Eclipse. Low level: Renesas e2Studio, Atmel Studio, MPLAB X, Keil uVision",-,"Gazebo, V-Rep",,"High level: Visual Studio, Eclipse. Low level: Renesas e2Studio, Atmel Studio, MPLAB X, Keil uVision",3 (very often),0 (never),2 (sometimes),3 (very often),1 (almost never),Don't know,,Don't know,Don't know,3 (very often),Don't know,,3 (very often),2 (sometimes),4 (always),3 (very often),3 (very often),2 (sometimes),2 (sometimes),2 (sometimes),Don't know,,"ROS, Yarp","Open source, Don't know",Don't know,4 (always),3 (very often),3 (very often),3 (very often),2 (sometimes),1 (almost never),1 (almost never),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions",Both equally,We rely on the experience and skills of our team,,2 (sometimes),2 (sometimes),2 (sometimes),3 (very often),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring","Experimentation, testing rounds and on-ground testing","Non-technical end-user, Technically skilled end-user",Don't know,Don't know,Don't know,Don't know,Don't know,,3 (agree),3 (agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),3 (agree),4 (strongly agree),2 (neutral),4 (strongly agree),Don't know,Don't know,,Try to write more documentation and follow software industry for maintaining code. Reverse engineering to see what the simulation was missing to be more like the real world.,,"Physically dealing with objects, materials and limitations (motor, reducer or battery life-span for example) are a crucial change. Many more physical characteristics of the system have to be taken into account. Like cables bending, possible breaking points. If the main computer can shut down due to overheat (happened many times to us while working outside under the sun). Software is usually the more stable part of the system.","Yes, more standards and specialization would be welcomed. However, this will come as the industry evolves more into service robots (unstructured environments)",Industrial practitioner: Programmer,6,Male,11-30
20/06/2019 09:38:09,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms","Factory automation, Agriculture, Transportation, General research on service robots","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),4 (always),4 (always),3 (very often),2 (sometimes),3 (very often),3 (very often),3 (very often),Don't know,,What ever the client desires,What ever the client desires,What ever the client desires,What ever the client desires,What ever the client desires,What ever the client desires,What ever the client desires,What ever the client desires,4 (always),2 (sometimes),4 (always),2 (sometimes),3 (very often),Don't know,,0 (never),3 (very often),3 (very often),Don't know,,1 (almost never),2 (sometimes),3 (very often),3 (very often),2 (sometimes),1 (almost never),3 (very often),2 (sometimes),Don't know,,"ROS, ROS 2.0, OROCOS, SmartSoft","Proprietary, Open source","Proprietary, Open source",3 (very often),3 (very often),2 (sometimes),3 (very often),3 (very often),2 (sometimes),2 (sometimes),Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Internal policies, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions","Copy-paste-modify, Systematic reuse (e.g., frameworks, components, libraries, ...), Both equally","We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,2 (sometimes),3 (very often),3 (very often),2 (sometimes),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Systematic analysis,Customer,Don't know,Don't know,Don't know,Don't know,Don't know,DSL are not used to specify the over all mission. ,1 (disagree),2 (neutral),1 (disagree),1 (disagree),2 (neutral),2 (neutral),3 (agree),1 (disagree),1 (disagree),1 (disagree),1 (disagree),Don't know,,"Agile development, and skilled developers",,Hardware,,Industrial practitioner: Leading Technical Role,12,Male,+50
21/06/2019 08:56:29,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Factory automation, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),4 (always),2 (sometimes),4 (always),1 (almost never),4 (always),4 (always),4 (always),Don't know,,Redmine and in-house tools,Word/Excel,"Up to the manager, PowerPoint maybe","Sublime, QT-Creator, PyCharm, Visual Studio Code",Python,"Rostest with gtest and unittest, Gazebo and in-house tools","ROS in general: rosbag, roslaunch, rqt tools and in-house tools","Gitlab, Sublime, QT-Creator",4 (always),2 (sometimes),3 (very often),3 (very often),3 (very often),Don't know,,1 (almost never),0 (never),4 (always),Don't know,,0 (never),2 (sometimes),4 (always),4 (always),0 (never),1 (almost never),2 (sometimes),2 (sometimes),Don't know,,"ROS, ROS 2.0, OROCOS",Open source,Open source,4 (always),4 (always),Don't know,4 (always),4 (always),4 (always),4 (always),Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We follow a precise architecture of the system, We have a clear definition of interfaces of each component, We follow a standard (please specify below)",,4 (always),4 (always),2 (sometimes),4 (always),Don't know,Don't know,,"Simulation, Runtime monitoring",Team based discussion,"Developer, Technically skilled end-user, Integrator",2 (sometimes),0 (never),1 (almost never),3 (very often),Don't know,,3 (agree),0 (strongly disagree),2 (neutral),1 (disagree),0 (strongly disagree),3 (agree),3 (agree),3 (agree),3 (agree),2 (neutral),2 (neutral),Don't know,,"Robustness and dynamic adaptation are hard, the best way to deal with them we found is to create User Acceptance Tests and do a lot of testing in the wild.",Having all the team on the same page (sharing enough information that they all understand inherently why things are done how they are done and how to continue from there) on a complicated robotic platform is very hard,Given real hardware is involved it is harder. Also real world input from sensors is hard too. And robotics that deal with human interaction is even harder cause there is too much unknown factors and situations,"I think the practices are going in the correct direction. More use of Open Source would be good, specially with enterprise giving back to the community",Industrial practitioner: Programmer,6,Male,31-50
24/06/2019 16:39:09,"Mobile robots (i.e., ground robots with navigation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Drones, Underwater robots","Cleaning, Medical, General research on service robots",Planning and orchestration modules,4 (always),2 (sometimes),2 (sometimes),3 (very often),1 (almost never),4 (always),2 (sometimes),2 (sometimes),Don't know,,"Jira, Excel",Excel,PowerPoint,-,-,-,-,-,0 (never),3 (very often),2 (sometimes),3 (very often),2 (sometimes),Don't know,,2 (sometimes),0 (never),3 (very often),Don't know,,2 (sometimes),2 (sometimes),2 (sometimes),2 (sometimes),0 (never),0 (never),0 (never),3 (very often),Don't know,,"ROS, ROS 2.0",Open source,Proprietary,2 (sometimes),3 (very often),2 (sometimes),3 (very often),2 (sometimes),3 (very often),3 (very often),Don't know,,"Lack of documentation, Lack of trust",Copy-paste-modify,We rely on the experience and skills of our team,,4 (always),3 (very often),3 (very often),1 (almost never),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",RCA - Root Cause Anlysis techniques,Non-technical end-user,3 (very often),0 (never),0 (never),0 (never),Don't know,,3 (agree),2 (neutral),4 (strongly agree),4 (strongly agree),4 (strongly agree),3 (agree),4 (strongly agree),3 (agree),3 (agree),2 (neutral),1 (disagree),Don't know,,"Lack of documentation - Generate our own manuals
Safety certifications - Partnership with expert company",Lack of standards - Open to participate in industry associations,"Robotics software needs to integrate many different technologies, while in the past software was produced mainly for controlling one technology and its dedicated electronics. So much higher complexity is foreseen.","Yes, becoming more and more professional and following software development techniques that have proved reliability in other industries (telecommunications and aerospace, I would say). ",Business Development Manager,4,Male,1-10
25/06/2019 19:38:25,"Mobile robots (i.e., ground robots with navigation capabilities), Social Robots","Therapy, care and logistics","Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),2 (sometimes),2 (sometimes),3 (very often),0 (never),0 (never),3 (very often),3 (very often),Don't know,,"Excel, Jira, Teamgant, Salck",Excel,Word,Visual Studio,,,,,3 (very often),3 (very often),1 (almost never),0 (never),Don't know,Don't know,,3 (very often),0 (never),1 (almost never),0 (never),,3 (very often),0 (never),0 (never),3 (very often),0 (never),1 (almost never),0 (never),0 (never),0 (never),,ROS,"Proprietary, Open source",Proprietary,4 (always),4 (always),0 (never),3 (very often),1 (almost never),4 (always),0 (never),0 (never),,,"Systematic reuse (e.g., frameworks, components, libraries, ...)",,,Don't know,3 (very often),3 (very often),Don't know,Don't know,Don't know,,Runtime monitoring,Testing to reproduce the causes of the error,Non-technical end-user,0 (never),0 (never),0 (never),0 (never),4 (always),Written in document editor,4 (strongly agree),2 (neutral),3 (agree),2 (neutral),2 (neutral),2 (neutral),2 (neutral),4 (strongly agree),2 (neutral),0 (strongly disagree),0 (strongly disagree),Don't know,,"For missions, lots of meetings with users/customers. For robustness, testing the system.",,Difficulty of testing in real scenarios with real users.,,CEO,20,Male,1-10
25/06/2019 23:45:13,Industrial arms,Factory automation,"Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),3 (very often),3 (very often),4 (always),3 (very often),4 (always),3 (very often),4 (always),Don't know,,"crux, SIM (simple issue manager), quip",quip,quip,"Visual Studio Code, QT-creator, Smart Git",Jinja,"Google Test, pytest, DART, dartpy, in-house",in-house tool (Robotics Workbench),"Visual Studio Code, QT-creator, Smart Git",3 (very often),1 (almost never),4 (always),3 (very often),2 (sometimes),Don't know,,3 (very often),Don't know,3 (very often),Don't know,,2 (sometimes),1 (almost never),4 (always),4 (always),0 (never),0 (never),0 (never),0 (never),Don't know,,None of them,Open source,Open source,4 (always),4 (always),2 (sometimes),4 (always),4 (always),3 (very often),3 (very often),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We follow a precise architecture of the system, We have a clear definition of interfaces of each component, We follow a standard (please specify below)",,3 (very often),2 (sometimes),2 (sometimes),4 (always),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Debugging,"Developer, Technically skilled end-user, Integrator",Don't know,Don't know,Don't know,Don't know,Don't know,,3 (agree),2 (neutral),3 (agree),3 (agree),3 (agree),4 (strongly agree),2 (neutral),3 (agree),2 (neutral),4 (strongly agree),3 (agree),Don't know,,Transition from simulation to real world applications: Developing high fidelity simulation system & incorporating ML into simulation to overcome the reality gap between simulation model and the real world.,,"dealing with real HWs (robots), which are interdisciplinary systems",,Academic/Scientist,12,Male,+50
26/06/2019 15:55:08,"Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms",Medical,"Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",2 (sometimes),2 (sometimes),2 (sometimes),4 (always),1 (almost never),2 (sometimes),3 (very often),3 (very often),Don't know,,Jira,Confluence,,"IntelliJ, SmartGit",ROS autogen,Gazebo,"rosbag, roslaunch","IntelliJ, SmartGit",2 (sometimes),2 (sometimes),3 (very often),2 (sometimes),1 (almost never),Don't know,,Don't know,Don't know,4 (always),Don't know,,1 (almost never),1 (almost never),4 (always),3 (very often),1 (almost never),0 (never),0 (never),0 (never),Don't know,,ROS,"Proprietary, Open source","Proprietary, Open source",4 (always),4 (always),3 (very often),3 (very often),3 (very often),3 (very often),2 (sometimes),Don't know,,"Licensing issues, Reducing compilation/linking times","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, Other (please specify below)",We have our own framework,3 (very often),1 (almost never),0 (never),3 (very often),0 (never),Don't know,,"Simulation, Runtime monitoring",Mostly debugging,"Technically skilled end-user, Integrator",3 (very often),0 (never),0 (never),0 (never),Don't know,,3 (agree),1 (disagree),2 (neutral),4 (strongly agree),2 (neutral),2 (neutral),2 (neutral),3 (agree),3 (agree),3 (agree),2 (neutral),Don't know,,the ROS ecosystem helps with interoperability; collaborative features of single robots help with robustness etc; the rest is solved by hand,,"robots can modify the environment, even in unexpected ways if they do something wrong","some companies are still too closed with their software, and think that the world spins around their device rather than being friendly to integration",Industrial practitioner: Programmer,6,Male,11-30
26/06/2019 15:56:49,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Drones, Industrial arms","Factory automation, General research on service robots","Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),2 (sometimes),3 (very often),4 (always),1 (almost never),2 (sometimes),4 (always),4 (always),Don't know,,"Notion, Confluence",,,"Clion, pycharm",,Gazebo,Rosbag,,4 (always),2 (sometimes),3 (very often),Don't know,Don't know,Don't know,,0 (never),0 (never),4 (always),0 (never),,Don't know,2 (sometimes),3 (very often),3 (very often),1 (almost never),2 (sometimes),1 (almost never),1 (almost never),Don't know,,ROS,"Proprietary, Open source","Proprietary, Open source",4 (always),3 (very often),3 (very often),3 (very often),3 (very often),1 (almost never),3 (very often),Don't know,,,Copy-paste-modify,We rely on the experience and skills of our team,,2 (sometimes),3 (very often),3 (very often),3 (very often),0 (never),0 (never),,"Manual specification based on experience, Runtime monitoring",Testing,Technically skilled end-user,0 (never),0 (never),0 (never),0 (never),0 (never),,3 (agree),2 (neutral),2 (neutral),2 (neutral),3 (agree),4 (strongly agree),4 (strongly agree),3 (agree),3 (agree),4 (strongly agree),2 (neutral),Don't know,,?,,Longer test cycles,,Industrial practitioner: Leading Technical Role,3,Male,11-30
26/06/2019 16:00:21,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Factory automation, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",3 (very often),1 (almost never),2 (sometimes),4 (always),3 (very often),3 (very often),4 (always),4 (always),Don't know,,Trello,Confluence,UML,"PyCharm, CLion",,"gtest, rostest, in-house simulation","rosbag, roslaunch, etc.","PyCharm, CLion",4 (always),4 (always),Don't know,Don't know,Don't know,Don't know,,0 (never),0 (never),4 (always),0 (never),,1 (almost never),Don't know,4 (always),4 (always),0 (never),0 (never),2 (sometimes),2 (sometimes),4 (always),"Prolog, SBCL",ROS,Open source,Open source,4 (always),4 (always),4 (always),4 (always),4 (always),2 (sometimes),2 (sometimes),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,3 (very often),3 (very often),1 (almost never),2 (sometimes),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",manual debugging,"Developer, Technically skilled end-user",3 (very often),0 (never),0 (never),3 (very often),Don't know,,1 (disagree),3 (agree),4 (strongly agree),4 (strongly agree),3 (agree),2 (neutral),2 (neutral),3 (agree),1 (disagree),0 (strongly disagree),1 (disagree),Don't know,,No answer. This is a confusing question!,,"Robots act in the real-world which introduces all sorts of unexpected error cases that one wants to catch. Software engineering in other domains often feels sandboxy, in comparison.",,Academic/Scientist,10,Male,11-30
26/06/2019 16:05:33,"Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms",Factory automation,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),4 (always),2 (sometimes),4 (always),4 (always),4 (always),4 (always),2 (sometimes),4 (always),Customer Communication,"Jira, GitHub","Jira, Confluence",UML,"EMacs, Visual Studio","in-house tool, em py",in-house tool,in-house tool,"EMacs, Visual Studio",3 (very often),1 (almost never),3 (very often),4 (always),Don't know,Don't know,,0 (never),0 (never),4 (always),0 (never),,0 (never),2 (sometimes),3 (very often),3 (very often),2 (sometimes),2 (sometimes),0 (never),0 (never),2 (sometimes),tcl,"ROS 2.0, in house","Proprietary, Open source","Proprietary, Open source",Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,,"Licensing issues, Internal policies, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions",Copy-paste-modify,"We rely on the experience and skills of our team, We follow a precise architecture of the system",,1 (almost never),2 (sometimes),0 (never),4 (always),3 (very often),Don't know,We run static analysis tools such as PVS Studio,"Manual specification based on experience, Simulation, Runtime monitoring","Log Files, Simulation, Asserts, core files","Developer, Non-technical end-user, Technically skilled end-user, Integrator",Don't know,Don't know,Don't know,Don't know,Don't know,,3 (agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),3 (agree),4 (strongly agree),2 (neutral),3 (agree),4 (strongly agree),0 (strongly disagree),0 (strongly disagree),4 (strongly agree),Legacy Code,I'm not sure how to answer this,"Modular, sustainable code",It often requires a deep understanding of hardware and sensor limitations that software engineers typically can ignore.,"Yes. I think that technical debt should be acknowledged as a more important issue than most places see it as. It is critical to keep up with competition, and they start with the large advantage of software like ROS 2, and I find companies are too hesitant to push for change.",Industrial practitioner: Programmer,8,Male,+50
26/06/2019 16:05:46,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Underwater robots",General research on service robots,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),3 (very often),3 (very often),4 (always),0 (never),2 (sometimes),2 (sometimes),3 (very often),Don't know,,"Trello, Asana, GitHub issues","Word, Excel",,VS Code,N/A,"Gazebo, custom simulator","ROS - rosbag, roslaunch, robot_bringup, etc",VS Code,4 (always),2 (sometimes),3 (very often),1 (almost never),0 (never),Don't know,,Don't know,Don't know,Don't know,Don't know,,0 (never),4 (always),4 (always),3 (very often),3 (very often),0 (never),0 (never),0 (never),0 (never),,"ROS, ROS 2.0",Open source,Open source,2 (sometimes),2 (sometimes),Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,2 (sometimes),2 (sometimes),0 (never),4 (always),0 (never),0 (never),,"Manual specification based on experience, Simulation, Runtime monitoring","GDB, Valgrind, debug diagnosing messages, etc",Developer,3 (very often),0 (never),2 (sometimes),0 (never),0 (never),,3 (agree),4 (strongly agree),3 (agree),3 (agree),2 (neutral),2 (neutral),3 (agree),4 (strongly agree),3 (agree),4 (strongly agree),3 (agree),Don't know,,N/A,,More application of physics and math,,Academic/Scientist,6,Male,
26/06/2019 16:14:37,"Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms",Factory automation,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",4 (always),4 (always),4 (always),4 (always),1 (almost never),3 (very often),4 (always),4 (always),Don't know,,"Trello, OpenProject, TeamFoundationServer, ScrumBoard",Word,PowerPoint,"atom, PyCharm, QT-creator",,"rostest, inhouse-simulation","roslaunch, rosbag",,3 (very often),2 (sometimes),4 (always),1 (almost never),Don't know,Don't know,,1 (almost never),1 (almost never),3 (very often),Don't know,,1 (almost never),2 (sometimes),3 (very often),4 (always),0 (never),0 (never),4 (always),0 (never),Don't know,,"ROS, OROCOS","Proprietary, Open source","Proprietary, Open source",1 (almost never),3 (very often),4 (always),4 (always),4 (always),4 (always),Don't know,Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions",Both equally,"We rely on the experience and skills of our team, We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,1 (almost never),4 (always),1 (almost never),4 (always),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",dig deep,"Developer, Technically skilled end-user",Don't know,Don't know,Don't know,4 (always),Don't know,,3 (agree),3 (agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),2 (neutral),2 (neutral),3 (agree),4 (strongly agree),4 (strongly agree),Don't know,,i dont know,,"connection between SW and real motion, that might cause harm if something goes wrong",,Industrial practitioner: Leading Technical Role,10,Male,+50
26/06/2019 16:41:51,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities)","Cleaning, Transportation, Medical","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",4 (always),4 (always),3 (very often),2 (sometimes),2 (sometimes),2 (sometimes),4 (always),3 (very often),Don't know,,Jira/Redmine,,Visio,"All mentioned above, except Visual Studio","Codegen mostly for language bindings, like SWIG. And codegen for message serialization (rosmsg, rosserial, protobuf, ...)",stage/stageros,all mentioned above,,2 (sometimes),3 (very often),3 (very often),2 (sometimes),Don't know,Don't know,,2 (sometimes),3 (very often),3 (very often),Don't know,,Don't know,2 (sometimes),4 (always),3 (very often),1 (almost never),Don't know,Don't know,Don't know,3 (very often),,ROS,"Proprietary, Open source","Proprietary, Open source",3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),2 (sometimes),2 (sometimes),Don't know,,"Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Both equally,"We have a clear definition of interfaces of each component, We follow a standard (please specify below)",ROS provides quite a good set of standard messages,2 (sometimes),3 (very often),3 (very often),2 (sometimes),Don't know,2 (sometimes),Integration tests through running situations in stagesim,"Simulation, Runtime monitoring, Public rosbag and similar datasets",Divide&conquer + expertise,"Technically skilled end-user, Integrator",3 (very often),Don't know,Don't know,Don't know,Don't know,,3 (agree),1 (disagree),1 (disagree),1 (disagree),3 (agree),4 (strongly agree),3 (agree),4 (strongly agree),4 (strongly agree),2 (neutral),2 (neutral),Don't know,,There is no silver bullet. ,,Mixed software+hardware projects are always more complex than a project in a single domain. Robotic projects just have more different domains inside.,"We need more software developers/software designers/UI engineers. Even core robotics projects (like ROS/osrf) are absolutely understaffed, especially in comparison with a regular software companies. ",Industrial practitioner: Leading Technical Role,8 years,Male,1-10
26/06/2019 17:05:48,"Mobile robots (i.e., ground robots with navigation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Modular/reconfigurable robots",Education and maker community,"Complete robotic system (e.g., BOSCH's lawnmower)",2 (sometimes),2 (sometimes),1 (almost never),3 (very often),2 (sometimes),3 (very often),4 (always),3 (very often),Don't know,,Asana,Asana,"UML in tikzUML, draw.io, Google Drawings",VS Code and Atmel Studio 7,Atmel ASF Wizard,"Python, Arduino","Fable Blockly, Python scripting","VS Code, Atmel Studio 7",3 (very often),1 (almost never),Don't know,Don't know,Don't know,Don't know,,0 (never),4 (always),1 (almost never),Don't know,,Don't know,4 (always),Don't know,4 (always),2 (sometimes),Don't know,Don't know,Don't know,Don't know,,Proprietary,Open source,Proprietary,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,"I don’t understand the question, sorry.","Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,1 (almost never),3 (very often),2 (sometimes),2 (sometimes),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring","Atmel ICE debugging tool, Python exceptions","Non-technical end-user, Technically skilled end-user",Don't know,Don't know,Don't know,4 (always),Don't know,,4 (strongly agree),1 (disagree),4 (strongly agree),4 (strongly agree),Don't know,Don't know,Don't know,3 (agree),Don't know,3 (agree),4 (strongly agree),Don't know,,Time and money,,You have to be able to operate within many different domains and levels of abstraction. For example developing a speed controller for at DC motor on an embedded system and then jump to the high-level program that utilizes the developed hardware (in python or other object oriented language).,,Electrical Engineering,4,Male,11-30
26/06/2019 17:20:31,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms","Cleaning, Transportation, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",3 (very often),2 (sometimes),2 (sometimes),4 (always),0 (never),3 (very often),4 (always),4 (always),Don't know,,"gogs, redmine, github, jira",text editor,white boards and a pen,"vim, clang-format",NONE. DON'T.,"moveit demo mode, gazebo, gtest",??? The question is to general to reply,"vim, github/gogs/gitlab issue tracking",4 (always),1 (almost never),4 (always),2 (sometimes),Don't know,Don't know,,0 (never),2 (sometimes),4 (always),Don't know,,0 (never),2 (sometimes),4 (always),4 (always),0 (never),0 (never),0 (never),0 (never),4 (always),"bash, cmake, sed, ...",ROS,Open source,Open source,3 (very often),1 (almost never),2 (sometimes),4 (always),4 (always),2 (sometimes),1 (almost never),Don't know,,,"Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,3 (very often),4 (always),4 (always),2 (sometimes),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",genuine insight into the overall system and all components. The question is too general to answer.,"Developer, Non-technical end-user, Technically skilled end-user",Don't know,Don't know,Don't know,Don't know,Don't know,,1 (disagree),2 (neutral),2 (neutral),2 (neutral),3 (agree),4 (strongly agree),2 (neutral),4 (strongly agree),4 (strongly agree),4 (strongly agree),2 (neutral),Don't know,,Too general to answer.,Expert programmers attitude on self-written logic and low-level workarounds instead of upstream fixes.,"The problem is not in specifying the software architecture in formal methods.
Most setups do not get to a complexity where this is really a problem.
The problem is in grounding the abstract idea in actual hardware.","(1) Stop reinventing the wheel
(2) Fix upstream bugs instead of working around them",Academic/Scientist,5,Prefer not to say,+50
26/06/2019 17:59:05,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Agriculture, Defense, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",2 (sometimes),1 (almost never),2 (sometimes),4 (always),3 (very often),3 (very often),3 (very often),3 (very often),Don't know,,,,,"Eclipse, Visual Studio Code, PyCharm",,,multimaster_fkie,"Eclipse, Visual Studio Code,PyCharm",4 (always),1 (almost never),2 (sometimes),Don't know,Don't know,Don't know,,0 (never),0 (never),2 (sometimes),Don't know,,0 (never),2 (sometimes),3 (very often),3 (very often),1 (almost never),2 (sometimes),0 (never),0 (never),Don't know,,ROS,Open source,"Proprietary, Open source",3 (very often),3 (very often),Don't know,3 (very often),2 (sometimes),2 (sometimes),1 (almost never),Don't know,,"Lack of trust, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions",Both equally,"We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,3 (very often),3 (very often),2 (sometimes),2 (sometimes),0 (never),Don't know,,"Simulation, Runtime monitoring",Retrospective project analysis,"Non-technical end-user, Technically skilled end-user",3 (very often),0 (never),0 (never),0 (never),Don't know,,1 (disagree),2 (neutral),4 (strongly agree),1 (disagree),4 (strongly agree),3 (agree),0 (strongly disagree),3 (agree),3 (agree),3 (agree),3 (agree),Don't know,,"We are a research facility, which makes these challenges part of our job",,Complex and unforeseeable interactions with the real world,,Academic/Scientist,18,Male,+50
26/06/2019 21:29:48,"Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Drones, Industrial arms","Factory automation, Defense",Planning and orchestration modules,4 (always),4 (always),4 (always),4 (always),0 (never),4 (always),3 (very often),3 (very often),Don't know,,Jira,"DOORS, Confluence, Jira",UML,Visual Studio Code,None,"Gazebo, GTest","roslaunch, rosbag",Visual Studio Code,4 (always),0 (never),1 (almost never),2 (sometimes),Don't know,Don't know,,Don't know,Don't know,4 (always),Don't know,,2 (sometimes),2 (sometimes),4 (always),4 (always),2 (sometimes),0 (never),0 (never),0 (never),Don't know,,ROS,Open source,"Proprietary, I open the source of my self projects. The projects those belong to my company have proprietary license.",1 (almost never),2 (sometimes),3 (very often),4 (always),4 (always),4 (always),1 (almost never),Don't know,,Favouring self-developed solutions,"Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,4 (always),3 (very often),2 (sometimes),3 (very often),0 (never),0 (never),,"Simulation, Runtime monitoring","Debugging in Simulation, Logging in Real-time",Developer,0 (never),0 (never),0 (never),0 (never),4 (always),"Missions are not structured software components in my projects, but rather states in a universal State Machine.",3 (agree),0 (strongly disagree),3 (agree),3 (agree),2 (neutral),1 (disagree),0 (strongly disagree),1 (disagree),2 (neutral),1 (disagree),1 (disagree),0 (strongly disagree),,"As I stated in a previous question, missions are ""states"". For instance, they are recognized by a certain event in the system and represented by an enum. Therefore, they are not injected via another file such as XML or any type of DSL; but carefully implemented by developer.

Lack of documentation sometimes stalls the development pace, if a brand new topic is being explored.

Lack of standards is the most challenging problem. Every single firmware provider implement their own rules on a globally applicable condition. Take Coordinate Systems for instance. If one uses several different hardware units, each having their own ""special"" coordinate system (LHS, RHS), affine transformations are not sufficient to easily convert among them, which consequently ends up in a great confussion.",Continuous Hardware In the Loop Testing.,"Software engineering in other domains is much more deterministic with respect to RSE. Two components that are proven to work coherently would much probably not create a problem in the future when installed to a target machine. However, that ""proof"" demands way more effort in Robotics since the environment is very complex and the robots are embodied agents. They also change the environment itself via actions. Covering all these cases might be intractable in certain scenarios.","Well, I think it is not a simple yes/no question. Are they subject to change? Yes, definitely. However the way it changes would be certainly dissimilar to those of other domains. I think in that way, because although the mega companies have entered the domain; they adapt the existing RSE practices instead of changing them with their enormous experience from their original domains. Nonetheless, there are continuing endeavors that are attempting to change/improve them.

As I'm more of a ""orthodox"" guy, I don't want big changes. Professionally speaking, of course they should change to some extent but this must not be radical. ",Industrial practitioner: Programmer,2,Male,+50
26/06/2019 22:29:39,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms","Factory automation, production of large parts (aerospace)","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, intermediate level algorithms",3 (very often),2 (sometimes),2 (sometimes),4 (always),2 (sometimes),3 (very often),4 (always),3 (very often),Don't know,,"asana, gitlab issue tracker",not involved in this,,any IDE suitable for the task / programming language,"custom code generators, middleware message generators (DDS IDL), etc","pure testing: xUnit frameworks, physics based simulators, OEM provided simulators, any and all ROS tools and packages",any and all ROS tools and packages,for systems/tools with sufficient (regression) tests available same tools as for implementation,3 (very often),1 (almost never),3 (very often),2 (sometimes),1 (almost never),Don't know,,0 (never),3 (very often),2 (sometimes),Don't know,,2 (sometimes),3 (very often),3 (very often),3 (very often),2 (sometimes),2 (sometimes),Don't know,2 (sometimes),Don't know,,"ROS, ROS 2.0, OROCOS","Proprietary, Open source","Proprietary, Open source",3 (very often),2 (sometimes),2 (sometimes),4 (always),3 (very often),2 (sometimes),2 (sometimes),Don't know,,"Lack of documentation, Lack of trust, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We follow a standard (please specify below)",ROS/ROS2/OROCOS have (often sufficiently) standard(ised) interfaces,3 (very often),3 (very often),2 (sometimes),2 (sometimes),0 (never),Don't know,,"Manual specification based on experience, Simulation",Mostly experience and lots of debugging,"Developer, Technically skilled end-user",3 (very often),1 (almost never),2 (sometimes),Don't know,Don't know,,3 (agree),3 (agree),3 (agree),3 (agree),3 (agree),3 (agree),3 (agree),3 (agree),3 (agree),3 (agree),3 (agree),Don't know,,-,"there are very few solved problems, so best practices are hard to find.

There is also a special kind of bit-rot in robotics software engineering where the electromechanical part of the system has evolved, but software has not been kept up-to-date. In isolation, the software would be fine, but it's no longer usable with the actual system, as that has changed, and because of that, has invalidated all/some of the implicit assumptions about the hw it is to be used with.","it's uniquely and heavily embedded, with complex and dynamic interactions with hw and with the environment.

Functional and non-functional requirements can be all over the place.

Almost no solved problems.

It's a huge software integration problem (mess almost).

Real-time requirements complicating component based work (how is this component going to affect my scheduling?)

Software is always in a state of flux.

Huge amount of developers with hugely different backgrounds (ie: untrained in any software engineering).

Software is not the goal at all. It's only an executable form of robotics theories and algorithms.

and so on.","yes: ideally we all move to MDE, but that is probably unrealistic. ",a little bit of all of the above,7,,1-10
27/06/2019 08:24:12,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body)","Cleaning, Medical, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",1 (almost never),0 (never),2 (sometimes),Don't know,4 (always),Don't know,4 (always),4 (always),Don't know,,"Redmine, gitlab",,,"VIM,IntelliJ,vscode",in-house,"Gazebo,JUnit,gtest,in-house","roslaunch,vdemo,hyperion","VIM,IntelliJ,vscode,gitlab",3 (very often),2 (sometimes),4 (always),2 (sometimes),1 (almost never),Don't know,,1 (almost never),1 (almost never),4 (always),3 (very often),,3 (very often),2 (sometimes),4 (always),3 (very often),1 (almost never),1 (almost never),2 (sometimes),2 (sometimes),Don't know,,"ROS, OROCOS",Open source,Open source,4 (always),4 (always),3 (very often),4 (always),4 (always),3 (very often),1 (almost never),Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Internal policies, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions",Both equally,We have a clear definition of interfaces of each component,,3 (very often),4 (always),1 (almost never),1 (almost never),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",RCA,"Developer, Technically skilled end-user",4 (always),0 (never),1 (almost never),2 (sometimes),Don't know,,3 (agree),1 (disagree),2 (neutral),2 (neutral),1 (disagree),2 (neutral),4 (strongly agree),3 (agree),3 (agree),1 (disagree),1 (disagree),Don't know,,"Turn the challenges into the goal, e.g. half of 2017 we tried to only increase the robustness of various tasks instead of adding functionality ",,"Requires more integration, knowledge over various domains- e.g. service robot uses state of the art research from multiple disciplines in addition to somehow use them to produce complicated behavior",,Academic/Scientist,5,Male,+50
27/06/2019 09:00:26,"Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms","General research on service robots, Manipulation Research","Low-level functionalities (e.g., navigation, self-localisation)",0 (never),0 (never),0 (never),4 (always),0 (never),1 (almost never),3 (very often),1 (almost never),0 (never),,,,,"Atom, Vim, ROS, Git",,"Gazebo, custom simulators","rosbag, roslaunch, rqt",,4 (always),0 (never),2 (sometimes),2 (sometimes),0 (never),0 (never),,3 (very often),0 (never),0 (never),0 (never),,0 (never),1 (almost never),3 (very often),3 (very often),0 (never),0 (never),0 (never),1 (almost never),0 (never),,"ROS, OROCOS",Open source,Open source,4 (always),1 (almost never),2 (sometimes),3 (very often),3 (very often),0 (never),0 (never),0 (never),,,"Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We have a clear definition of interfaces of each component, We follow a standard (please specify below)",ROS facilitates interoperability to a significant degree.,1 (almost never),3 (very often),0 (never),0 (never),0 (never),0 (never),,"Simulation, Runtime monitoring","On a first step, in simulation, bugs and non-intended behavior is traced with GDB + defining integration tests. On a real system, most causes of failure are hardware related, which introduces non-modeled effects which are crucial to the systems performance.","Developer, Integrator",2 (sometimes),0 (never),3 (very often),0 (never),0 (never),,3 (agree),4 (strongly agree),4 (strongly agree),1 (disagree),3 (agree),4 (strongly agree),1 (disagree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),Don't know,,"As we work mostly on research, fully integrated robotic systems are seldom developed. When addressing a component problem, it is frequent that the major issues go unaddressed, or are address only to the point where we can demonstrate the component in a proof-of-concept fashion. It is often in robotics that the component works 'to a point' isolatedly, but it is close to impossible to incorporate it in a system without major changes to its implementation.","Integration of different components is *always* underestimated as a challenge. Often it is not possible to develop modules in isolation until a later point in development when things are integrated. Nevertheless, I feel that this happens very frequently, even among experienced robotics developers.","The need for experimentation on a real system adds a whole new level of challenge: it is not the same to develop algorithms for a simulator, where available state information is often idealized, versus trying to develop an autonomous system. Data logging and the necessity for quick experimentation are frequently major and underestimate challenges.",,Academic/Scientist,5,Male,11-30
27/06/2019 09:20:37,"Bimanual, multi-fingered hands, 7DoF arms",Research,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),3 (very often),4 (always),4 (always),2 (sometimes),4 (always),4 (always),4 (always),Don't know,,"github, redmine",wiki,"wiki, UML","qtcreator, pycharm",JetBrains MPS,"gtest (C++), nosetests (python)",For data recording / for orchestration / for what?,git,3 (very often),2 (sometimes),3 (very often),2 (sometimes),1 (almost never),Don't know,,Don't know,Don't know,Don't know,Don't know,,1 (almost never),Don't know,4 (always),4 (always),2 (sometimes),2 (sometimes),2 (sometimes),1 (almost never),Don't know,,"ROS, OROCOS","Proprietary, Open source",Open source,4 (always),4 (always),4 (always),4 (always),4 (always),4 (always),4 (always),Don't know,,"Lack of documentation, Lack of Software Quality","Systematic reuse (e.g., frameworks, components, libraries, ...)","We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,4 (always),3 (very often),2 (sometimes),2 (sometimes),0 (never),4 (always),Continuous Integration,Simulation,Debugging,Proposal writer,2 (sometimes),Don't know,Don't know,Don't know,3 (very often),"A (manually coded) HSM encodes the (growing) set of skills, from which we chose on-the-fly at runtime.",Don't know,3 (agree),2 (neutral),2 (neutral),3 (agree),3 (agree),1 (disagree),3 (agree),3 (agree),2 (neutral),1 (disagree),Don't know,,Research + Engineering!,,"Handle hardware issues, failures, real-world uncertainty...",,Academic/Scientist,,Male,11-30
27/06/2019 09:46:06,"Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms","Factory automation, Medical","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation)",0 (never),1 (almost never),2 (sometimes),4 (always),1 (almost never),2 (sometimes),4 (always),2 (sometimes),Don't know,,"Mainly small project, email comunication",paper,paper,"qt-creator, pycharm",in house lua,unit testing. i do not believe in simulating physical interaction,"orocos-lua, rosbag for data storing (has to change because is not efficient) ros in general for GUI and integration with other","QT-creator, pycharm",4 (always),3 (very often),3 (very often),2 (sometimes),0 (never),Don't know,,3 (very often),1 (almost never),0 (never),Don't know,,Don't know,3 (very often),4 (always),4 (always),0 (never),1 (almost never),2 (sometimes),0 (never),4 (always),Lua,"ROS, OROCOS, microblx",Open source,Open source,3 (very often),3 (very often),2 (sometimes),2 (sometimes),3 (very often),1 (almost never),1 (almost never),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Address specific problem","Systematic reuse (e.g., frameworks, components, libraries, ...)","We have a clear definition of interfaces of each component, Other (please specify below)",Produce clear documentation,3 (very often),2 (sometimes),1 (almost never),1 (almost never),0 (never),Don't know,,"Manual specification based on experience, Runtime monitoring",unit testing and run time monitoring - introspection of components,Technically skilled end-user,0 (never),1 (almost never),0 (never),2 (sometimes),Don't know,,3 (agree),2 (neutral),4 (strongly agree),4 (strongly agree),3 (agree),3 (agree),4 (strongly agree),2 (neutral),1 (disagree),Don't know,2 (neutral),Don't know,,"For lack of documentation - look at code, safety and standards are unresolved now, For Interoperability - try to define a model (often not so formal, depending of partners) of data exchange and schedulability. Validation is done by experimenting. as we work with physical contact, the effort in making an accurate simulation is too big, and is better to go on experiment on the real system.  ","For me, the problems are related the modling is lacking and is difficult to enforce a modeling principle because the level of granularity differs a lot depending by what you are interested. other problem is that all these framework are very bad in composition and scalability. a system with a decent complexity is very difficult to inspect, and so isolating a bug/fault becomes very complex.","software policies are strictly related with a) hardware b)physical interaction - so time becomes important c) unstructured environment. this makes very difficult to foresee all the possible shortcoming. for the rest, the size of project are often smaller and less data-dependent w.r.t. other fields.","I think that most of the programmers in robotics comes from the self-taught ROS-fan community, that learned to program in ros, thinking that this IS programming. this is a tragedy :) People that approach to programming, should have a more software engineering approach. i think that modelling and code co-generation is a good approach. The important thing is that at least people should draft on paper what they want to achieve before start writing the code. let's say that before speaking about best practice, we should get to a good practice.",Academic/Scientist,15,Male,+50
27/06/2019 11:56:57,"Humanoid robots (i.e., a robot with its body shape built to resemble the human body)",General research on service robots,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Complete robotic system (e.g., BOSCH's lawnmower), YARP Robotic Middleware/Framework",2 (sometimes),Don't know,2 (sometimes),4 (always),2 (sometimes),2 (sometimes),2 (sometimes),3 (very often),Don't know,,"Redmine, github, zenhub",,PowerPoint,"Visual studio, clion, qtcreator","Swig, thrift","Catch, Ctest",,"Visual studio, clion, qtcreator, clang-tidy",4 (always),1 (almost never),2 (sometimes),2 (sometimes),0 (never),Don't know,,0 (never),0 (never),2 (sometimes),Don't know,,4 (always),4 (always),4 (always),2 (sometimes),2 (sometimes),2 (sometimes),0 (never),0 (never),Don't know,,"ROS, Yarp",Open source,Open source,2 (sometimes),2 (sometimes),0 (never),2 (sometimes),0 (never),2 (sometimes),2 (sometimes),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Both equally,We rely on the experience and skills of our team,,2 (sometimes),2 (sometimes),0 (never),3 (very often),Don't know,Don't know,,Manual specification based on experience,Lack of appropriate unit tests,Principal Investigator,Don't know,Don't know,Don't know,Don't know,Don't know,,4 (strongly agree),3 (agree),4 (strongly agree),4 (strongly agree),3 (agree),3 (agree),2 (neutral),2 (neutral),2 (neutral),3 (agree),2 (neutral),Don't know,, Validating the robotic system - define a standard set of test the robot or middleware has to be compliant,,In robotics the software engineering is challenged by the lack of standards and guideline in the development. Moreover often software development is an accessory task and not the main task of robotics projects,,Programmer in Research Institute,3 years,Male,+50
27/06/2019 13:17:51,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms","Factory automation, Transportation","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),3 (very often),3 (very often),4 (always),1 (almost never),2 (sometimes),3 (very often),3 (very often),Don't know,,"Trello, gitlab, zoho",google drive,google drive,atom,,gazebo,roslaunch,"atom, gitlab",4 (always),0 (never),1 (almost never),2 (sometimes),2 (sometimes),Don't know,,Don't know,Don't know,Don't know,Don't know,,0 (never),1 (almost never),3 (very often),2 (sometimes),0 (never),1 (almost never),0 (never),2 (sometimes),Don't know,,ROS,"Proprietary, Open source","Proprietary, Open source",3 (very often),3 (very often),2 (sometimes),3 (very often),3 (very often),2 (sometimes),1 (almost never),Don't know,,"Lack of documentation, Lack of trust, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions",Both equally,"We rely on the experience and skills of our team, We follow a standard (please specify below)",,1 (almost never),3 (very often),2 (sometimes),4 (always),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",lack of experience,"Developer, Non-technical end-user, Technically skilled end-user",2 (sometimes),2 (sometimes),0 (never),2 (sometimes),Don't know,,3 (agree),3 (agree),3 (agree),3 (agree),3 (agree),3 (agree),3 (agree),4 (strongly agree),4 (strongly agree),3 (agree),3 (agree),Don't know,,learn,,"Basic science knowledge is needed (mehcanics, physics, etc.)",,Industrial practitioner: Leading Technical Role,7,Male,1-10
27/06/2019 14:40:07,"Mobile robots (i.e., ground robots with navigation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Factory automation, Agriculture, Cleaning, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",2 (sometimes),3 (very often),4 (always),4 (always),0 (never),3 (very often),3 (very often),1 (almost never),Don't know,,Gitlab,markdown and in-house tool,markdown and in-house tool,Visual Studio Code,,"Gazebo, Stage, in-house tools","rosbag, roslaunch",,3 (very often),2 (sometimes),2 (sometimes),2 (sometimes),2 (sometimes),Don't know,,3 (very often),0 (never),3 (very often),Don't know,,Don't know,3 (very often),3 (very often),3 (very often),1 (almost never),1 (almost never),0 (never),1 (almost never),3 (very often),Rust,"ROS, ROS 2.0",Open source,"Proprietary, Open source",3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),1 (almost never),1 (almost never),Don't know,,"Lack of trust, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We have a clear definition of interfaces of each component,,3 (very often),2 (sometimes),1 (almost never),1 (almost never),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",replicate issue in simulation or capture databag of the issue then swap components to find the failing one,Technically skilled end-user,Don't know,Don't know,Don't know,4 (always),Don't know,,1 (disagree),2 (neutral),1 (disagree),3 (agree),1 (disagree),3 (agree),4 (strongly agree),3 (agree),3 (agree),1 (disagree),2 (neutral),Don't know,,getting help from specialized companies,,Robotics involves highly complex yet safety critical software requiring high performance and low latency which is a lot of challenging requirements mixed together,Getting away to C and C++ for languages such as Rust will provide more robustness,Industrial practitioner: Leading Technical Role,4,Male,1-10
27/06/2019 18:25:41,"Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","General research on service robots, social robots ",high level applications,4 (always),2 (sometimes),4 (always),4 (always),0 (never),3 (very often),4 (always),4 (always),Don't know,,"Jira, Confluence",Jira,,"intelliJ, Android Studio",,"JUnit, Espresso",,"intelliJ, Android Studio",4 (always),0 (never),4 (always),Don't know,2 (sometimes),Don't know,,0 (never),0 (never),4 (always),0 (never),,3 (very often),0 (never),0 (never),3 (very often),0 (never),0 (never),0 (never),0 (never),3 (very often),kotlin,ROS,"Proprietary, Open source",Proprietary,2 (sometimes),3 (very often),3 (very often),3 (very often),3 (very often),2 (sometimes),2 (sometimes),Don't know,,"Lack of documentation, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), old/outdated code, incompatibilities with newer platforms",Both equally,,,3 (very often),3 (very often),3 (very often),4 (always),Don't know,Don't know,,"Manual specification based on experience, Runtime monitoring","logging, debugging","Developer, Non-technical end-user, Technically skilled end-user, Scrum team formed by developers, and both technically skilled and non-skilled members and end-users from the organization and from the customer side",1 (almost never),Don't know,Don't know,Don't know,Don't know,,4 (strongly agree),2 (neutral),4 (strongly agree),4 (strongly agree),3 (agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),3 (agree),3 (agree),Don't know,,"Specifying missions: iterative development process, lack of documentation and standards: prefer robust well-documented stablished software components, robustness and dynamic adaptation: real-world situations testing with focus a on what could go wrong and most possible outcomes for correct error handling",,"The community is smaller as in other domains and the software and practices are usually platform-specific which makes it hard to share them. Also, because of the high interaction with the real physical world in many ways introducing many variable conditions exhaustive testing is harder than in other domains",,Industrial practitioner: Programmer,15 years (3 years professionally),Female,+50
27/06/2019 20:50:00,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities)",Robot contests. Eurobot.,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",3 (very often),3 (very often),3 (very often),3 (very often),1 (almost never),3 (very often),3 (very often),1 (almost never),Don't know,,Spreadsheet,Spreadsheet,Día diagram,"Mplab, Atom, Gedit",Python,Python,Python,Atom,4 (always),3 (very often),3 (very often),2 (sometimes),2 (sometimes),Don't know,,4 (always),Don't know,2 (sometimes),Don't know,,Don't know,4 (always),1 (almost never),4 (always),0 (never),2 (sometimes),0 (never),0 (never),Don't know,,Aversive,Open source,Open source,4 (always),4 (always),4 (always),4 (always),4 (always),4 (always),4 (always),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Very specific components","Systematic reuse (e.g., frameworks, components, libraries, ...)","We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,4 (always),4 (always),Don't know,2 (sometimes),0 (never),Don't know,,Simulation,Logs analysis,Robotic contest organisation,4 (always),Don't know,Don't know,Don't know,Don't know,,3 (agree),3 (agree),4 (strongly agree),2 (neutral),2 (neutral),4 (strongly agree),2 (neutral),4 (strongly agree),4 (strongly agree),4 (strongly agree),3 (agree),Don't know,,"Test, reverse engineering, research",,Software engineering implies multiple disciplines knowledge and application,Yes I do. It will move to more abstract levels and complex applications,Hardware and firmware engineer,18,Male,+50
28/06/2019 08:04:58,"Mobile robots (i.e., ground robots with navigation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body)",General research on service robots,Testing system,2 (sometimes),2 (sometimes),4 (always),4 (always),0 (never),4 (always),4 (always),4 (always),Don't know,,,,UML,Visual studio code,,Gazebo,yarp,git,4 (always),0 (never),0 (never),0 (never),0 (never),Don't know,,Don't know,Don't know,Don't know,4 (always),None,Don't know,Don't know,4 (always),Don't know,3 (very often),Don't know,Don't know,Don't know,Don't know,,Yarp,Open source,Open source,4 (always),Don't know,Don't know,4 (always),Don't know,Don't know,Don't know,Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,3 (very often),3 (very often),2 (sometimes),3 (very often),4 (always),Don't know,cppcheck,Simulation,debugging and logging,"Developer, Technically skilled end-user",4 (always),Don't know,Don't know,Don't know,Don't know,,Don't know,4 (strongly agree),Don't know,Don't know,Don't know,4 (strongly agree),Don't know,4 (strongly agree),Don't know,4 (strongly agree),Don't know,Don't know,,Reuse-> use OOP programming and library division,,no,Yes. More test culture is needed,Industrial practitioner: Programmer,2,Male,+50
28/06/2019 09:23:44,"Mobile robots (i.e., ground robots with navigation capabilities)","Transportation, General research on service robots","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",4 (always),3 (very often),3 (very often),4 (always),3 (very often),3 (very often),3 (very often),3 (very often),4 (always),,"JIRA, In-house tool","JIRA, Excel","Markdown + PlantUML or Mermaid, Enterprise Architect","Visual studio code, Atom, Eclipse, QT creator","Matlab, xtext, Jetbrains MPS","GTest, Gazebo","rosbag, roslaunch, optitrack, in-house tools","Visual studio code, Atom, Eclipse, QT creator",3 (very often),2 (sometimes),4 (always),3 (very often),2 (sometimes),Don't know,,2 (sometimes),2 (sometimes),3 (very often),Don't know,,1 (almost never),3 (very often),3 (very often),3 (very often),3 (very often),2 (sometimes),2 (sometimes),2 (sometimes),Don't know,,"ROS, ROS 2.0",Open source,"Proprietary, Open source",3 (very often),3 (very often),1 (almost never),2 (sometimes),3 (very often),3 (very often),3 (very often),Don't know,,"Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,3 (very often),3 (very often),2 (sometimes),3 (very often),1 (almost never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring","Systematic analysis, 5-Why, data replay and analysis, minimal test-cases","Developer, Technically skilled end-user, Integrator",3 (very often),1 (almost never),2 (sometimes),3 (very often),Don't know,,4 (strongly agree),3 (agree),3 (agree),3 (agree),4 (strongly agree),3 (agree),4 (strongly agree),3 (agree),4 (strongly agree),3 (agree),3 (agree),3 (agree),"deterministic execution, timestamping, clock synchronization","Robot mission specification: Own frameworks, DSLs, ontologies
Interoperability between homogeneous components: Documentation of non-functional properties
Validation of robotic system: Continuous system-level testing by simulation
Dynamic adaptation of robot behavior: Model-based management of system states and error handling
Deterministic execution: Own execution management mechanisms
","In the last years, I observed lot of unification with regard to frameworks concepts (by ROS, OROCOS, …), robotic software tooling, and on the skills layer (MoveIT, CARTAGROPHER, nav_stack, …). However, I do not observe such unification for deliberation. One indication is the large number of DSLs in the category capability building listed in http://corlab.github.io/dslzoo/ 
This challenge comprises a number of aspects, including
- reuseable concepts for modeling the robot and world state (languages, ontologies, modeling patterns)
- representations of missions and tasks (behavior trees are a new player in robotics since a few years)
- integration of machine-learning-based methods with classical AI (e.g., PDDL, symbolic reasoning)
amongst others.
This challenge relates to several research fields, not only software engineering, of course. However, I believe that formal methods, modeling languages, DSLs, execution management, programming paradigms, … can play a crucial role here.
","I will not discuss the well-known big differences between pure software systems and cyber-physical systems here. My thoughts on the specific differences between robotics and typical embedded and cyber-physical system (CPS):
-	Higher autonomy, more decision making and planning
-	More flexibility for interacting with the world
-	More generic perception capabilities
-	More advanced and computationally intensive algorithms (for perception and planning)
Some resulting specific challenges for robotic software engineering:
-	Models and reasoning technics for this autonomy (including some self-awareness of the robotic system) and corresponding techniques for validation and verification
-	Validation of perception algorithms, given their very generic applicability
-	Integration of computationally very heterogeneous algorithms on one computing platform

","- More use of system-level simulation techniques
- More use of formal modeling methods on the system-level and use of such models at runtime",Industrial practitioner: Leading Technical Role,5,Male,+50
28/06/2019 14:04:08,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms",Factory automation,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",1 (almost never),2 (sometimes),3 (very often),4 (always),1 (almost never),3 (very often),3 (very often),2 (sometimes),Don't know,,yodiz,,PowerPoint,atom,,rostest,roslaunch,atom,4 (always),2 (sometimes),Don't know,Don't know,Don't know,Don't know,,0 (never),1 (almost never),4 (always),Don't know,,0 (never),0 (never),3 (very often),3 (very often),0 (never),0 (never),0 (never),0 (never),Don't know,,ROS,Open source,Open source,2 (sometimes),2 (sometimes),2 (sometimes),1 (almost never),1 (almost never),0 (never),2 (sometimes),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,4 (always),4 (always),2 (sometimes),4 (always),Don't know,Don't know,,Manual specification based on experience,Testing,Technically skilled end-user,Don't know,Don't know,Don't know,Don't know,Don't know,,3 (agree),1 (disagree),1 (disagree),0 (strongly disagree),1 (disagree),1 (disagree),0 (strongly disagree),0 (strongly disagree),2 (neutral),0 (strongly disagree),0 (strongly disagree),Don't know,,dynamic adoption: ML,,robot engineers also need an understanding of the hardware,,Industrial practitioner: Programmer,5,Male,+50
28/06/2019 19:20:12,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Drones, Industrial arms, Custom Hardware like Hexapods","Factory automation, Cleaning, Medical, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",3 (very often),1 (almost never),2 (sometimes),4 (always),0 (never),2 (sometimes),4 (always),2 (sometimes),2 (sometimes),,Gitlab Issues,Powerpoint,UML,"vim, emacs, Visual Studio Code",none,"Gazebo, RVIZ, Gtest",complete ROS pipeline with all tools,VS Code,4 (always),1 (almost never),3 (very often),0 (never),2 (sometimes),2 (sometimes),,1 (almost never),2 (sometimes),3 (very often),Don't know,,1 (almost never),2 (sometimes),3 (very often),3 (very often),1 (almost never),1 (almost never),0 (never),0 (never),Don't know,,"ROS, ROS 2.0",Open source,Open source,4 (always),4 (always),3 (very often),4 (always),2 (sometimes),2 (sometimes),1 (almost never),Don't know,,"Lack of documentation, Lack of trust, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,2 (sometimes),1 (almost never),1 (almost never),1 (almost never),1 (almost never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Debugging from top to bottom in hardware as well as in software,"Developer, Non-technical end-user, Technically skilled end-user",Don't know,Don't know,Don't know,Don't know,Don't know,,3 (agree),1 (disagree),2 (neutral),2 (neutral),1 (disagree),3 (agree),4 (strongly agree),3 (agree),1 (disagree),2 (neutral),2 (neutral),Don't know,,test in hardware as soon as possible,,the interaction with hardware and a non-stable cluttered environment is hard to simulate and produces a lot of possible problems,,Academic/Scientist,5,Male,11-30
30/06/2019 01:01:38,"Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms","Factory automation, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",4 (always),3 (very often),4 (always),4 (always),3 (very often),4 (always),3 (very often),1 (almost never),Don't know,,"excel, redmine","word, excel, jetbrains MPS",in-house extension of Jetbrains MPS,"visual studio code, visual studio, eclipse",jetbrains MPS,"Gazebo, Visual Components","Orocos, ROS, RSB",Visual Studio Code,4 (always),3 (very often),4 (always),3 (very often),2 (sometimes),Don't know,,2 (sometimes),Don't know,4 (always),Don't know,,2 (sometimes),3 (very often),4 (always),4 (always),Don't know,2 (sometimes),4 (always),2 (sometimes),Don't know,,"ROS, OROCOS, CoSiMA (developed in the EU CogIMon Project)","Proprietary, Open source","Proprietary, Open source",4 (always),3 (very often),3 (very often),4 (always),3 (very often),1 (almost never),2 (sometimes),Don't know,,"Lack of documentation, Lack of trust, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,2 (sometimes),4 (always),3 (very often),2 (sometimes),1 (almost never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Analyzing the runtime behavior and comparing it to the modeled specification. ,"Non-technical end-user, Technically skilled end-user",2 (sometimes),0 (never),1 (almost never),3 (very often),Don't know,,3 (agree),2 (neutral),4 (strongly agree),2 (neutral),1 (disagree),4 (strongly agree),4 (strongly agree),2 (neutral),1 (disagree),3 (agree),0 (strongly disagree),Don't know,,"Specifying missions: DSLs help alot. Lack of documentation: No good solution right know... Just needs to be done I guess somehow. Validation: Formalize (e.g. model) as much as possible to generate correct code and automate validation and verification processes. Safety certification: Limiting variations, formalization and modularization. However, it is still an open question.",,I combines many heterogeneous domains and also links to the real world mostly in terms of physical interaction and hardware.,,Academic/Scientist,4,Male,+50
30/06/2019 18:21:17,Drones,"Transportation, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Complete robotic system (e.g., BOSCH's lawnmower)",3 (very often),3 (very often),4 (always),4 (always),2 (sometimes),4 (always),4 (always),4 (always),Don't know,,"GitHub issues, Wrike","Wrike, Google Docs",Whiteboard,"Vim , VS Code",Python,"Gazebo, in house tools",,"Vim, VS Code",3 (very often),2 (sometimes),3 (very often),2 (sometimes),0 (never),Don't know,,1 (almost never),Don't know,3 (very often),Don't know,,1 (almost never),3 (very often),4 (always),3 (very often),0 (never),1 (almost never),0 (never),0 (never),Don't know,,"ROS, PX4",Open source,Open source,3 (very often),3 (very often),3 (very often),3 (very often),4 (always),3 (very often),2 (sometimes),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,2 (sometimes),4 (always),2 (sometimes),Don't know,0 (never),0 (never),,Simulation,"Debugging, logging","Developer, Non-technical end-user, Technically skilled end-user",0 (never),0 (never),0 (never),0 (never),0 (never),,1 (disagree),4 (strongly agree),2 (neutral),2 (neutral),3 (agree),3 (agree),3 (agree),4 (strongly agree),2 (neutral),3 (agree),3 (agree),4 (strongly agree),Lacking extensibility or clear APIs leading to forking of projects.,Continuous evolution and improvements towards clearer APIs but it's still challenging.,Many contributors in robotics have a mechanical or electrical engineering background instead of computer science which means code quality is often lower from a software engineering's perspective.,Common software engineering practices are less common or known in robotics and therefore software and software maintainability suffers.,"Yes, we should be more inspired by other fields.",Industrial practitioner: Programmer,7,Male,31-50
01/07/2019 14:01:41,"Mobile robots (i.e., ground robots with navigation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms",Factory automation,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Hardware: 3D stereo vision camera",3 (very often),3 (very often),4 (always),4 (always),1 (almost never),3 (very often),4 (always),4 (always),Don't know,,"JIRA, Excel",JIRA,"draw.io, EnterpriseArchitect, PowerPoint","Eclipse, Visual Studio, VS Code, PyCharm, CLion, Atom",,"CTest, GTest, Gazebo, rosbag",ROS,"Eclipse, Visual Studio, VS Code, PyCharm, CLion, Atom",3 (very often),2 (sometimes),4 (always),2 (sometimes),2 (sometimes),Don't know,,1 (almost never),1 (almost never),4 (always),Don't know,,2 (sometimes),2 (sometimes),3 (very often),3 (very often),0 (never),0 (never),0 (never),2 (sometimes),Don't know,,ROS,"Proprietary, Open source","Proprietary, Open source",1 (almost never),2 (sometimes),2 (sometimes),3 (very often),3 (very often),3 (very often),2 (sometimes),Don't know,,"Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,4 (always),4 (always),2 (sometimes),4 (always),Don't know,Don't know,,"Manual specification based on experience, Simulation, Real-world data gathered in experiments","Testing, Debugging, Tracing (Tools)","Developer, Non-technical end-user, Technically skilled end-user, Integrator",3 (very often),Don't know,Don't know,Don't know,Don't know,,2 (neutral),3 (agree),3 (agree),3 (agree),2 (neutral),3 (agree),3 (agree),4 (strongly agree),2 (neutral),3 (agree),2 (neutral),Don't know,,"Software reuse: proper modularization and reuse, e.g. containerization; Lack of standards: Develop own standards or - if applicable working on advancing and creating new standards","openess of major robotics manufacturers, e.g. suitable drivers and standards for interfaces; ",The interdisciplinary nature of robotics makes it much more a team effort than other software engineering. A good team is way more crucial. ,,Academic/Scientist,7,Male,11-30
01/07/2019 14:28:32,"Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Industrial arms","Factory automation, General research on service robots",Drivers of low-level components,4 (always),1 (almost never),3 (very often),4 (always),2 (sometimes),3 (very often),3 (very often),4 (always),Don't know,,"GitHub, Redmine",,"Tipically just markdown comments on GitHub, sometimes with draw.io or asciiflow ( http://asciiflow.com/ ) diagrams.",KDevelop,Simulink Coder,"Gazebo, RobotTestingFramework, Catch2","YARP, BlockFactory",KDevelop,3 (very often),1 (almost never),3 (very often),3 (very often),Don't know,Don't know,,1 (almost never),1 (almost never),3 (very often),Don't know,,0 (never),2 (sometimes),3 (very often),3 (very often),0 (never),3 (very often),0 (never),2 (sometimes),Don't know,,Yarp,Open source,Open source,4 (always),4 (always),4 (always),4 (always),3 (very often),3 (very often),2 (sometimes),Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Internal policies, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",,,2 (sometimes),2 (sometimes),1 (almost never),3 (very often),0 (never),0 (never),,"Simulation, Runtime monitoring",Most of the time by reproducing the issue on the real robots.,Don't know,0 (never),0 (never),0 (never),0 (never),0 (never),,3 (agree),3 (agree),3 (agree),2 (neutral),3 (agree),3 (agree),Don't know,3 (agree),1 (disagree),3 (agree),0 (strongly disagree),0 (strongly disagree),,Software reuse: ensure that all the dependencies correctly install themselves as CMake packages,,"One of the main problems that I feel affects the robotics software engineering field is that most of the practitioners/students of the area tend to ignore most of the progress in related fields of cyberphysical systems, such as the solution developed by the industrial automation sector or the automotive sector.  ","I think one of the biggest problems (especially in robotics software education and research) in the current  robotics software engineering practice is the use of software tools to build distributed systems (such as ROS1, DDS) to solve the problem of creating composable and reusable building blocks. ",Academic/Scientist,7,Male,+50
01/07/2019 15:52:48,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms","Factory automation, General research on service robots","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",2 (sometimes),3 (very often),3 (very often),3 (very often),1 (almost never),3 (very often),2 (sometimes),2 (sometimes),Don't know,,"Excel, Jira, In-house tools","Word, Confluence","UML, OmniGraffle, Visio, Powerpoint","Sublime, IntelliJ, Visual Studio (Code), Python IDEs, SciLab, Matlab, ...",,"JUnit, Gazebo, Docker","ROS-based, in-house tools",In-house tool chains (based on Open Source solutions),3 (very often),3 (very often),2 (sometimes),2 (sometimes),1 (almost never),Don't know,,2 (sometimes),0 (never),3 (very often),Don't know,,2 (sometimes),2 (sometimes),3 (very often),3 (very often),3 (very often),3 (very often),2 (sometimes),2 (sometimes),Don't know,,"ROS, ROS 2.0","Proprietary, Open source","Proprietary, Open source",3 (very often),2 (sometimes),3 (very often),3 (very often),2 (sometimes),2 (sometimes),1 (almost never),Don't know,,"Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions",Both equally,"We rely on the experience and skills of our team, We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,3 (very often),2 (sometimes),2 (sometimes),Don't know,1 (almost never),0 (never),,"Manual specification based on experience, Simulation, Runtime monitoring","directly during test phase, failed unit or integration tests","Non-technical end-user, Technically skilled end-user, Integrator",3 (very often),1 (almost never),1 (almost never),2 (sometimes),Don't know,,2 (neutral),2 (neutral),3 (agree),3 (agree),1 (disagree),3 (agree),2 (neutral),2 (neutral),3 (agree),3 (agree),3 (agree),Don't know,,"For Software Development we try to apply proven methods from Software Engineering in the Robotics Domain. We favor tool-chain-based methods over writing documents (Test-driven development, Abstraction via Interfaces, Multilayerd Architecture, Modularization, ...).

","Standardized modelling and description of robotic applications (use cases) including safety concepts that can be validated, automated testing and continous integration in the physcial world, transferring from simulation to robot (also in machine learning).

The still very common hardware-driven view on the robot development process and that principles of SW-engineering must be adapted for robotics.","See above and: industrial robotics still suffers from a ""locked-in"" problem that makes abstraction, modularization, CI, etc. hard.",Yes. See above. Mainly application of SW-engineering principles.,Applied researcher for industrial domain,2 years,Male,11-30
02/07/2019 22:50:09,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Industrial arms","Factory automation, Cleaning, logistics, retail","Low-level functionalities (e.g., navigation, self-localisation)",3 (very often),Don't know,4 (always),4 (always),0 (never),2 (sometimes),3 (very often),3 (very often),Don't know,,Trello,google docs,,"visual studio, emacs",,gazebo,"rosbag, roslaunch, in-house tools",visual studio,4 (always),1 (almost never),Don't know,Don't know,Don't know,Don't know,,0 (never),0 (never),4 (always),0 (never),,0 (never),1 (almost never),4 (always),2 (sometimes),0 (never),0 (never),0 (never),0 (never),0 (never),,"ROS, OROCOS",Open source,Proprietary,4 (always),2 (sometimes),Don't know,3 (very often),2 (sometimes),2 (sometimes),2 (sometimes),0 (never),,"Lack of documentation, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,1 (almost never),2 (sometimes),2 (sometimes),4 (always),0 (never),0 (never),,"Manual specification based on experience, Simulation",Analyze recorded data of the failure,"Developer, Technically skilled end-user, Integrator",2 (sometimes),0 (never),0 (never),0 (never),0 (never),,1 (disagree),3 (agree),3 (agree),2 (neutral),2 (neutral),1 (disagree),1 (disagree),3 (agree),3 (agree),2 (neutral),2 (neutral),0 (strongly disagree),,-,,Less strict,I don't have a strong opinion on this. I tend to favor functionality and algorithm development over software engineering itself.,Industrial practitioner: Leading Technical Role,7,Male,31-50
03/07/2019 12:04:22,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Industrial arms","Factory automation, General research on service robots","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",1 (almost never),1 (almost never),0 (never),4 (always),0 (never),1 (almost never),1 (almost never),0 (never),Don't know,,trello,github,,"qt-creator, emacs",,Gazebo,"roslaunch, rosbag",,3 (very often),3 (very often),2 (sometimes),1 (almost never),0 (never),Don't know,,0 (never),0 (never),2 (sometimes),Don't know,,2 (sometimes),3 (very often),4 (always),3 (very often),0 (never),2 (sometimes),3 (very often),1 (almost never),Don't know,,ROS,Open source,Open source,4 (always),2 (sometimes),1 (almost never),3 (very often),2 (sometimes),1 (almost never),0 (never),Don't know,,Favouring self-developed solutions,Both equally,We rely on the experience and skills of our team,,0 (never),1 (almost never),0 (never),1 (almost never),0 (never),Don't know,,"Manual specification based on experience, Runtime monitoring",try and error,"Developer, Integrator",0 (never),0 (never),0 (never),4 (always),Don't know,,4 (strongly agree),3 (agree),4 (strongly agree),4 (strongly agree),3 (agree),2 (neutral),1 (disagree),1 (disagree),2 (neutral),2 (neutral),4 (strongly agree),Don't know,,we try some solutions which so far don't work,,I think robotics software engineering is simpler than software engineering in other domains and still the roboticists have no idea about how to leverage it. ,"Yes, the practices applied in robotics software engineering should definitely change. Roboticists should learn and apply the minimal software engineering tools.",Academic/Scientist,10,Male,11-30
03/07/2019 12:42:57,Industrial arms,"Factory automation, Defense",Planning and orchestration modules,4 (always),4 (always),2 (sometimes),4 (always),2 (sometimes),4 (always),4 (always),4 (always),Don't know,,Jira / Trello,Behavior Engineering / Behavior Trees,C4  / PlantUML,Customs CASE tooling for logic labeled finite state machine ,C / c++ derived from custom CASE tooling,In house tooling. Some ROS.,Mix of in-house tooling and ros ,Custom CASE tooling ,3 (very often),3 (very often),2 (sometimes),2 (sometimes),2 (sometimes),Don't know,,0 (never),2 (sometimes),3 (very often),Don't know,,2 (sometimes),3 (very often),3 (very often),2 (sometimes),3 (very often),0 (never),2 (sometimes),0 (never),Don't know,,ROS 2.0,"Proprietary, Open source",Proprietary,2 (sometimes),2 (sometimes),2 (sometimes),2 (sometimes),2 (sometimes),2 (sometimes),2 (sometimes),Don't know,,"Licensing issues, Internal policies, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We have a clear definition of interfaces of each component,,4 (always),4 (always),4 (always),4 (always),4 (always),Don't know,Formal verification via nusmv,"Manual specification based on experience, Simulation, Runtime monitoring",Change in operational environments ,Technically skilled end-user,2 (sometimes),2 (sometimes),2 (sometimes),3 (very often),Don't know,,1 (disagree),1 (disagree),1 (disagree),3 (agree),2 (neutral),2 (neutral),3 (agree),2 (neutral),3 (agree),2 (neutral),0 (strongly disagree),Don't know,,-,Lack of formal education among graduates. They’re all about AI without a solid grounding in computer science ,It’s same same. ,They’re constantly changing as the field develops,Industrial practitioner: Leading Technical Role,10+,Male,+50
03/07/2019 12:45:48,"Mobile robots (i.e., ground robots with navigation capabilities), Underwater robots, Industrial arms",Maritime Robotics ,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",4 (always),4 (always),3 (very often),4 (always),0 (never),1 (almost never),4 (always),4 (always),Don't know,,"Trello, Github, Excel",Word,"Solidworks, Kicad",Sublime,,"UWSim, unittest","logging, real experiments",git,4 (always),3 (very often),3 (very often),3 (very often),0 (never),Don't know,,Don't know,Don't know,4 (always),Don't know,,Don't know,2 (sometimes),3 (very often),3 (very often),Don't know,Don't know,Don't know,Don't know,Don't know,,"ROS, LCM",Open source,Open source,3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),1 (almost never),1 (almost never),Don't know,,"Lack of documentation, Lack of trust, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Both equally,We follow a precise architecture of the system,,3 (very often),3 (very often),1 (almost never),1 (almost never),Don't know,Don't know,,"Simulation, Runtime monitoring",debugging / gdb,"Developer, Technically skilled end-user",3 (very often),0 (never),0 (never),0 (never),2 (sometimes),Web browser GUI,0 (strongly disagree),1 (disagree),3 (agree),3 (agree),2 (neutral),3 (agree),3 (agree),4 (strongly agree),2 (neutral),0 (strongly disagree),0 (strongly disagree),4 (strongly agree),FUNDS!,Stress test / run hardware for hours and different scenarios to test for robustness to noise/temperature/expansion,Mismatch between what companies need & research works,NO,Are there practices? Everyone does whatever they feel like. We need to streamline effort towards modularity (e.g. ROS/LCM) and target usability,Academic/Scientist,6,Male,+50
03/07/2019 13:10:21,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Drones, Industrial arms","Factory automation, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Complete robotic system (e.g., BOSCH's lawnmower)",2 (sometimes),2 (sometimes),3 (very often),4 (always),1 (almost never),4 (always),2 (sometimes),2 (sometimes),Don't know,,Excel,Excel,"UML, Powerpoint","QT-creator, normal text editor",,Gazebo,"rosbag, roslaunch",QT-Creator,4 (always),2 (sometimes),4 (always),2 (sometimes),2 (sometimes),Don't know,,2 (sometimes),3 (very often),2 (sometimes),Don't know,,2 (sometimes),3 (very often),4 (always),4 (always),2 (sometimes),2 (sometimes),0 (never),0 (never),Don't know,,"ROS, ROS 2.0",Open source,Open source,2 (sometimes),2 (sometimes),2 (sometimes),4 (always),4 (always),4 (always),2 (sometimes),Don't know,,"Lack of documentation, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions",Both equally,We rely on the experience and skills of our team,,4 (always),2 (sometimes),2 (sometimes),2 (sometimes),Don't know,Don't know,,Simulation,Unit testing,Non-technical end-user,2 (sometimes),1 (almost never),0 (never),Don't know,Don't know,,3 (agree),2 (neutral),3 (agree),4 (strongly agree),3 (agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),Don't know,,Select a robot software which is already stable and already well tested and follow their methods.,"The standards for robot software need to redefine. It may not be ordinary software engineering standards, its more than that","Because of the robot hardware involves, we may need to re-invent the some of the practices we follow in software engineering","Yes. Currently, there is no correct standards followed in most of the companies. It needs to change",Industrial practitioner: Programmer,8,Male,1-10
03/07/2019 13:15:36,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Drones, Industrial arms","Factory automation, Agriculture, Transportation, Defense, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),4 (always),4 (always),4 (always),2 (sometimes),3 (very often),4 (always),2 (sometimes),Don't know,,"Excel, Trello, Zoho Projects","Excel, Zoho Projects",Enterprise Architect,"Visual Studio, QtCreator",Matlab,Gazebo,"ROS, multimaster","Visual Studio, QtCreator",3 (very often),1 (almost never),3 (very often),3 (very often),2 (sometimes),Don't know,,2 (sometimes),0 (never),4 (always),Don't know,,1 (almost never),3 (very often),3 (very often),3 (very often),2 (sometimes),3 (very often),0 (never),1 (almost never),Don't know,,ROS,"Proprietary, Open source",Open source,3 (very often),3 (very often),2 (sometimes),3 (very often),3 (very often),2 (sometimes),1 (almost never),Don't know,,"Lack of documentation, Lack of trust",Both equally,"We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,2 (sometimes),1 (almost never),2 (sometimes),3 (very often),Don't know,Don't know,,"Manual specification based on experience, Simulation",Testing,"Developer, Technically skilled end-user",3 (very often),1 (almost never),0 (never),0 (never),Don't know,,3 (agree),3 (agree),4 (strongly agree),3 (agree),4 (strongly agree),3 (agree),2 (neutral),3 (agree),2 (neutral),3 (agree),2 (neutral),Don't know,,Documenting own software,,Ability to test/experiment and focus on real workd applications,,Industrial practitioner: Leading Technical Role,12,Male,+50
03/07/2019 13:23:54,"Mobile manipulators (i.e., mobile robots with manipulation capabilities)",Medical,Planning and orchestration modules,0 (never),1 (almost never),2 (sometimes),3 (very often),1 (almost never),2 (sometimes),3 (very often),3 (very often),Don't know,,Gitlab ,Word,Dia,Vs code,Matlab,Vrep ,Ros,Vs code,4 (always),0 (never),3 (very often),1 (almost never),0 (never),Don't know,,Don't know,Don't know,Don't know,Don't know,,Don't know,4 (always),4 (always),1 (almost never),Don't know,3 (very often),Don't know,Don't know,Don't know,,ROS,Open source,Don't know,3 (very often),2 (sometimes),Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,,Lack of documentation,Copy-paste-modify,We rely on the experience and skills of our team,,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,,Simulation,Trouble shooting ,Don't know,3 (very often),Don't know,Don't know,Don't know,Don't know,,4 (strongly agree),1 (disagree),2 (neutral),3 (agree),1 (disagree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),1 (disagree),2 (neutral),Don't know,,We tried to reduce risks,,Robotics are related to the real world,,Academic/Scientist,5,Male,+50
03/07/2019 13:43:34,Underwater robots,Marine ,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",2 (sometimes),3 (very often),2 (sometimes),4 (always),2 (sometimes),4 (always),4 (always),2 (sometimes),Don't know,,"Trello, Microsoft Planner","Word, Excel","PowerPoint, Inkscape, Visio","IntelliJ, QtCreator, Eclipse, Visual Studio","In-house tool/ python, c++","Matlab/Simulink, Gazebo","ROS in general, Neptus, in-house tools"," IntelliJ, QtCreator, Eclipse, Visual Studio",4 (always),2 (sometimes),1 (almost never),1 (almost never),0 (never),Don't know,,2 (sometimes),0 (never),1 (almost never),Don't know,,1 (almost never),1 (almost never),3 (very often),3 (very often),0 (never),3 (very often),1 (almost never),2 (sometimes),Don't know,,ROS,"Proprietary, Open source","Proprietary, Open source",4 (always),4 (always),3 (very often),4 (always),4 (always),2 (sometimes),3 (very often),Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We follow a standard (please specify below)","Consistent usage of terms, numbering, symbols, etc.",2 (sometimes),4 (always),1 (almost never),1 (almost never),0 (never),Don't know,,"Simulation, Runtime monitoring",Through software and hardware in-the-loop simulations.,"Developer, Technically skilled end-user",1 (almost never),0 (never),3 (very often),1 (almost never),Don't know,,1 (disagree),2 (neutral),4 (strongly agree),2 (neutral),2 (neutral),3 (agree),Don't know,2 (neutral),2 (neutral),1 (disagree),3 (agree),Don't know,,"Applying AI/Additional education, Validating the robotic system/Two-week joint trials for all projects",Discipline for proper software engineering,"Less disciplined, more goal driven than quality driven","Yes. Be more code quality and reuse oriented, more testing.",Academic/Scientist,15,Male,11-30
03/07/2019 14:19:38,"Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Factory automation, Medical",Drivers of low-level components,1 (almost never),1 (almost never),2 (sometimes),4 (always),2 (sometimes),4 (always),4 (always),3 (very often),Don't know,,"Github, Zenhub",,,"QT-Creator, Matlab, Simulink, K-Develop","Swig, Simulink Compiler","Gazebo, Rviz","YARP, roslaunch",QT-Creator,4 (always),Don't know,Don't know,4 (always),Don't know,Don't know,,Don't know,Don't know,3 (very often),Don't know,,0 (never),0 (never),4 (always),1 (almost never),0 (never),4 (always),0 (never),0 (never),0 (never),,Yarp,Open source,Open source,4 (always),4 (always),4 (always),3 (very often),3 (very often),3 (very often),2 (sometimes),Don't know,,,"Systematic reuse (e.g., frameworks, components, libraries, ...)",We follow a precise architecture of the system,,2 (sometimes),3 (very often),2 (sometimes),3 (very often),Don't know,Don't know,,Simulation,debug,"Developer, Technically skilled end-user",4 (always),Don't know,Don't know,Don't know,Don't know,,1 (disagree),3 (agree),2 (neutral),2 (neutral),2 (neutral),2 (neutral),0 (strongly disagree),3 (agree),3 (agree),4 (strongly agree),1 (disagree),Don't know,,Transition from simulation to real world applications -> improve simulation environment,,Yes,,Academic/Scientist,2,Male,+50
03/07/2019 14:43:24,"Mobile robots (i.e., ground robots with navigation capabilities), Drones, Underwater robots, Space robotics","Defense, Space exploration","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",4 (always),4 (always),4 (always),4 (always),0 (never),4 (always),4 (always),2 (sometimes),Don't know,,"Jira, gitlab","Word, confluence, or doors","Powerpoint, confluence, magic draw","Sublime, vim, qtcreator, vscode, gedit",,"Gazebo, in-house tool","Ros, in house tool",,2 (sometimes),2 (sometimes),2 (sometimes),1 (almost never),0 (never),Don't know,,1 (almost never),2 (sometimes),2 (sometimes),Don't know,,Don't know,Don't know,3 (very often),3 (very often),1 (almost never),2 (sometimes),Don't know,Don't know,Don't know,,"ROS, In-house",Open source,Proprietary,3 (very often),3 (very often),Don't know,3 (very often),Don't know,2 (sometimes),Don't know,Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Internal policies, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We follow a standard (please specify below)",We just try to match architecture styles.,3 (very often),4 (always),4 (always),3 (very often),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring","Debugger, memory checkers, post processing",Technically skilled end-user,2 (sometimes),0 (never),0 (never),0 (never),Don't know,,2 (neutral),2 (neutral),3 (agree),2 (neutral),Don't know,4 (strongly agree),1 (disagree),4 (strongly agree),1 (disagree),4 (strongly agree),3 (agree),Don't know,,"Mission specification to robots is done via text file and we use a library to parse it and then some mission planning framework executes it, software reuse can cause trouble if it's not mature, if it is then it's helpful, lack of documentation always slows things down but incorrect documentation can cause failures, lack of standards doesn't really slow things down unless you try to reuse the code, validation is always challenging because it's challenging/expensive to develop simulation capability for every robot/sensor you use so that it can be tested in a wide variety of environment. Simulation is only done when systems can't be easily test real-time. Robustness is always challenging there's diminishing returns on time spent on a project once you get to the 80% solution for something. The simulation to real-world gap is real, don't trust any performance measures of anything in simulation, especially if the system is complex. Transition to real world components as soon as it's monitarily feasible. My company does weird stuff so it's very challenging to find enough datasets to do anything useful with machine learning and generally customers/engineers are hesitant to introduce any sort of nondeterminism into a system ie artificial intelligence.",,"Robotics software is complex, not just algorithmically, a typical robotic system interacts with a lot of different hardware components and software components. In addition when precision/hard real-time  is required there needs to be a lot of interaction with the kernal to set priorities and schedule things. That means there there needs to be a lot of integration testing which takes time. This is what makes robotics more challenging than normal software, multiple interactions with complex algorithms, hardware, and both ""low and high"" level programing needed to build these machines.",,Industrial practitioner: Leading Technical Role,3 years,Male,+50
03/07/2019 14:47:05,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities)",Space,"Planning and orchestration modules, Simulation",4 (always),4 (always),3 (very often),4 (always),2 (sometimes),4 (always),3 (very often),3 (very often),Don't know,,Gitlab,Excel and Word,"UML, Papirus, MagicDraw, Power Point",Visual Studio,Orogen,Mars Robotics Simulator,Rock Robotics Logs,"Gitlab, Docker, Jenkins",4 (always),0 (never),4 (always),4 (always),0 (never),Don't know,,Don't know,3 (very often),2 (sometimes),Don't know,,Don't know,Don't know,4 (always),4 (always),3 (very often),Don't know,Don't know,Don't know,Don't know,,"OROCOS, Rock",Open source,Open source,4 (always),4 (always),1 (almost never),4 (always),4 (always),3 (very often),3 (very often),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,3 (very often),2 (sometimes),2 (sometimes),3 (very often),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Debugging,Non-technical end-user,3 (very often),1 (almost never),1 (almost never),1 (almost never),Don't know,,2 (neutral),3 (agree),3 (agree),3 (agree),3 (agree),2 (neutral),2 (neutral),3 (agree),3 (agree),3 (agree),2 (neutral),Don't know,,"Long question, in many of the cases there is not a solution that can be applied by me. For instance, I can not do more than propose the specification of an standard, not enforce or motivate others to get involved.

For Robustness, Dynamic Adaptation and Simulation to Real world transitions we try to develop new software and perform as many real world experiments as possible.","In my opinion, one big challenge is the gap between developed code and scientific literature. It is often impossible to reproduce the results from a paper because the code is not available or changes too fast, requiring much efforts of integration for just performing some tests.","It differs mainly in all that relates to real world interaction. For instance, improvements on the final product might be better done by changing the robot design than by improving the software. The tests on real world scenarios are as well different, normally they require particular adaptations that are difficult to generalize.","The practices are very dependent of the enterprise or research institution. In my opinion, in robotics research there should be more space for creativity, robotics software engineering and research should be productive and reusable while at the same time enjoyable.",Academic/Scientist,8 Years,Male,+50
03/07/2019 15:18:41,"Mobile robots (i.e., ground robots with navigation capabilities), Underwater robots",Research,"Low-level functionalities (e.g., navigation, self-localisation)",0 (never),0 (never),2 (sometimes),4 (always),0 (never),4 (always),4 (always),4 (always),Don't know,,,,,Sublime,,"Gazebo, python ","rosbag, roslaunch, ",Sublime,4 (always),3 (very often),0 (never),0 (never),0 (never),Don't know,,Don't know,Don't know,Don't know,Don't know,,0 (never),2 (sometimes),2 (sometimes),4 (always),0 (never),2 (sometimes),0 (never),0 (never),Don't know,,ROS,Open source,Open source,4 (always),4 (always),4 (always),3 (very often),0 (never),2 (sometimes),2 (sometimes),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Copy-paste-modify,We rely on the experience and skills of our team,,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,,Simulation,Simulation and post failure analysis,Developer,4 (always),0 (never),0 (never),0 (never),0 (never),,2 (neutral),1 (disagree),2 (neutral),3 (agree),3 (agree),3 (agree),0 (strongly disagree),3 (agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),Don't know,,"The dynamic adaptation of robot behavior is being done by AI techniques, we start in simulation and move to real world applications. This is the core of our research and the most difficult part",,"A lot of different knowledge specific to robotics is needed in order to do software design. For example, hardware specifications. ",,Academic/Scientist,6,Male,1-10
03/07/2019 15:39:19,"Mobile robots (i.e., ground robots with navigation capabilities), autonomous cars",Transportation,"Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",3 (very often),1 (almost never),4 (always),4 (always),1 (almost never),2 (sometimes),3 (very often),3 (very often),Don't know,,"Gitlab, Redmine",,"dokuwiki, draw.io",,,Gazebo,"rosbag, roslaunch",,2 (sometimes),3 (very often),3 (very often),1 (almost never),0 (never),3 (very often),Generic Programming,0 (never),0 (never),4 (always),0 (never),,Don't know,Don't know,4 (always),2 (sometimes),Don't know,Don't know,Don't know,Don't know,Don't know,,ROS,Open source,Don't know,3 (very often),3 (very often),0 (never),3 (very often),3 (very often),3 (very often),1 (almost never),Don't know,,,Both equally,"We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,3 (very often),3 (very often),2 (sometimes),4 (always),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Research,"Developer, Integrator",Don't know,Don't know,Don't know,Don't know,Don't know,,4 (strongly agree),3 (agree),3 (agree),2 (neutral),3 (agree),4 (strongly agree),0 (strongly disagree),4 (strongly agree),3 (agree),3 (agree),3 (agree),Don't know,,dhaoisdha,,A Bit.,,Academic/Scientist,5,Male,31-50
03/07/2019 15:47:00,"Mobile robots (i.e., ground robots with navigation capabilities)","Cleaning, Transportation","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",4 (always),4 (always),4 (always),4 (always),0 (never),4 (always),4 (always),4 (always),Don't know,,Trello,Google Docs,Google Draw,"plain text editor, ROS toolchain",,Gazebo,ROS toolchain,"plain text editor, ROS toolchain",4 (always),2 (sometimes),3 (very often),0 (never),0 (never),Don't know,,0 (never),0 (never),4 (always),0 (never),,1 (almost never),1 (almost never),3 (very often),3 (very often),0 (never),0 (never),0 (never),0 (never),0 (never),,ROS,Open source,Proprietary,3 (very often),3 (very often),Don't know,3 (very often),3 (very often),3 (very often),2 (sometimes),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,Don't know,4 (always),4 (always),4 (always),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Scientific debugging,Non-technical end-user,0 (never),0 (never),0 (never),4 (always),0 (never),,2 (neutral),2 (neutral),3 (agree),3 (agree),3 (agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),Don't know,,"Literature surveys, in-house experimental research","Finding cost-effective, wide Field-of-View sensors for nearby obstacle detection","The need to be knowledgeable in a wider variety of programming languages and techniques, as well as domains beyond software, such as Mechanics and Geometry.","There should be a firmer community-wide commitment to creating and maintaining open-source reference implementations for common missions (navigation, obstacle avoidance, etc) instead of different teams reinventing the wheel each time. ROS distributions are a start but still far from ideal.",Industrial practitioner: Leading Technical Role,3,Male,1-10
03/07/2019 15:54:48,"Mobile robots (i.e., ground robots with navigation capabilities)",Retail,"Drivers of low-level components, Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),2 (sometimes),3 (very often),3 (very often),1 (almost never),2 (sometimes),3 (very often),2 (sometimes),Don't know,,"Redmine, Jira","Jira, Word","UML, Solidworks","Visual Studio Code, Visual Studio",,Gazebo,"rosbag, roslaunch",Visual Studio,3 (very often),2 (sometimes),2 (sometimes),0 (never),0 (never),Don't know,,2 (sometimes),1 (almost never),3 (very often),Don't know,,3 (very often),2 (sometimes),3 (very often),2 (sometimes),2 (sometimes),0 (never),0 (never),0 (never),Don't know,,ROS,"Proprietary, Open source",Proprietary,1 (almost never),1 (almost never),1 (almost never),2 (sometimes),1 (almost never),1 (almost never),0 (never),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",,,2 (sometimes),2 (sometimes),2 (sometimes),2 (sometimes),0 (never),Don't know,,"Manual specification based on experience, Runtime monitoring",Debugging,"Non-technical end-user, Technical project manager",2 (sometimes),0 (never),0 (never),0 (never),Don't know,,3 (agree),2 (neutral),3 (agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),3 (agree),3 (agree),Don't know,,"Safety Certification - Try to adhere to relevant requirements
Robustness - Endurance testing",,"It has additional constraints like computing resource limitations, additional complexity of H/W state complexities associated with",,Industrial practitioner: Leading Technical Role,2,Male,31-50
03/07/2019 16:27:10,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body)",General research on service robots,Planning and orchestration modules,3 (very often),1 (almost never),2 (sometimes),4 (always),1 (almost never),4 (always),3 (very often),2 (sometimes),Don't know,,github (yes also for managing projects),,UML,QT-Creator,,"Gazebo, Google tests",YARP,github,4 (always),2 (sometimes),1 (almost never),1 (almost never),0 (never),Don't know,,4 (always),1 (almost never),2 (sometimes),Don't know,,0 (never),2 (sometimes),4 (always),3 (very often),Don't know,0 (never),0 (never),0 (never),Don't know,,"ROS, SmartSoft, Yarp",Open source,Free Software (different than open),4 (always),4 (always),3 (very often),0 (never),Don't know,1 (almost never),1 (almost never),Don't know,,"Lack of documentation, Lack of trust, Licensing issues",Both equally,We rely on the experience and skills of our team,,4 (always),2 (sometimes),0 (never),3 (very often),0 (never),Don't know,,Manual specification based on experience,Debugging,Technically skilled end-user,3 (very often),1 (almost never),Don't know,Don't know,Don't know,,3 (agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),3 (agree),3 (agree),3 (agree),2 (neutral),3 (agree),4 (strongly agree),1 (disagree),Don't know,,"There is no ""golden rule"" for that",,"yes, robotics need to deal with hardware fault",,Academic/Scientist,6,Male,+50
03/07/2019 16:33:34,"Mobile robots (i.e., ground robots with navigation capabilities), Drones",survey,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),3 (very often),3 (very often),4 (always),2 (sometimes),Don't know,Don't know,Don't know,0 (never),,github projects,excel,,"sublime, qt, eclipse, vsc",,gazebo,hil ci,,Don't know,0 (never),Don't know,Don't know,Don't know,0 (never),,Don't know,2 (sometimes),Don't know,0 (never),,0 (never),Don't know,Don't know,Don't know,0 (never),2 (sometimes),0 (never),0 (never),0 (never),,in house,Open source,Proprietary,2 (sometimes),2 (sometimes),2 (sometimes),Don't know,Don't know,Don't know,Don't know,0 (never),,"Lack of documentation, Lack of trust, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,2 (sometimes),Don't know,Don't know,Don't know,0 (never),0 (never),,"Manual specification based on experience, Simulation, Runtime monitoring",Analysis,Non-technical end-user,Don't know,0 (never),0 (never),0 (never),0 (never),,1 (disagree),1 (disagree),1 (disagree),1 (disagree),3 (agree),3 (agree),Don't know,Don't know,Don't know,3 (agree),Don't know,0 (strongly disagree),,Inhouse,,Yes,,Industrial practitioner: Leading Technical Role,7,Male,+50
03/07/2019 16:35:54,"Mobile robots (i.e., ground robots with navigation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Drones","Factory automation, General research on service robots","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",3 (very often),1 (almost never),1 (almost never),4 (always),1 (almost never),4 (always),3 (very often),1 (almost never),Don't know,,Github Projects,Google Docs,,"VS Code, Jupyter",in-house tool,Gazebo,roslaunch,Github,3 (very often),1 (almost never),0 (never),0 (never),0 (never),Don't know,,2 (sometimes),1 (almost never),3 (very often),Don't know,,0 (never),2 (sometimes),2 (sometimes),4 (always),0 (never),0 (never),0 (never),0 (never),Don't know,,ROS,"Proprietary, Open source",Open source,3 (very often),1 (almost never),2 (sometimes),4 (always),4 (always),1 (almost never),0 (never),Don't know,,"Lack of documentation, Lack of trust, Favouring self-developed solutions","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,2 (sometimes),3 (very often),2 (sometimes),1 (almost never),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",anecdotal diagnosis,"Developer, Integrator",3 (very often),0 (never),0 (never),0 (never),Don't know,,0 (strongly disagree),3 (agree),4 (strongly agree),2 (neutral),3 (agree),4 (strongly agree),Don't know,4 (strongly agree),3 (agree),2 (neutral),1 (disagree),Don't know,,we work together as a team to discover and solve issues as they come up,"having updated knowledge on all aspects of robotics sw eng, including coding, machine learning, driver firmware, electronics, mechanical hardware, experiment config, user study design, field trial setup, etc.","robotics is not just software, although it requires software, so the integration of other hardware-related, experiment-related, and robotics-specific engineering aspects make it uniquely challenging",,Industrial practitioner: Leading Technical Role,14,Male,+50
03/07/2019 16:46:38,"Mobile robots (i.e., ground robots with navigation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Factory automation, Warehouse scanning/transport","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",4 (always),4 (always),4 (always),4 (always),1 (almost never),4 (always),3 (very often),4 (always),Don't know,,"Jira, Trello","Jira, Confluence, Gdocs","UML, Confluence, Gliphy, gdocs","Visual Studio Code, Pycharm",,"Gazebo, Stage","rosbag, logs","Git, Visual Studio Code, Pycharm",4 (always),1 (almost never),3 (very often),2 (sometimes),0 (never),Don't know,,Don't know,2 (sometimes),4 (always),Don't know,,2 (sometimes),1 (almost never),4 (always),4 (always),2 (sometimes),0 (never),0 (never),0 (never),Don't know,,ROS,Open source,Proprietary,2 (sometimes),1 (almost never),1 (almost never),3 (very often),3 (very often),1 (almost never),0 (never),Don't know,,"Lack of trust, Licensing issues, Internal policies","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,3 (very often),2 (sometimes),1 (almost never),4 (always),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Investigation by partioning the code and use of test information,Non-technical end-user,2 (sometimes),0 (never),2 (sometimes),3 (very often),Don't know,,4 (strongly agree),3 (agree),4 (strongly agree),3 (agree),3 (agree),2 (neutral),1 (disagree),4 (strongly agree),4 (strongly agree),3 (agree),Don't know,Don't know,,"Using frameworks such as ROS. Creating flexible code. Building small modules, simply to understand and debug. Build code that can grow and adapt.",HRI design is an increasing challenge that needs more research. How non-technical people can interact successfully and productively with the robot to accomplish the desired task. Also how the interface talks with the rest of the system and reflects the state of the system for adequate feedback.,More complex environment of execution. Multiple variables can affect the system and needs to adapt. Many different parts involved. Realtime and asynchronous behavior is a common.,Need better methods for testing. Design patterns specific for robotics should be collected and developed. Established current knowledge should be surveyed and systematized.,Industrial practitioner: Leading Technical Role,5,Male,31-50
03/07/2019 16:51:22,"Mobile manipulators (i.e., mobile robots with manipulation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body)",General research on service robots,"Complete robotic system (e.g., BOSCH's lawnmower)",Don't know,2 (sometimes),2 (sometimes),3 (very often),1 (almost never),3 (very often),3 (very often),2 (sometimes),Don't know,,Jira,Confluence,Draw.io,Clion,In house,Gazebo,Human testers,Clion,4 (always),3 (very often),3 (very often),2 (sometimes),2 (sometimes),Don't know,,Don't know,1 (almost never),4 (always),Don't know,,0 (never),1 (almost never),4 (always),2 (sometimes),0 (never),0 (never),0 (never),0 (never),Don't know,,ROS,Open source,Proprietary,3 (very often),3 (very often),3 (very often),3 (very often),2 (sometimes),1 (almost never),2 (sometimes),Don't know,,"Lack of trust, Licensing issues","Systematic reuse (e.g., frameworks, components, libraries, ...)",We have a clear definition of interfaces of each component,,3 (very often),2 (sometimes),2 (sometimes),4 (always),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Debug information,"Developer, Technically skilled end-user",2 (sometimes),2 (sometimes),0 (never),3 (very often),Don't know,,3 (agree),3 (agree),2 (neutral),2 (neutral),3 (agree),2 (neutral),1 (disagree),2 (neutral),3 (agree),2 (neutral),2 (neutral),Don't know,,Good coding and heavy tests,,We have a real world interaction and constraints,,Industrial practitioner: Programmer,9,Male,+50
03/07/2019 17:52:34,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms","Factory automation, Medical, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",3 (very often),3 (very often),4 (always),4 (always),1 (almost never),3 (very often),4 (always),2 (sometimes),Don't know,,"Excel, Trello, calendar",Word/Excel,"Power Point, UML","VS Code, QT designer, gdb, ROS/Catkin-tools","Matlab, python (SymPy)","gtest, nosetest, gazebo, vrep","rosbag, roslaunch, rqt (multiplot, controller manager, rosbag, custom plugins, ...), rosbridge","VSCode, github/gitlab, clang",4 (always),2 (sometimes),4 (always),2 (sometimes),2 (sometimes),Don't know,,2 (sometimes),1 (almost never),2 (sometimes),Don't know,,1 (almost never),2 (sometimes),4 (always),4 (always),1 (almost never),2 (sometimes),1 (almost never),1 (almost never),Don't know,,"ROS, OROCOS, ihmc open robotics software","Proprietary, Open source",Open source,4 (always),4 (always),4 (always),4 (always),4 (always),4 (always),2 (sometimes),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,4 (always),2 (sometimes),2 (sometimes),4 (always),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring","Unit tests, debugging tools, adding print statements into the code until the code floods the output beyond recognition :(","Developer, Non-technical end-user, Technically skilled end-user",3 (very often),1 (almost never),0 (never),3 (very often),Don't know,,2 (neutral),2 (neutral),3 (agree),3 (agree),2 (neutral),3 (agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),3 (agree),2 (neutral),Don't know,,We research the solution to these challenges.,"The lack of standards, common datasets and problems, and general lack of reuse of software/infrastructure/APIs is making steady progress difficult. The equivalent of standard software and datasets like the ones that accelerated the progress in DNNs is lacking.",The inputs and outputs less well defined.,"More standarised interfaces, modular software components and mature APIs at all levels would help.",Academic/Scientist,15,Male,+50
03/07/2019 18:21:37,"Mobile robots (i.e., ground robots with navigation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Drones","Transportation, General research on service robots",Research,2 (sometimes),3 (very often),4 (always),4 (always),4 (always),4 (always),4 (always),2 (sometimes),Don't know,,"Whiteboard, Textfiles, Mindjet Mindmanager, MS Project, Excel, Word","Pen & Whiteboard, Mindjet Mindmanager, Textfiles, Results are written in reports via Office Word","Pen & Whiteboard, Mindjet Mindmanager, YED","Sublime, nano",mostly just ros messages,"ros tools, Gazebo, V-Rep",ros tools,Windows Subsystem for Linux,3 (very often),4 (always),4 (always),0 (never),0 (never),Don't know,,3 (very often),3 (very often),1 (almost never),Don't know,,1 (almost never),1 (almost never),4 (always),4 (always),0 (never),0 (never),2 (sometimes),3 (very often),Don't know,Bash,ROS,"Proprietary, Open source","Proprietary, Open source",4 (always),3 (very often),Don't know,4 (always),3 (very often),2 (sometimes),0 (never),Don't know,,"Licensing issues, didnt exist, unwanted bloat","Copy-paste-modify, Systematic reuse (e.g., frameworks, components, libraries, ...), Both equally","We rely on the experience and skills of our team, We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,2 (sometimes),2 (sometimes),2 (sometimes),1 (almost never),0 (never),Don't know,,"Manual specification based on experience, Simulation, Experiments",broadly speaking: debugging,"Developer, Integrator",4 (always),0 (never),0 (never),0 (never),Don't know,,2 (neutral),4 (strongly agree),Don't know,Don't know,4 (strongly agree),4 (strongly agree),Don't know,3 (agree),3 (agree),3 (agree),2 (neutral),Don't know,,developing psychological resilience,,hardware always gets in the way and is actually often a cause for problems. in software engineering its much more rarely the cpu that is at fault for the problems at hand,,Academic/Scientist,5,Female,+50
03/07/2019 18:29:51,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities)",General research on service robots,"Low-level functionalities (e.g., navigation, self-localisation)",4 (always),3 (very often),3 (very often),4 (always),1 (almost never),4 (always),3 (very often),3 (very often),Don't know,,"redmine, gitlab",in-house tools ,"UML, yEd, in-house tool","vim, qt creator",,"in-house tool, rviz","ROS(rviz, rosbag, ...)",,3 (very often),2 (sometimes),4 (always),Don't know,Don't know,Don't know,,1 (almost never),2 (sometimes),4 (always),Don't know,,0 (never),2 (sometimes),4 (always),4 (always),3 (very often),Don't know,Don't know,Don't know,Don't know,,ROS,Open source,"Proprietary, Open source",3 (very often),3 (very often),Don't know,4 (always),Don't know,2 (sometimes),Don't know,Don't know,,"Lack of documentation, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,3 (very often),4 (always),3 (very often),4 (always),1 (almost never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring","real world expirments, hardware in the loop",Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,,Don't know,3 (agree),4 (strongly agree),3 (agree),3 (agree),2 (neutral),4 (strongly agree),3 (agree),2 (neutral),3 (agree),2 (neutral),Don't know,,"software reuse: toolbox of libraries, transition to real world: testing with actual Sensor data",,have to deal with more uncertainty and hardware issues,,Academic/Scientist,5,Male,11-30
03/07/2019 19:52:16,"Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Factory automation, General research on service robots","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",3 (very often),1 (almost never),0 (never),4 (always),3 (very often),3 (very often),4 (always),4 (always),Don't know,,"Jira, Excel, Trello, Calendar, Slack",,,"Sublime, Visual Studio, Eclipse",Matlab,"Gazebo, Pybullet, Mujoco",Ros and all of its tools,"Sublime, Visual Studio, Eclipse",4 (always),2 (sometimes),1 (almost never),2 (sometimes),1 (almost never),Don't know,,1 (almost never),1 (almost never),3 (very often),Don't know,,0 (never),2 (sometimes),4 (always),4 (always),Don't know,2 (sometimes),0 (never),0 (never),Don't know,,"ROS, Yarp","Proprietary, Open source",Open source,4 (always),4 (always),3 (very often),4 (always),4 (always),4 (always),3 (very often),Don't know,,"Lack of documentation, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,3 (very often),3 (very often),2 (sometimes),4 (always),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Debugging?,"Developer, Technically skilled end-user",3 (very often),0 (never),0 (never),0 (never),Don't know,,3 (agree),3 (agree),3 (agree),4 (strongly agree),3 (agree),3 (agree),2 (neutral),3 (agree),3 (agree),2 (neutral),2 (neutral),Don't know,,N/A,,"First, it deals with real systems that can physically interact with the environment and any error/mistake can have serious physical consequences on people and/or the surrounding environment.
Second, it is still in the realm of advanced technologies that are not accessible to the average user, and it requires significant more skills.
Last, it is much less mature and developed.",People should start thinking about centralizing their effort around shared standards and tools. Too many times I have seen programmers reinventing the wheel with yet another tool that does the same things ,Academic/Scientist,9,Male,+50
03/07/2019 20:32:27,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms","Factory automation, Transportation","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",2 (sometimes),1 (almost never),2 (sometimes),3 (very often),1 (almost never),3 (very often),2 (sometimes),2 (sometimes),Don't know,,"Slack, WhenIsGood, GoogleSheets",,"PowerPoint, GoogleDraw",Vim,,"ROS, Matlab, Gazebo",ROS,,2 (sometimes),2 (sometimes),3 (very often),3 (very often),1 (almost never),Don't know,,Don't know,Don't know,1 (almost never),3 (very often),"Research coding: spaghetti patch until it works, refactor, repeat",0 (never),1 (almost never),2 (sometimes),3 (very often),0 (never),3 (very often),0 (never),0 (never),Don't know,,"ROS, OROCOS","Proprietary, Open source",Open source,3 (very often),2 (sometimes),0 (never),1 (almost never),0 (never),2 (sometimes),2 (sometimes),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Easier for research code",Both equally,,,2 (sometimes),0 (never),2 (sometimes),1 (almost never),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Recursively visualize and unit test complex code,"Developer, Technically skilled end-user",0 (never),0 (never),0 (never),0 (never),Don't know,,3 (agree),3 (agree),3 (agree),3 (agree),2 (neutral),4 (strongly agree),4 (strongly agree),4 (strongly agree),3 (agree),3 (agree),2 (neutral),Don't know,,Build robustness and safety constraints directly into control models,"Physics simulators should be less concerned with being a decent general model and more concerned with providing a set of great, well documented models for specific problems.  The URDF/SDF system is great for serial arms but weak for everything else.  Instead of trying to create a unified model for vehicles, there should be some different specification which is easier to understand and develop with.","Integration testing has to be done in the real world.  You can unit test every component in software with data, but you have to do real-world testing to see if everything works.  Since this can't realistically be automated or easily scaled, it requires more care in the testing that you can do offline.","I think there are ""practices"" yet.",Academic/Scientist,9,Male,1-10
03/07/2019 22:49:57,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Factory automation, Construction","Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),3 (very often),3 (very often),4 (always),1 (almost never),3 (very often),3 (very often),4 (always),Don't know,,Jira,Excel,Docs,"Intellij, visual studio code, clion",ROS,"Ur-sim, gtest, unittest, karma, protractor, cucumber, circleci","Rosbag, in-house logging and reporting","Intellij, visual studio code, clion",4 (always),4 (always),4 (always),2 (sometimes),Don't know,Don't know,,2 (sometimes),Don't know,3 (very often),Don't know,,2 (sometimes),0 (never),3 (very often),3 (very often),0 (never),2 (sometimes),0 (never),0 (never),0 (never),,ROS,"Proprietary, Open source",Proprietary,2 (sometimes),1 (almost never),2 (sometimes),2 (sometimes),Don't know,1 (almost never),1 (almost never),Don't know,,"Lack of documentation, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Both equally,"We rely on the experience and skills of our team, We follow a standard (please specify below)",Ros actionlib,3 (very often),3 (very often),2 (sometimes),2 (sometimes),2 (sometimes),Don't know,Manual functional quality tests,"Manual specification based on experience, Runtime monitoring",Logs,"Developer, Non-technical end-user, Technically skilled end-user",3 (very often),0 (never),0 (never),0 (never),Don't know,,3 (agree),3 (agree),3 (agree),2 (neutral),Don't know,3 (agree),4 (strongly agree),4 (strongly agree),Don't know,Don't know,Don't know,Don't know,,"Automated testing, linting, code quality monitoring",When working with HW the development loop is long.,"Robots engineering required higher degree of robustness, while at the same time is harder to achieve",,Industrial practitioner: Leading Technical Role,R,Male,11-30
03/07/2019 23:19:19,"Mobile robots (i.e., ground robots with navigation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body)",General research on service robots,"Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",3 (very often),Don't know,1 (almost never),4 (always),0 (never),3 (very often),2 (sometimes),1 (almost never),Don't know,,TAIGA.IO,,DRAW.IO,"Pycharm, Sublime, Terminator terminal",,"Gazebo, Rviz, RQT",roslaunch,Pycharm,4 (always),Don't know,2 (sometimes),Don't know,Don't know,Don't know,,Don't know,Don't know,4 (always),Don't know,,1 (almost never),Don't know,2 (sometimes),4 (always),Don't know,Don't know,Don't know,Don't know,Don't know,,ROS,"Proprietary, Open source","Proprietary, Open source",3 (very often),2 (sometimes),Don't know,2 (sometimes),Don't know,2 (sometimes),Don't know,Don't know,,"Lack of documentation, Lack of trust, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,1 (almost never),3 (very often),2 (sometimes),2 (sometimes),Don't know,Don't know,,"Simulation, Runtime monitoring",debuging sessions and code reviews,"Developer, Non-technical end-user, Technically skilled end-user",2 (sometimes),0 (never),2 (sometimes),0 (never),Don't know,,3 (agree),3 (agree),4 (strongly agree),3 (agree),3 (agree),2 (neutral),2 (neutral),3 (agree),3 (agree),3 (agree),2 (neutral),Don't know,,"To address all of them, i strongly rely on teamwork and agile strategies. For lack of information/robstness on third-party code, I tend to do it myself or use it partially.",,"There are more technical fields approach in robotics engineering, hence a broader knowledge, or a large team to compensate.","No, it's fine by me",Academic/Scientist,1 year,Male,+50
04/07/2019 01:19:00,"Mobile robots (i.e., ground robots with navigation capabilities), Industrial arms","Factory automation, Transportation, General research on service robots",Drivers of low-level components,2 (sometimes),3 (very often),3 (very often),3 (very often),Don't know,3 (very often),3 (very often),3 (very often),Don't know,,"Excel, basecamp","Word, Excel","Libreoffice Draw, Visio, Dia","Linux, ARM gcc, gdb, tivaware, lm4flash",None,Lab equipment for testing. For simulation ltspice and pspice. For code run debug I use gdb,Rosbags,Git (bitbucket),Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,,Don't know,Don't know,Don't know,Don't know,,Don't know,3 (very often),2 (sometimes),2 (sometimes),Don't know,Don't know,Don't know,Don't know,Don't know,,ROS,Open source,Proprietary,3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),Don't know,,"Lack of documentation, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Copy-paste-modify,,,4 (always),3 (very often),3 (very often),3 (very often),Don't know,Don't know,,"Manual specification based on experience, Simulation",Lack of programming skills. Lack of college to help,Technically skilled end-user,Don't know,Don't know,Don't know,Don't know,Don't know,,3 (agree),3 (agree),3 (agree),3 (agree),Don't know,Don't know,2 (neutral),3 (agree),2 (neutral),2 (neutral),2 (neutral),Don't know,,Google search. Forums help...,Drivers are sometimes not well made so the software can't run properly,Physics are really important.,No,Industrial practitioner: Leading Technical Role,5,Male,11-30
04/07/2019 08:44:52,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Agriculture, Retail","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",2 (sometimes),4 (always),3 (very often),4 (always),4 (always),4 (always),3 (very often),4 (always),Don't know,,"github, Excel, Project","Excel,markdown, git","UML, Yed, Markdown, ansible","Sublime,vscode,vim,linux,ros,python,c++,javascript",python,"python, in-house","rosbag,roslaunch,systemd,rviz,vuejs,in-house,tmux","vscode,sublime,vim",3 (very often),2 (sometimes),2 (sometimes),3 (very often),0 (never),Don't know,,1 (almost never),Don't know,2 (sometimes),Don't know,,0 (never),2 (sometimes),4 (always),4 (always),0 (never),1 (almost never),1 (almost never),1 (almost never),Don't know,,"ROS, ROS 2.0","Proprietary, Open source",Proprietary,4 (always),3 (very often),2 (sometimes),4 (always),3 (very often),2 (sometimes),2 (sometimes),Don't know,,"Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We follow a precise architecture of the system",,2 (sometimes),2 (sometimes),4 (always),4 (always),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring","In many cases, this comes down to experience. Depending on the person and the issue at hand, a different member of the team may be more suited for a specific issue. This issue is delegated to the ""expert"" and they proceed to debug the issue.","Developer, Non-technical end-user",4 (always),0 (never),2 (sometimes),1 (almost never),0 (never),,Don't know,1 (disagree),3 (agree),1 (disagree),2 (neutral),4 (strongly agree),2 (neutral),4 (strongly agree),Don't know,2 (neutral),3 (agree),Don't know,,"Not sure I understand how to answer the question. We research solutions, test in simulation, then use test data, and finally on the live system in the real environment.",updating of debug utilities. Visualization software for robotics is an area with room for improvement. general purpose tools to quickly build user interfaces or graph data similar to idea of rviz but with new tools and web based (i.e. something I can host).,The breadth of knowledge required followed by depth in mathematics.,Yes. Most of what is practiced is multifaceted and requires domain specific knowledge. It is evolving quickly and will always be changing. What I mean to say is we should continue innovating and not stagnate by keeping internal research proprietary. It seems like there should be more communication from companies on advancements. We would all benefit from more opensource robotics work.,Industrial practitioner: Leading Technical Role,4,Male,11-30
04/07/2019 09:46:04,"Mobile robots (i.e., ground robots with navigation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Agriculture, Transportation, General research on service robots","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",3 (very often),3 (very often),2 (sometimes),4 (always),2 (sometimes),4 (always),4 (always),3 (very often),Don't know,,"Trello, Github Issues","Mind maps, Wikis",Whatever we have access to or is commonly used,"Eclipse, Sublime, QT-creator, PyCharm",In house,"MORSE, Gazebo","ROS, tmux",Same as implementation,3 (very often),1 (almost never),4 (always),2 (sometimes),0 (never),Don't know,,2 (sometimes),2 (sometimes),2 (sometimes),Don't know,,3 (very often),2 (sometimes),3 (very often),3 (very often),0 (never),1 (almost never),0 (never),3 (very often),Don't know,,ROS,"Proprietary, Open source","Proprietary, Open source",4 (always),4 (always),2 (sometimes),4 (always),4 (always),4 (always),2 (sometimes),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,3 (very often),3 (very often),3 (very often),3 (very often),1 (almost never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Varied,"Developer, Non-technical end-user, Technically skilled end-user, Integrator",3 (very often),3 (very often),Don't know,2 (sometimes),Don't know,,1 (disagree),3 (agree),2 (neutral),2 (neutral),2 (neutral),3 (agree),2 (neutral),3 (agree),2 (neutral),2 (neutral),2 (neutral),Don't know,,Tight loop of testing and development around the real applicaitons.,,"Testing of complex, heterogenous systems in dynamic environments with only partial specifications of desired behaviour.",,Academic/Scientist,15 years,Male,+50
04/07/2019 10:01:14,"Mobile robots (i.e., ground robots with navigation capabilities), Surface vessels","Agriculture, Cleaning, General research on service robots","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",2 (sometimes),1 (almost never),2 (sometimes),4 (always),1 (almost never),4 (always),4 (always),1 (almost never),Don't know,,In-house,,,VIM,None,"Gazebo, V-Rep",There is no simple answer to this question,VIM,4 (always),2 (sometimes),3 (very often),2 (sometimes),0 (never),Don't know,,2 (sometimes),2 (sometimes),2 (sometimes),Don't know,,1 (almost never),2 (sometimes),4 (always),4 (always),1 (almost never),3 (very often),0 (never),0 (never),Don't know,,ROS,Open source,Open source,3 (very often),2 (sometimes),1 (almost never),2 (sometimes),3 (very often),3 (very often),1 (almost never),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",Other (please specify below),Not really applicable at the research level,2 (sometimes),3 (very often),3 (very often),2 (sometimes),1 (almost never),Don't know,,"Simulation, Runtime monitoring",It depends. I don't know how to answer this question. ,Developer,1 (almost never),0 (never),0 (never),4 (always),Don't know,,1 (disagree),1 (disagree),2 (neutral),1 (disagree),1 (disagree),3 (agree),2 (neutral),4 (strongly agree),4 (strongly agree),3 (agree),3 (agree),Don't know,,It depends,,Real-time interaction makes test repeatibility challenging for real systems,Possibly...,Academic/Scientist,17,Male,11-30
04/07/2019 16:03:07,"Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms","Factory automation, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",3 (very often),3 (very often),3 (very often),4 (always),1 (almost never),2 (sometimes),2 (sometimes),2 (sometimes),Don't know,,Jira,"Jira, Confluence",UML,"Sublime, QtCreator, PyCharm",,"Gazebo, GTest, ROS Test","rosbag, roslaunch, rqt, logging, gdb","Sublime, QtCreator, PyCharm, Gitlab, Docker",3 (very often),3 (very often),1 (almost never),2 (sometimes),2 (sometimes),Don't know,,2 (sometimes),Don't know,3 (very often),Don't know,,0 (never),1 (almost never),3 (very often),3 (very often),2 (sometimes),1 (almost never),0 (never),0 (never),Don't know,,ROS,"Proprietary, Open source","Proprietary, Open source",3 (very often),3 (very often),2 (sometimes),3 (very often),3 (very often),2 (sometimes),2 (sometimes),Don't know,,"Lack of documentation, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,3 (very often),4 (always),2 (sometimes),3 (very often),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Debugging and testing,"Technically skilled end-user, Integrator",4 (always),Don't know,Don't know,Don't know,Don't know,,2 (neutral),2 (neutral),3 (agree),3 (agree),3 (agree),3 (agree),4 (strongly agree),2 (neutral),1 (disagree),2 (neutral),1 (disagree),Don't know,,"Debugging, testing and good code practices.",,Industrial robots are generally locked down and vendors don't release software or expose proper API. Robotics in general involves hardware and real-life problems where things are not always well behaved.,Strive towards openness and research focussed on following standards and solving real world problems.,Industrial practitioner: Leading Technical Role,8,Male,11-30
04/07/2019 16:26:04,"Mobile robots (i.e., ground robots with navigation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Drones, Industrial arms","Factory automation, Cleaning, Entertainment","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",4 (always),4 (always),4 (always),4 (always),1 (almost never),4 (always),4 (always),3 (very often),Don't know,,"Trello, Google Sheets",Google Docs,Google Presentation,Visual Studio Code,in-house,"Gazebo, Jenkins","rviz,rosbag and many other ros tools",Visual Studio Code,4 (always),4 (always),3 (very often),0 (never),Don't know,Don't know,,0 (never),0 (never),4 (always),0 (never),,2 (sometimes),2 (sometimes),4 (always),4 (always),0 (never),0 (never),0 (never),0 (never),0 (never),,"ROS, OROCOS","Proprietary, Open source","Proprietary, Open source",3 (very often),3 (very often),1 (almost never),3 (very often),3 (very often),1 (almost never),1 (almost never),Don't know,,"Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We have a clear definition of interfaces of each component,,2 (sometimes),3 (very often),3 (very often),4 (always),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Spending lots of time investigating and thinking,"Non-technical end-user, Technically skilled end-user",0 (never),0 (never),0 (never),0 (never),Don't know,,2 (neutral),2 (neutral),2 (neutral),2 (neutral),2 (neutral),2 (neutral),4 (strongly agree),2 (neutral),2 (neutral),2 (neutral),2 (neutral),Don't know,,lots of time and effort,getting funding,"the iterations/test cycles take longer than most other domains (apps,servers,...), but not as long as flight/space for example.",I think we'll stick to coding 'lines' for a very long time. It works the best in practice. Maybe some new languages may help.,Industrial practitioner: Leading Technical Role,20,Male,31-50
04/07/2019 21:25:45,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Underwater robots","Transportation, Defense","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",2 (sometimes),1 (almost never),2 (sometimes),4 (always),4 (always),4 (always),4 (always),4 (always),Don't know,,"Github, waffle.io",Google Docs,Google Docs,"Vim, Geany",ROS message generation,"Gazebo, in-house tool","rosbag, roslaunch","vim, geany",4 (always),0 (never),3 (very often),3 (very often),3 (very often),Don't know,,0 (never),0 (never),4 (always),Don't know,,0 (never),3 (very often),4 (always),4 (always),0 (never),0 (never),0 (never),0 (never),0 (never),,ROS,Open source,Open source,4 (always),4 (always),Don't know,4 (always),4 (always),4 (always),1 (almost never),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,3 (very often),3 (very often),1 (almost never),4 (always),0 (never),Don't know,,Runtime monitoring,"Playback of data, debugging",Non-technical end-user,4 (always),0 (never),0 (never),0 (never),Don't know,,0 (strongly disagree),3 (agree),3 (agree),3 (agree),1 (disagree),1 (disagree),1 (disagree),2 (neutral),2 (neutral),3 (agree),0 (strongly disagree),Don't know,,software reuse - encourage modular components,,In complexity of cases,,Industrial practitioner: Programmer,3 years,Male,+50
04/07/2019 22:35:13,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Drones, Industrial arms","Factory automation, Cleaning, Logistics","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, High-level vision solutions",3 (very often),2 (sometimes),4 (always),4 (always),2 (sometimes),3 (very often),4 (always),3 (very often),Don't know,,"GitHub, GitLab, Trello, MinuteDock, Google G Suite, proprietary","Google G Suite, proprietary",Google G Suite,"QtCreator, VSCode, QtCreator",,Gazebo,"rosbag, roslaunch, proprietary tools for logging, profiling and report generation","Git, GitHub, Jenkins, bloom",3 (very often),2 (sometimes),3 (very often),2 (sometimes),2 (sometimes),Don't know,,2 (sometimes),Don't know,4 (always),Don't know,,1 (almost never),2 (sometimes),4 (always),3 (very often),2 (sometimes),0 (never),2 (sometimes),0 (never),Don't know,,"ROS, ROS 2.0, OROCOS",Open source,"Proprietary, Open source",3 (very often),2 (sometimes),3 (very often),3 (very often),3 (very often),2 (sometimes),2 (sometimes),Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions",Both equally,We rely on the experience and skills of our team,,3 (very often),4 (always),2 (sometimes),4 (always),1 (almost never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring","integration and end-to-end tests, mostly manual analysis and debugging","Developer, Non-technical end-user, Integrator",2 (sometimes),0 (never),1 (almost never),0 (never),Don't know,,2 (neutral),3 (agree),2 (neutral),3 (agree),3 (agree),3 (agree),1 (disagree),4 (strongly agree),1 (disagree),2 (neutral),1 (disagree),Don't know,,"Software reuse:
- find a good balance between quick solutions and generality
- document and (internally)

Lack of documentation (or actually lack of visible documentation):
- encourage developers to add documentation
- centralized internal platform to search documentation

Lack of standards:
- Company guidelines
- Tech talks and tutorials
- Addressing standards and best practices during code reviews

Validating the robotic system:
- Define test cases before the actual design and implementation",,"Not so much, but I am lacking experience in other domains. Maybe the consequences of bugs or design errors can be more severe/expensive than in other domains.",,Industrial practitioner: Leading Technical Role,11,Male,31-50
06/07/2019 08:45:58,"Mobile robots (i.e., ground robots with navigation capabilities)","Factory automation, Medical, Hospitality","Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),4 (always),4 (always),4 (always),4 (always),4 (always),4 (always),4 (always),Don't know,,GitHub,"Google Docs, GitHub","Draw.io, Google Slides, Pen & Paper","Vim, VSCode, Atom, ... (Developer decides)",python,"Gazebo, in-house tools","rosbag, Wireshark, matplotlib, in-house tools",Same as above,4 (always),4 (always),2 (sometimes),2 (sometimes),4 (always),Don't know,,1 (almost never),0 (never),4 (always),Don't know,,0 (never),0 (never),4 (always),4 (always),0 (never),0 (never),0 (never),0 (never),Don't know,,ROS,Open source,Proprietary,4 (always),4 (always),0 (never),4 (always),4 (always),2 (sometimes),4 (always),Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Favouring self-developed solutions","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,4 (always),4 (always),4 (always),4 (always),0 (never),Don't know,,"Manual specification based on experience, Runtime monitoring",Human investigation (data visualization or hardware inspection),Non-technical end-user,3 (very often),0 (never),0 (never),3 (very often),Don't know,,1 (disagree),3 (agree),3 (agree),3 (agree),3 (agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),3 (agree),3 (agree),4 (strongly agree),Softwarw deployment,Validation: A/B testing,,Roboticists know more about hardware (esp. sensors) and have more fun,,Industrial practitioner: Leading Technical Role,8,Male,11-30
07/07/2019 20:38:37,Drones,Education,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",3 (very often),2 (sometimes),3 (very often),Don't know,1 (almost never),2 (sometimes),Don't know,3 (very often),2 (sometimes),,"Asana, GitHub, Telegram","Asana, Google Docs","Brain, whiteboard","VSCode, CLion, PyCharm, QT Creator, vim",,Gazebo,,,3 (very often),2 (sometimes),4 (always),2 (sometimes),2 (sometimes),4 (always),"ROS, pub/sub",2 (sometimes),2 (sometimes),3 (very often),2 (sometimes),,1 (almost never),3 (very often),4 (always),3 (very often),0 (never),0 (never),0 (never),2 (sometimes),2 (sometimes),"JavaScript, Bash, Swift","ROS, PX4 Platform",Open source,Open source,3 (very often),3 (very often),2 (sometimes),1 (almost never),3 (very often),4 (always),1 (almost never),0 (never),,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions",Both equally,"We rely on the experience and skills of our team, We follow a precise architecture of the system",,1 (almost never),3 (very often),2 (sometimes),2 (sometimes),0 (never),4 (always),Manual testing,"Simulation, Runtime monitoring",Difficulty of the projects,"Developer, Technically skilled end-user, Integrator",3 (very often),0 (never),2 (sometimes),0 (never),0 (never),,3 (agree),2 (neutral),2 (neutral),1 (disagree),3 (agree),4 (strongly agree),2 (neutral),4 (strongly agree),Don't know,3 (agree),1 (disagree),Don't know,,Am I supposed to write an essay about challenges in robotics in an input field in a random Google Form?,Applying theoretical and lab things to the real world,The real world makes much more changes,,Industrial practitioner: Leading Technical Role,3,Male,+50
08/07/2019 10:29:01,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Drones","Factory automation, Transportation, Search and Rescue","Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",3 (very often),2 (sometimes),3 (very often),3 (very often),1 (almost never),2 (sometimes),3 (very often),2 (sometimes),Don't know,,,,"PowerPoint, UML",Visual Studio Code,,Gazebo,"roslaunch, rosbag","Visual Studio Code, git, github",3 (very often),1 (almost never),2 (sometimes),2 (sometimes),Don't know,Don't know,,Don't know,Don't know,Don't know,Don't know,,0 (never),0 (never),4 (always),2 (sometimes),1 (almost never),1 (almost never),0 (never),0 (never),Don't know,,ROS,"Proprietary, Open source",Open source,3 (very often),2 (sometimes),Don't know,3 (very often),3 (very often),2 (sometimes),1 (almost never),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Both equally,We rely on the experience and skills of our team,,3 (very often),2 (sometimes),3 (very often),1 (almost never),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Unit testing,"Developer, Non-technical end-user",3 (very often),0 (never),0 (never),0 (never),Don't know,,1 (disagree),2 (neutral),2 (neutral),3 (agree),3 (agree),2 (neutral),1 (disagree),3 (agree),2 (neutral),2 (neutral),2 (neutral),Don't know,,"github issues for software challenges, slack for hardware",,complex hardware and interaction with environment,,Academic/Scientist,15,Male,11-30
08/07/2019 18:09:45,Drones,"Agriculture, Transportation, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",2 (sometimes),2 (sometimes),3 (very often),4 (always),1 (almost never),4 (always),4 (always),4 (always),Don't know,,Github,,"UML, Whiteboard",CLion,-,Gazebo,"rosbag, roslaunch, multimaster_fkie, a ton of bash scripts,  rqt, rviz, the whole ros stuff",Github,4 (always),2 (sometimes),3 (very often),2 (sometimes),0 (never),Don't know,,Don't know,Don't know,3 (very often),3 (very often),Often no defined process (resarch implementations....),0 (never),2 (sometimes),3 (very often),3 (very often),1 (almost never),1 (almost never),1 (almost never),0 (never),0 (never),,ROS,Open source,Open source,4 (always),3 (very often),Don't know,4 (always),3 (very often),2 (sometimes),1 (almost never),Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), unusable implementations, matlab code only","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We follow a standard (please specify below)",ROS provides a nice interop standard through services/messages,3 (very often),2 (sometimes),2 (sometimes),4 (always),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring","Simulation, Experiments with rosbags","Developer, Integrator",2 (sometimes),0 (never),Don't know,Don't know,Don't know,,3 (agree),2 (neutral),4 (strongly agree),3 (agree),1 (disagree),3 (agree),Don't know,3 (agree),4 (strongly agree),2 (neutral),3 (agree),Don't know,,"Mission specification: State machines
Lack of documentation: Encouraging people to write documentation (e.g. make github wiki part of evaluated student thesis!)

Lack of standards: Hard to tackle in fast moving research environment. Standards can also be prohibitive in advancing the field

Validation: Real-world tests (gradually ramping up difficulty)
Robustness: Hard to quantify and to ensure (otherwise robotics wouldn't be as hard...)

Dynamic adaption: Still quite unsolved overall

","- Deep learning specifically: Network architectures not always open sourced / hard to compare 

- ROS solves a lot of the ugly problems of large-scale software architecture

- People that work in matlab.... 
","- Much tighter integration with hardware
- Meaningful! automated testing is not there yet
- Missing modularity and standard interfaces for deep learned stuff
","- Better understanding for software architecture in general would help. Getting people away from the Matlab/Simulink mentality of not taking ownership of code and not looking at code as the language to specify things

- More automated testing",Academic/Scientist,4,Male,+50
10/07/2019 05:11:22,"Mobile robots (i.e., ground robots with navigation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Medical, General research on service robots","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",4 (always),1 (almost never),2 (sometimes),4 (always),2 (sometimes),2 (sometimes),3 (very often),2 (sometimes),Don't know,,Trello,,OmniGraffle,"Sublime Text, VS Code, Anaconda, in-house tools",in-house tool/language,Nosetests,rosbag,GitLab-runner,3 (very often),2 (sometimes),2 (sometimes),1 (almost never),1 (almost never),Don't know,,0 (never),0 (never),2 (sometimes),Don't know,,0 (never),0 (never),2 (sometimes),3 (very often),0 (never),0 (never),3 (very often),2 (sometimes),3 (very often),JavaScript,ROS,"Proprietary, Open source",Open source,3 (very often),2 (sometimes),0 (never),3 (very often),1 (almost never),2 (sometimes),2 (sometimes),Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Internal policies, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions",Both equally,We rely on the experience and skills of our team,,2 (sometimes),2 (sometimes),2 (sometimes),2 (sometimes),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",blame game,"Non-technical end-user, Technically skilled end-user",3 (very often),0 (never),2 (sometimes),3 (very often),Don't know,,2 (neutral),3 (agree),1 (disagree),3 (agree),3 (agree),Don't know,Don't know,3 (agree),4 (strongly agree),3 (agree),1 (disagree),Don't know,,software reuse: automated packaging. interoperability: shell-script launch files,,Expectations for quality and reliability are very low in robotics.,,Industrial practitioner: Leading Technical Role,5,Prefer not to say,11-30
11/07/2019 21:40:47,Industrial arms,"Factory automation, Food",Development Service,2 (sometimes),1 (almost never),3 (very often),4 (always),2 (sometimes),4 (always),4 (always),4 (always),Don't know,,"JIRA, Trello",Confluence,Pen and paper,"CLion, Emacs",GSL,"Pytest,  Catch","Roslaunch, ...","CLion, Emacs",4 (always),2 (sometimes),2 (sometimes),2 (sometimes),1 (almost never),4 (always),Declarative Programming,1 (almost never),1 (almost never),3 (very often),Don't know,,0 (never),1 (almost never),3 (very often),4 (always),1 (almost never),0 (never),1 (almost never),0 (never),Don't know,,"ROS, ROS 2.0","Proprietary, Open source","Proprietary, Open source",3 (very often),2 (sometimes),2 (sometimes),3 (very often),3 (very often),2 (sometimes),1 (almost never),Don't know,,"Lack of documentation, Licensing issues","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We have a clear definition of interfaces of each component, We follow a standard (please specify below)",ROS,4 (always),4 (always),2 (sometimes),4 (always),1 (almost never),Don't know,Model checking,"Manual specification based on experience, Simulation, Runtime monitoring","Testing, debugging and simulation",Technically skilled end-user,Don't know,Don't know,Don't know,4 (always),Don't know,,3 (agree),1 (disagree),1 (disagree),1 (disagree),2 (neutral),4 (strongly agree),3 (agree),2 (neutral),2 (neutral),2 (neutral),1 (disagree),Don't know,,Skills and knowledge,Finding talent to implement the software.,Extremely complex tasks with very diverese environment. Defintely more indeterminstic than other domains.,,Industrial practitioner: Programmer,1.5,Male,1-10
11/07/2019 22:57:04,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Underwater robots","Factory automation, Cleaning, General research on service robots","Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation)",2 (sometimes),3 (very often),3 (very often),4 (always),2 (sometimes),3 (very often),3 (very often),2 (sometimes),0 (never),,"Trello, MS Project, in-house tools ",Mostly word processors,"Dia, UML, Tikz","VS Code, PyCharm, ","N/A, Varies","Gazebo, MARS (in-house), pyBullet","ROS, ROCK (in-house)","VS Code, github, gitlab",4 (always),2 (sometimes),2 (sometimes),0 (never),0 (never),0 (never),,1 (almost never),2 (sometimes),2 (sometimes),0 (never),,1 (almost never),0 (never),3 (very often),4 (always),1 (almost never),2 (sometimes),0 (never),2 (sometimes),0 (never),,"ROS, OROCOS, ROCK (in-house, related to OROCOS)","Proprietary, Open source",Open source,3 (very often),2 (sometimes),2 (sometimes),3 (very often),2 (sometimes),1 (almost never),1 (almost never),0 (never),,"Lack of documentation, Lack of trust, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Copy-paste-modify,"We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,2 (sometimes),2 (sometimes),1 (almost never),2 (sometimes),0 (never),0 (never),,"Manual specification based on experience, Simulation","Debugging, Unit Testing, Experience","Technically skilled end-user, Integrator",3 (very often),1 (almost never),2 (sometimes),2 (sometimes),0 (never),,3 (agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),3 (agree),3 (agree),2 (neutral),3 (agree),4 (strongly agree),4 (strongly agree),2 (neutral),0 (strongly disagree),,"For software reuse we are trying to standarize on ROS/ROS2, Documentation always requires time and effort to make, for which we are reorganizing teams. For simuation-reality gap, we use reinforcement learning and do research in this direction.","A good standard software framework and language would be nice to have, ROS2 is going in this direction, so components in many languages can interact easily. Docker is also promising  to ""package"" software.","Yes, Robots are more complex than other domains. Research moves fast and sometimes it is hard to keep up and implementing state of the art algorithms, specially in Artificial INtelligence",More community involvement and standarization would be nice.,Academic/Scientist,7,Male,+50
15/07/2019 00:07:08,"Mobile robots (i.e., ground robots with navigation capabilities)","General research on service robots, Artificial Assistant ","Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),4 (always),4 (always),4 (always),2 (sometimes),2 (sometimes),4 (always),4 (always),Don't know,,Excel and email,Word and Sketchbook,Sketchup and sketchbook,Linux,Python,LEGO Mindstorms,Custom python code with webcam and notepad,Linux bash scripts,1 (almost never),3 (very often),Don't know,1 (almost never),Don't know,Don't know,,Don't know,2 (sometimes),2 (sometimes),Don't know,,2 (sometimes),Don't know,Don't know,4 (always),Don't know,Don't know,Don't know,Don't know,Don't know,,"None, custom Linux software",Open source,Open source,4 (always),4 (always),3 (very often),4 (always),4 (always),4 (always),4 (always),Don't know,,"Lack of trust, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Copy-paste-modify,"We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,4 (always),4 (always),4 (always),3 (very often),Don't know,Don't know,,Don't know,"Funding and computing hardware limitations (Raspberry Pi, although new models should now be fine as they have 4GB of RAM)","Developer, Non-technical end-user, Technically skilled end-user",Don't know,Don't know,Don't know,Don't know,Don't know,,2 (neutral),2 (neutral),1 (disagree),3 (agree),1 (disagree),0 (strongly disagree),4 (strongly agree),3 (agree),1 (disagree),3 (agree),3 (agree),Don't know,,We had an issue with weight. We now use 3D printed parts which are quite a lot lighter.,The adoption of robotic systems in society and proper moral and ethical judgement for AI.,The software needs to correspond with the precision of motors and electrical parts.,"No, although I would like more software to be open source.",,2,Male,1-10
15/07/2019 18:09:09,"Humanoid robots (i.e., a robot with its body shape built to resemble the human body)",RoboCup Soccer,"Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",2 (sometimes),1 (almost never),3 (very often),4 (always),0 (never),3 (very often),3 (very often),3 (very often),Don't know,,"Jira, Github Issues",None,UML (in LaTeX or draw.io),"Jetbrains IDEs (CLion and PyCharm), Visual Studio Code",None,"Gazebo, rViz",multiple ROS tools,"Jetbrains IDEs (CLion and PyCharm), Visual Studio Code, Git",4 (always),2 (sometimes),1 (almost never),0 (never),0 (never),Don't know,,3 (very often),0 (never),3 (very often),Don't know,,0 (never),2 (sometimes),3 (very often),3 (very often),2 (sometimes),0 (never),2 (sometimes),0 (never),0 (never),,ROS,Open source,Open source,2 (sometimes),Don't know,3 (very often),2 (sometimes),Don't know,Don't know,Don't know,Don't know,,"Lack of documentation, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions",Both equally,"We rely on the experience and skills of our team, We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,2 (sometimes),3 (very often),1 (almost never),3 (very often),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Difference to expected result in integration tests,Developer,3 (very often),0 (never),0 (never),3 (very often),0 (never),,1 (disagree),0 (strongly disagree),3 (agree),3 (agree),4 (strongly agree),3 (agree),0 (strongly disagree),3 (agree),0 (strongly disagree),3 (agree),0 (strongly disagree),Don't know,,"Lack of documentation: Enforce documentation in Pull Requests
Lack of standards/Interoperability: Improve communication between component developers
Validating/Robustness: Regular integration tests in simulation and real world",,The integration of very different engineering domains in a coherent project is a huge challenge,,Academic/Scientist,2,Male,11-30
18/07/2019 11:12:43,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms","Factory automation, Medical, General research on service robots",Planning and orchestration modules,2 (sometimes),2 (sometimes),2 (sometimes),4 (always),2 (sometimes),3 (very often),3 (very often),4 (always),Don't know,,"Asana, GitHub",Google Docs,Google Docs,"vim, Visual Studio Code, Qt Creator, others",empy,"Gazebo, Jenkins, GTest, Catch2",,"vim, Visual Studio Code, Qt Creator",3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),Don't know,,0 (never),0 (never),1 (almost never),Don't know,,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,,"ROS, ROS 2.0",Open source,Open source,3 (very often),2 (sometimes),3 (very often),3 (very often),3 (very often),2 (sometimes),2 (sometimes),Don't know,,"Lack of documentation, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,,Simulation,Debugging,"Developer, Technically skilled end-user",0 (never),0 (never),0 (never),0 (never),0 (never),,3 (agree),2 (neutral),4 (strongly agree),3 (agree),3 (agree),3 (agree),4 (strongly agree),3 (agree),3 (agree),2 (neutral),2 (neutral),Don't know,,effort,,Extreme complexity. Interfacing with physical systems makes debugging harder.,,Industrial practitioner: Programmer,10,Male,31-50
25/07/2019 10:56:02,"Mobile robots (i.e., ground robots with navigation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Medical, General research on service robots","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules",4 (always),4 (always),4 (always),4 (always),1 (almost never),3 (very often),3 (very often),1 (almost never),Don't know,,Redmine,Entreprise Architect,Entreprise Architect,"IntelliJ, Visual Studio",Enterprise Architect/ Cumcuber/ Lettuce / Python,Enterprise Architect/ Cumcuber/ Lettuce,in-house tool,"IntelliJ, Visual Studio",3 (very often),2 (sometimes),2 (sometimes),2 (sometimes),Don't know,Don't know,,2 (sometimes),3 (very often),3 (very often),Don't know,,3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),1 (almost never),1 (almost never),1 (almost never),Don't know,,ROS,Open source,"Proprietary, Open source",3 (very often),2 (sometimes),2 (sometimes),3 (very often),3 (very often),3 (very often),3 (very often),Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Internal policies, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Both equally,,,4 (always),4 (always),4 (always),1 (almost never),4 (always),Don't know,"usability and user acceptance testing using usability scales (SUS, USE, PPSUQ)",Manual specification based on experience,Lack of requirement specification,"Developer, Non-technical end-user, Technically skilled end-user",3 (very often),0 (never),0 (never),0 (never),Don't know,,3 (agree),3 (agree),3 (agree),4 (strongly agree),4 (strongly agree),2 (neutral),2 (neutral),2 (neutral),2 (neutral),2 (neutral),2 (neutral),Don't know,,spend time talking to end-users (for most of the challenges addressed before),,it still lacks some adherence with development methodologies,"yes, take advantage of the methodologies used in software development",Principal researcher at research and technology transfer organization (interface organization not academic and not industrial),10+,Male,11-30
31/07/2019 09:17:16,"Mobile robots (i.e., ground robots with navigation capabilities), Drones","Infrastructure, Safety","Complete robotic system (e.g., BOSCH's lawnmower)",2 (sometimes),1 (almost never),1 (almost never),4 (always),1 (almost never),1 (almost never),2 (sometimes),3 (very often),Don't know,,"Pen, paper, mouth, text file, Writer","Pen, paper, mouth, text file, Writer","Pen, paper, mouth, text file, Writer, Latex","Qt-Creator, text editor (e.g. Kate, gedit)","ROS, in-house tool","Gaden (open source project), in-house tool",Migrated from rosbag to in-house tool,"Qt-Creator, text editor (e.g. Kate, gedit)",4 (always),2 (sometimes),3 (very often),2 (sometimes),0 (never),Don't know,,Don't know,Don't know,Don't know,Don't know,,0 (never),2 (sometimes),4 (always),3 (very often),0 (never),2 (sometimes),0 (never),0 (never),Don't know,,ROS,Open source,Open source,2 (sometimes),0 (never),Don't know,2 (sometimes),2 (sometimes),1 (almost never),0 (never),Don't know,,"Lack of documentation, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,1 (almost never),0 (never),2 (sometimes),1 (almost never),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring","Debugging (gdb, valgrind)",Developer,2 (sometimes),0 (never),0 (never),0 (never),2 (sometimes),Optimisation algorithm,0 (strongly disagree),2 (neutral),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),2 (neutral),4 (strongly agree),4 (strongly agree),1 (disagree),1 (disagree),Don't know,,We do not solve the problems.,,"I think there is no big difference. Usually, the GUI is more simple.",In the case of my research group: yes. The software engineering needs to become much more professional.,Academic/Scientist,7,Male,+50
31/07/2019 10:17:03,"Mobile robots (i.e., ground robots with navigation capabilities)","Factory automation, General research on service robots","Complete robotic system (e.g., BOSCH's lawnmower)",3 (very often),2 (sometimes),2 (sometimes),4 (always),0 (never),3 (very often),2 (sometimes),3 (very often),Don't know,,Asana,in house tools,in house tool,VScode,,"Gasebo, Stage","rosbag, roslaunch, in house tools",VScode,4 (always),1 (almost never),2 (sometimes),2 (sometimes),0 (never),0 (never),,0 (never),0 (never),0 (never),0 (never),,0 (never),Don't know,4 (always),2 (sometimes),0 (never),0 (never),0 (never),0 (never),3 (very often),JavaScript,ROS,Open source,Open source,3 (very often),3 (very often),3 (very often),4 (always),3 (very often),2 (sometimes),1 (almost never),0 (never),,"Lack of documentation, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Both equally,"We have a clear definition of interfaces of each component, We follow a standard (please specify below)",ROS messages,0 (never),3 (very often),3 (very often),0 (never),0 (never),0 (never),,"Simulation, Runtime monitoring",Debugging,"Developer, Integrator",4 (always),0 (never),0 (never),0 (never),0 (never),,0 (strongly disagree),1 (disagree),2 (neutral),0 (strongly disagree),0 (strongly disagree),3 (agree),0 (strongly disagree),2 (neutral),2 (neutral),1 (disagree),0 (strongly disagree),0 (strongly disagree),,"Software reuse, Lack of documentation: More labour;
All others: testing",,"Robotics software is always interfacing hardware,  - mechanical constraints needs to be taken into account.",,Industrial practitioner: Programmer,4,Male,1-10
31/07/2019 12:28:14,"Mobile robots (i.e., ground robots with navigation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Drones","Transportation, Market studies","Complete robotic system (e.g., BOSCH's lawnmower), Computer vision systems applied to robots",3 (very often),2 (sometimes),2 (sometimes),3 (very often),2 (sometimes),4 (always),4 (always),3 (very often),Don't know,,"Jira, Trello",Confluence,"Rational Rose, UML","Visual Studio, PyCharm, Eclipse","Matlab, Python, C++",Gazebo,"rosbag, roslaunch","Visual Studio, PyCharm, Eclipse",4 (always),2 (sometimes),0 (never),2 (sometimes),1 (almost never),Don't know,,2 (sometimes),2 (sometimes),4 (always),Don't know,,2 (sometimes),3 (very often),3 (very often),4 (always),2 (sometimes),2 (sometimes),1 (almost never),1 (almost never),Don't know,,"ROS, ROS 2.0",Open source,"Proprietary, Open source",4 (always),3 (very often),4 (always),3 (very often),2 (sometimes),4 (always),3 (very often),Don't know,,Licensing issues,Both equally,"We rely on the experience and skills of our team, We follow a precise architecture of the system",,3 (very often),4 (always),3 (very often),4 (always),Don't know,Don't know,,"Manual specification based on experience, Simulation","Code reviews (i.e., pull-requests in Bitbucket), team meetings, simluation and real tests","Developer, Non-technical end-user, Technically skilled end-user",3 (very often),0 (never),1 (almost never),1 (almost never),Don't know,,4 (strongly agree),2 (neutral),1 (disagree),1 (disagree),2 (neutral),2 (neutral),3 (agree),2 (neutral),3 (agree),4 (strongly agree),1 (disagree),Don't know,,"Promote documentation tools, architecture design, simulation and real tests, correct application of AI...","The greatest challenge is the gap between simulated and real world. Specially in academia, some solutions are only developed for simulated environments and they are not finally used in real world. All of us should keep in mind to design systems able to work in real cases.",They need more hardware skills and a higher level of abstraction,"Probably, tests in real cases should be more monitored and teams should be more connected (i.e. hardware and software experts, I use to feel a lack in this sense)",Academic/Scientist,7,Male,+50
31/07/2019 14:36:16,"Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Factory automation, Transportation","Complete robotic system (e.g., BOSCH's lawnmower)",2 (sometimes),4 (always),3 (very often),3 (very often),0 (never),4 (always),4 (always),2 (sometimes),Don't know,,Jira," Jira, Confluence",,"neovim, vs code, c lion, pycharm",,"Gazebo, pytest, in-house",,"neovim, vs code, c lion, pycharm",4 (always),2 (sometimes),3 (very often),2 (sometimes),1 (almost never),Don't know,,0 (never),1 (almost never),4 (always),Don't know,,0 (never),1 (almost never),Don't know,3 (very often),0 (never),0 (never),0 (never),0 (never),Don't know,,ROS,Open source,"Proprietary, Open source",3 (very often),3 (very often),2 (sometimes),4 (always),4 (always),2 (sometimes),3 (very often),Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We have a clear definition of interfaces of each component,,4 (always),4 (always),4 (always),3 (very often),Don't know,Don't know,,"Simulation, Runtime monitoring",.,Non-technical end-user,Don't know,Don't know,Don't know,Don't know,Don't know,,4 (strongly agree),1 (disagree),1 (disagree),3 (agree),3 (agree),3 (agree),4 (strongly agree),4 (strongly agree),2 (neutral),2 (neutral),1 (disagree),Don't know,,.,,"Safety certification, sensor reliability, human interaction",,Industrial practitioner: Programmer,6 years,Male,+50
31/07/2019 14:55:35,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities)","Factory automation, Transportation, General research on service robots","Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),1 (almost never),3 (very often),4 (always),2 (sometimes),4 (always),4 (always),4 (always),Don't know,,Github projects,"Word, Excel",Powerpoint,"Sublime, PyCharm",in-house,"Gazebo, in-house","rosbag, roslaunch, RViz","Sublime, PyCharm",4 (always),0 (never),4 (always),1 (almost never),0 (never),Don't know,,0 (never),0 (never),4 (always),Don't know,,2 (sometimes),0 (never),3 (very often),3 (very often),0 (never),0 (never),0 (never),0 (never),0 (never),,"ROS, OROCOS",Proprietary,"Proprietary, Open source",4 (always),4 (always),4 (always),4 (always),4 (always),4 (always),3 (very often),Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces), Favouring self-developed solutions","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,2 (sometimes),2 (sometimes),3 (very often),4 (always),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Manual testing and integration tests,"Developer, Non-technical end-user, Technically skilled end-user",0 (never),0 (never),0 (never),0 (never),Don't know,RoboCup Rulebook,2 (neutral),3 (agree),3 (agree),3 (agree),3 (agree),4 (strongly agree),3 (agree),3 (agree),4 (strongly agree),1 (disagree),3 (agree),Don't know,,Validating a robot system with behaviour when you have only 1 physical robot is hard. We have a dedicated  Q/A person who manages the robot and reports bugs to implementers. But this does not fully address the issue. ,"Re-using behaviours (like docking, grasping, greeting people)","There is so much uncertainty and thus options for failure. Also the heterogeneity is still very high, many different robots. ",,Industrial practitioner: Programmer,6,Male,11-30
31/07/2019 23:01:37,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Underwater robots",General research on robot applications,"Drivers of low-level components, Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),2 (sometimes),3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),Don't know,,"gitlab, MS Project",gitlab,"power point, uml, latex documents",vim,"oroGen, Robot Construction Kit (Rock)","Mars Simulator, Gazebo",Robot Construction Kit (Rock),vim,4 (always),1 (almost never),4 (always),4 (always),1 (almost never),Don't know,,2 (sometimes),2 (sometimes),3 (very often),Don't know,,Don't know,2 (sometimes),3 (very often),3 (very often),2 (sometimes),Don't know,3 (very often),2 (sometimes),Don't know,,"ROS, OROCOS, Robot Construction Kit (Rock)","Proprietary, Open source",Open source,4 (always),4 (always),4 (always),4 (always),4 (always),4 (always),3 (very often),Don't know,,"Lack of documentation, Lack of trust, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We have a clear definition of interfaces of each component,,3 (very often),3 (very often),3 (very often),2 (sometimes),0 (never),Don't know,,"Simulation, Runtime monitoring",Technical Debugging by applying failure source isolation techniques,"Developer, Technically skilled end-user, Integrator",1 (almost never),0 (never),0 (never),0 (never),0 (never),,3 (agree),3 (agree),3 (agree),3 (agree),3 (agree),3 (agree),1 (disagree),3 (agree),2 (neutral),3 (agree),2 (neutral),Don't know,,"Model-based and component-based development, integration testing, introduction of quality criteria and levels for sw libraries",establishing standards / agreeing on a common development models,stronger need to tackle  hw+sw integration (not just sw),it should get more professional,Academic/Scientist,10,Male,+50
01/08/2019 01:16:21,"Mobile robots (i.e., ground robots with navigation capabilities)",General research on service robots,"Complete robotic system (e.g., BOSCH's lawnmower)",3 (very often),1 (almost never),3 (very often),3 (very often),Don't know,3 (very often),3 (very often),3 (very often),Don't know,,git,,,kdevelop,,gazebo,ros,kdevelop,4 (always),0 (never),Don't know,Don't know,Don't know,Don't know,,Don't know,Don't know,Don't know,Don't know,,Don't know,Don't know,4 (always),Don't know,Don't know,Don't know,Don't know,Don't know,Don't know,,"ROS, ROS 2.0",Open source,Open source,3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),0 (never),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Both equally,,,0 (never),0 (never),2 (sometimes),0 (never),0 (never),Don't know,,Don't know,debugging,Me,Don't know,Don't know,Don't know,Don't know,Don't know,,0 (strongly disagree),0 (strongly disagree),2 (neutral),1 (disagree),3 (agree),2 (neutral),Don't know,Don't know,4 (strongly agree),3 (agree),3 (agree),Don't know,,Scientific literature,,Hardware dependence + complexity,,Hobby,5,Male,
01/08/2019 03:49:42,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Humanoid robots (i.e., a robot with its body shape built to resemble the human body)",General research on service robots,Drivers of low-level components,2 (sometimes),Don't know,Don't know,2 (sometimes),Don't know,4 (always),Don't know,4 (always),Don't know,,,,,,,,,,4 (always),4 (always),1 (almost never),Don't know,Don't know,Don't know,,2 (sometimes),Don't know,Don't know,Don't know,,Don't know,3 (very often),3 (very often),3 (very often),Don't know,1 (almost never),Don't know,Don't know,Don't know,,"ROS, ROS 2.0",Open source,Open source,4 (always),3 (very often),Don't know,Don't know,Don't know,4 (always),Don't know,Don't know,,,Both equally,,,3 (very often),3 (very often),Don't know,4 (always),Don't know,Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Specification and implementation differences and lack of testing,Technically skilled end-user,3 (very often),Don't know,Don't know,Don't know,Don't know,,Don't know,3 (agree),Don't know,Don't know,Don't know,Don't know,3 (agree),Don't know,Don't know,Don't know,Don't know,Don't know,,When a robot behaves unexpectedly. I will conduct simulation tests to isolate environmental or implementation issues.,,Implement in consideration of hardware (robot movement).,,,,,
01/08/2019 15:09:14,"Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots)","Factory automation, Warehouse logistics","Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),4 (always),4 (always),4 (always),1 (almost never),4 (always),4 (always),4 (always),Don't know,,"Jira, Confluence","Jira, Confluence",Confluence,"vim, PyCharm, Clion",in-house tool,"Jenkins, pytest, rostest, gtest, in-house tools",most of the ROS tools,,3 (very often),1 (almost never),2 (sometimes),0 (never),0 (never),Don't know,,0 (never),0 (never),4 (always),Don't know,,0 (never),2 (sometimes),3 (very often),3 (very often),1 (almost never),0 (never),3 (very often),0 (never),Don't know,,ROS,"Proprietary, Open source","Proprietary, Open source",3 (very often),3 (very often),2 (sometimes),3 (very often),3 (very often),2 (sometimes),1 (almost never),Don't know,,"Lack of documentation, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We rely on the experience and skills of our team, We have a clear definition of interfaces of each component",,3 (very often),3 (very often),3 (very often),4 (always),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring","debugging, ROS introspection tools, custom logging and analysis tools","Developer, Warehouse management system",Don't know,Don't know,Don't know,3 (very often),Don't know,,3 (agree),3 (agree),2 (neutral),1 (disagree),2 (neutral),4 (strongly agree),3 (agree),4 (strongly agree),3 (agree),3 (agree),3 (agree),Don't know,,"BT for behavior specification and ROS packages both supporting software reuse, customer testing infrastructure for validation, statistical analyses for increasing robustness","Robustness and testing of autonomous, perception-driven robots that operate in changing, remote environments is a very hard problem.","Non-deterministic errors, hardware and environment interaction, ""test fixtures"" for testing mobile manipulation would involve resetting the physical world","Better testing and QA methods, more data-driven analysis of robot performance and problems, more enterprise-grade software engineering instead of research-style programming",Industrial practitioner: Leading Technical Role,14,Male,+50
05/08/2019 14:00:14,Small DIY robots,Education,Drivers of low-level components,4 (always),2 (sometimes),2 (sometimes),3 (very often),0 (never),4 (always),4 (always),2 (sometimes),Don't know,,Trello,Excel,Wikifactory,Arduino,,Arduino,,,2 (sometimes),3 (very often),0 (never),0 (never),0 (never),Don't know,,Don't know,Don't know,Don't know,Don't know,,2 (sometimes),4 (always),4 (always),1 (almost never),Don't know,0 (never),Don't know,Don't know,Don't know,,none,Open source,Open source,4 (always),3 (very often),3 (very often),4 (always),3 (very often),3 (very often),2 (sometimes),Don't know,,"Lack of documentation, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)",Copy-paste-modify,We rely on the experience and skills of our team,,3 (very often),0 (never),0 (never),3 (very often),0 (never),Don't know,,Manual specification based on experience,debugging,"Developer, Technically skilled end-user",0 (never),0 (never),Don't know,Don't know,Don't know,,3 (agree),2 (neutral),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),3 (agree),2 (neutral),3 (agree),4 (strongly agree),Don't know,,Wikifactory,unifying standards,robotics software involves hardware,,Industrial practitioner: Leading Technical Role,5,Male,1-10
06/08/2019 03:40:43,"Mobile robots (i.e., ground robots with navigation capabilities)",Software Infrastructure for Robots,General robotics components (e.g. logging),4 (always),2 (sometimes),2 (sometimes),4 (always),1 (almost never),4 (always),2 (sometimes),4 (always),Don't know,,in-house tool,Quip,Quip,nvim,in-house tool,Gazebo,ROS 2 core packages,nvim,4 (always),1 (almost never),4 (always),0 (never),0 (never),Don't know,,0 (never),0 (never),4 (always),Don't know,,0 (never),4 (always),4 (always),3 (very often),0 (never),0 (never),0 (never),0 (never),Don't know,,"ROS, ROS 2.0","Proprietary, Open source","Proprietary, Open source",4 (always),2 (sometimes),0 (never),4 (always),4 (always),4 (always),1 (almost never),Don't know,,,"Systematic reuse (e.g., frameworks, components, libraries, ...)",We rely on the experience and skills of our team,,4 (always),3 (very often),2 (sometimes),4 (always),0 (never),Don't know,,"Manual specification based on experience, Simulation, Runtime monitoring",Log analysis and manual debugging,N/A (do not develop robots),Don't know,Don't know,Don't know,Don't know,Don't know,,4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),4 (strongly agree),Don't know,,Reuse software,,Validating systems and algorithms is much harder,"Yes, better solutions for testing, validation and better software quality.",Industrial practitioner: Leading Technical Role,13,Male,+50
06/08/2019 09:20:33,"Mobile robots (i.e., ground robots with navigation capabilities), Mobile manipulators (i.e., mobile robots with manipulation capabilities), Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Drones, Industrial arms","Factory automation, Cleaning, Transportation, General research on service robots","Low-level functionalities (e.g., navigation, self-localisation), Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",3 (very often),3 (very often),3 (very often),4 (always),1 (almost never),4 (always),4 (always),4 (always),Don't know,,"Trello, GItHub",Google Docs,Draw.io graphs,"QT-Creator, VSCode, Vim",N/A,"Gazebo, Gtests",ROS Stack,"QT-Creator, VSCode, Vim",3 (very often),1 (almost never),3 (very often),Don't know,Don't know,Don't know,,0 (never),0 (never),3 (very often),0 (never),,1 (almost never),3 (very often),3 (very often),3 (very often),0 (never),0 (never),0 (never),0 (never),0 (never),,"ROS, OROCOS","Proprietary, Open source","Proprietary, Open source",3 (very often),3 (very often),3 (very often),3 (very often),3 (very often),0 (never),0 (never),0 (never),,"Lack of documentation, Licensing issues, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)","We follow a precise architecture of the system, We have a clear definition of interfaces of each component",,2 (sometimes),2 (sometimes),2 (sometimes),4 (always),0 (never),0 (never),,"Manual specification based on experience, Simulation, Runtime monitoring",Simulations and recorded data for post-mortem analysis,"Developer, Non-technical end-user, Technically skilled end-user",3 (very often),1 (almost never),0 (never),0 (never),0 (never),,2 (neutral),2 (neutral),3 (agree),3 (agree),3 (agree),2 (neutral),2 (neutral),3 (agree),2 (neutral),3 (agree),2 (neutral),Don't know,,Some best practices along with using correct interfaces help. Code generation and model based engineering would help even more but there is still way to go.,,It is much less structured and not mature enough.,,Both academic and industrial,7,Male,31-50
13/08/2019 11:06:47,"Collaborative robots (i.e., robots that are able through some mechanism to collaborate with humans or other robots), Industrial arms",General research on service robots,"Drivers of low-level components, Planning and orchestration modules",3 (very often),2 (sometimes),2 (sometimes),4 (always),1 (almost never),4 (always),4 (always),2 (sometimes),Don't know,,Redmine,Redmine wiki,Dia (including basic UML),"QT-Creator, Geany",MPS,Gazebo,"ros tools, in-house (vdemo)",,4 (always),2 (sometimes),4 (always),2 (sometimes),1 (almost never),Don't know,,3 (very often),0 (never),3 (very often),Don't know,,0 (never),2 (sometimes),4 (always),3 (very often),2 (sometimes),1 (almost never),2 (sometimes),0 (never),Don't know,,"ROS, OROCOS",Open source,Open source,3 (very often),2 (sometimes),2 (sometimes),3 (very often),3 (very often),3 (very often),1 (almost never),Don't know,,"Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We have a clear definition of interfaces of each component,,3 (very often),4 (always),2 (sometimes),2 (sometimes),Don't know,Don't know,,Simulation,experienced collaborators analyze tests and track reasons of failures,Don't know,3 (very often),Don't know,Don't know,2 (sometimes),Don't know,,1 (disagree),2 (neutral),3 (agree),1 (disagree),3 (agree),2 (neutral),Don't know,3 (agree),Don't know,3 (agree),2 (neutral),Don't know,,"interoperability: try migrate to cross-platform language/tool, lack of doc: use open-source and read code or re-document it ourselves, robustness: try find time for more long term tests to assess robustness, transition sim-real: improve sim by adding plugins to get closer to real behavior",,"not yet enough standards or robot-agnostic libraries, in comparison to application development for a ""standard computer"" ~= screen mouse and known peripherals","using best practice would be a start, changing them all the time does not help",Academic/Scientist,13,Male,11-30
29/08/2019 04:01:47,"Mobile robots (i.e., ground robots with navigation capabilities), Industrial arms",Logistics,"Planning and orchestration modules, Complete robotic system (e.g., BOSCH's lawnmower)",4 (always),4 (always),4 (always),4 (always),2 (sometimes),4 (always),4 (always),4 (always),Don't know,,"2 teams use Wrike, one team uses Jira",Google Docs+Wrike,Google Docs,"Sublime, ",Jetbrains,Gazebo,rapyuta.io/inhouse tooling,rapyuta.io/inhouse tooling,4 (always),Don't know,3 (very often),3 (very often),Don't know,Don't know,,Don't know,Don't know,3 (very often),Don't know,,Don't know,2 (sometimes),3 (very often),3 (very often),Don't know,Don't know,Don't know,Don't know,3 (very often),Golang,"ROS, ROS 2.0",Open source,"Proprietary, Open source",3 (very often),2 (sometimes),Don't know,Don't know,Don't know,Don't know,Don't know,2 (sometimes),Docker,"Lack of trust, Technical problems (e.g., component's granularity didn't fit, missing functionality, incompatible interfaces)","Systematic reuse (e.g., frameworks, components, libraries, ...)",We have a clear definition of interfaces of each component,,4 (always),4 (always),2 (sometimes),4 (always),0 (never),Don't know,,"Simulation, Runtime monitoring","metrics, logs, videos ",Product Manager,Don't know,Don't know,Don't know,Don't know,Don't know,User Story with acceptance criteria ,3 (agree),2 (neutral),2 (neutral),3 (agree),3 (agree),3 (agree),3 (agree),3 (agree),3 (agree),4 (strongly agree),2 (neutral),Don't know,business process integration ,we use our platfrom rapyuta.io and other internal tooling to solve. I am sorry it is hard to describe in a few sentences.,distributed software management in a multi-robot scenario is challenging,"From my limited observation, I feel robotics software engineering is lagging in best practices. There is a lot to learn from standard software engineering practices. ","Yes, first we need to align on best practices",Business Manager - Robotics ,10,Male,+50